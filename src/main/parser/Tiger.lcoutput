Recognition points

Grammar

    0 $accept: . prog YYEOF

    1 prog: . exp YYEOF

    2 exp: . NRO
    3    | PI . PD
    4    | . NIL
    5    | . LITERAL
    6    | . BREAK
    7    | l_value .
    8    | l_value DOSPIG exp .
    9    | PI exp . PCOMA explist PD
   10    | exp PIPE exp .
   11    | exp AMPER exp .
   12    | exp IGUAL exp .
   13    | exp MENOR exp .
   14    | exp MENIG exp .
   15    | exp MAYOR exp .
   16    | exp MAYIG exp .
   17    | exp DIST exp .
   18    | exp MAS exp .
   19    | exp MENOS exp .
   20    | exp POR exp .
   21    | exp DIV exp .
   22    | MENOS exp .
   23    | PI exp . PD
   24    | id . PI args PD
   25    | IF exp THEN exp .
   26    | IF exp THEN exp ELSE exp .
   27    | WHILE exp DO exp .
   28    | FOR id DOSPIG exp TO exp DO exp .
   29    | LET decs IN . END
   30    | LET decs IN exp . END
   31    | LET decs IN exp . PCOMA explist END
   32    | l_value CI exp CD OF exp .
   33    | id . LI rec_fields LD

   34 explist: exp . PCOMA explist
   35        | exp .

   36 rec_fields: id IGUAL exp COMA rec_fields .
   37           | id IGUAL exp .
   38           | . /* empty */

   39 decs: . dec decs
   40     | . /* empty */

   41 dec: TYPE id IGUAL ty .
   42    | . vardec
   43    | . fundec

   44 ty: . id
   45   | . LI tyflds LD
   46   | ARRAY OF id .

   47 id: . ID

   48 tyflds: tyfield . COMA tyflds
   49       | tyfield .
   50       | . /* empty */

   51 vardec: VAR id DOSPIG exp .
   52       | VAR id DOSP id DOSPIG exp .

   53 fundec: FUNCTION id PI tyflds PD IGUAL exp .
   54       | FUNCTION id PI tyflds PD DOSP id IGUAL exp .

   55 tyfield: . id DOSP id

   56 args: exp . COMA args
   57     | exp .
   58     | . /* empty */

   59 l_value: id .
   60        | l_value . PTO id
   61        | l_value CI exp CD .


state 0 ( based on state 0 )

    _: ⊢ . prog
    prog: . exp YYEOF

    NIL	announce rule prog: exp YYEOF
    BREAK	announce rule prog: exp YYEOF
    WHILE	announce rule prog: exp YYEOF
    LET	announce rule prog: exp YYEOF
    ID	announce rule prog: exp YYEOF
    IF	announce rule prog: exp YYEOF
    PI	announce rule prog: exp YYEOF
    LITERAL	announce rule prog: exp YYEOF
    NRO	announce rule prog: exp YYEOF
    FOR	announce rule prog: exp YYEOF
    MENOS	announce rule prog: exp YYEOF

    prog	go to state 1


state 1 ( based on state 12 )

    _: ⊢ prog .

    YYEOF	accept prog


state 2 ( based on state 0 )

    _: ⊢ . exp
    exp: . FOR id DOSPIG exp TO exp DO exp
    exp: . exp AMPER exp
    exp: . exp DIV exp
    exp: . NIL
    exp: . exp POR exp
    exp: . PI PD
    exp: . MENOS exp
    exp: . IF exp THEN exp ELSE exp
    l_value: . l_value PTO id
    exp: . BREAK
    l_value: . l_value CI exp CD
    exp: . exp MAYIG exp
    exp: . LET decs IN END
    exp: . exp MENOR exp
    exp: . PI exp PD
    exp: . l_value CI exp CD OF exp
    exp: . id LI rec_fields LD
    exp: . l_value DOSPIG exp
    exp: . id PI args PD
    l_value: . id
    exp: . exp PIPE exp
    exp: . PI exp PCOMA explist PD
    exp: . exp MENIG exp
    exp: . LET decs IN exp PCOMA explist END
    exp: . NRO
    exp: . exp MAS exp
    exp: . exp MENOS exp
    exp: . l_value
    exp: . LET decs IN exp END
    exp: . IF exp THEN exp
    exp: . exp MAYOR exp
    exp: . exp DIST exp
    id: . ID
    exp: . LITERAL
    exp: . exp IGUAL exp
    exp: . WHILE exp DO exp

    NIL	announce rule exp: NIL
    BREAK	announce rule exp: BREAK
    WHILE	shift, and go to 3
    LET	shift, and go to 4
    ID	announce rule id: ID
    IF	shift, and go to 7
    PI	shift, and go to 8
    LITERAL	announce rule exp: LITERAL
    NRO	announce rule exp: NRO
    FOR	shift, and go to 9
    MENOS	shift, and go to 12

    exp	go to state 62
    id	go to state 16
    l_value	go to state 17


state 3 ( based on state 6 )

    exp: . FOR id DOSPIG exp TO exp DO exp
    exp: . exp AMPER exp
    exp: . exp DIV exp
    exp: . NIL
    exp: . exp POR exp
    exp: . PI PD
    exp: . MENOS exp
    exp: . IF exp THEN exp ELSE exp
    l_value: . l_value PTO id
    exp: . BREAK
    l_value: . l_value CI exp CD
    exp: . exp MAYIG exp
    exp: . LET decs IN END
    exp: WHILE . exp DO exp
    exp: . exp MENOR exp
    exp: . PI exp PD
    exp: . l_value CI exp CD OF exp
    exp: . id LI rec_fields LD
    exp: . l_value DOSPIG exp
    exp: . id PI args PD
    l_value: . id
    exp: . exp PIPE exp
    exp: . PI exp PCOMA explist PD
    exp: . exp MENIG exp
    exp: . LET decs IN exp PCOMA explist END
    exp: . NRO
    exp: . exp MAS exp
    exp: . exp MENOS exp
    exp: . l_value
    exp: . LET decs IN exp END
    exp: . IF exp THEN exp
    exp: . exp MAYOR exp
    exp: . exp DIST exp
    id: . ID
    exp: . LITERAL
    exp: . exp IGUAL exp
    exp: . WHILE exp DO exp

    NIL	announce rule exp: NIL
    BREAK	announce rule exp: BREAK
    WHILE	shift, and go to 3
    LET	shift, and go to 4
    ID	announce rule id: ID
    IF	shift, and go to 7
    PI	shift, and go to 8
    LITERAL	announce rule exp: LITERAL
    NRO	announce rule exp: NRO
    FOR	shift, and go to 9
    MENOS	shift, and go to 12

    exp	go to state 59
    id	go to state 16
    l_value	go to state 17


state 4 ( based on state 4 )

    exp: LET . decs IN exp END
    decs: .
    exp: LET . decs IN END
    decs: . dec decs
    exp: LET . decs IN exp PCOMA explist END

    FUNCTION	announce rule decs: dec decs
    TYPE	announce rule decs: dec decs
    VAR	announce rule decs: dec decs
    $default	announce rule decs: /* empty */

    decs	go to state 5


state 5 ( based on state 19 )

    exp: LET decs . IN exp PCOMA explist END
    exp: LET decs . IN exp END
    exp: LET decs . IN END

    IN	shift, and go to 6


state 6 ( based on state 51 )

    exp: . FOR id DOSPIG exp TO exp DO exp
    exp: . exp AMPER exp
    exp: . exp DIV exp
    exp: . NIL
    exp: LET decs IN . END
    exp: . exp POR exp
    exp: . PI PD
    exp: . MENOS exp
    exp: . IF exp THEN exp ELSE exp
    l_value: . l_value PTO id
    exp: . BREAK
    l_value: . l_value CI exp CD
    exp: . exp MAYIG exp
    exp: . LET decs IN END
    exp: . exp MENOR exp
    exp: . PI exp PD
    exp: . l_value CI exp CD OF exp
    exp: . id LI rec_fields LD
    exp: . l_value DOSPIG exp
    exp: . id PI args PD
    l_value: . id
    exp: LET decs IN . exp END
    exp: . exp PIPE exp
    exp: . PI exp PCOMA explist PD
    exp: . exp MENIG exp
    exp: . LET decs IN exp PCOMA explist END
    exp: . NRO
    exp: . exp MAS exp
    exp: . exp MENOS exp
    exp: . l_value
    exp: . LET decs IN exp END
    exp: . IF exp THEN exp
    exp: LET decs IN . exp PCOMA explist END
    exp: . exp MAYOR exp
    exp: . exp DIST exp
    id: . ID
    exp: . LITERAL
    exp: . exp IGUAL exp
    exp: . WHILE exp DO exp

    NIL	announce rule exp: NIL
    BREAK	announce rule exp: BREAK
    WHILE	shift, and go to 3
    LET	shift, and go to 4
    ID	announce rule id: ID
    END	announce rule exp: LET decs IN END
    IF	shift, and go to 7
    PI	shift, and go to 8
    LITERAL	announce rule exp: LITERAL
    NRO	announce rule exp: NRO
    FOR	shift, and go to 9
    MENOS	shift, and go to 12

    exp	go to state 58
    id	go to state 16
    l_value	go to state 17


state 7 ( based on state 5 )

    exp: . FOR id DOSPIG exp TO exp DO exp
    exp: . exp AMPER exp
    exp: . exp DIV exp
    exp: . NIL
    exp: . exp POR exp
    exp: . PI PD
    exp: . MENOS exp
    exp: IF . exp THEN exp ELSE exp
    exp: . IF exp THEN exp ELSE exp
    l_value: . l_value PTO id
    exp: . BREAK
    l_value: . l_value CI exp CD
    exp: . exp MAYIG exp
    exp: . LET decs IN END
    exp: . exp MENOR exp
    exp: . PI exp PD
    exp: . l_value CI exp CD OF exp
    exp: . id LI rec_fields LD
    exp: . l_value DOSPIG exp
    exp: . id PI args PD
    l_value: . id
    exp: . exp PIPE exp
    exp: . PI exp PCOMA explist PD
    exp: . exp MENIG exp
    exp: . LET decs IN exp PCOMA explist END
    exp: . NRO
    exp: . exp MAS exp
    exp: . exp MENOS exp
    exp: . l_value
    exp: . LET decs IN exp END
    exp: . IF exp THEN exp
    exp: IF . exp THEN exp
    exp: . exp MAYOR exp
    exp: . exp DIST exp
    id: . ID
    exp: . LITERAL
    exp: . exp IGUAL exp
    exp: . WHILE exp DO exp

    NIL	announce rule exp: NIL
    BREAK	announce rule exp: BREAK
    WHILE	shift, and go to 3
    LET	shift, and go to 4
    ID	announce rule id: ID
    IF	shift, and go to 7
    PI	shift, and go to 8
    LITERAL	announce rule exp: LITERAL
    NRO	announce rule exp: NRO
    FOR	shift, and go to 9
    MENOS	shift, and go to 12

    exp	go to state 53
    id	go to state 16
    l_value	go to state 17


state 8 ( based on state 9 )

    exp: . FOR id DOSPIG exp TO exp DO exp
    exp: . exp AMPER exp
    exp: . exp DIV exp
    exp: . NIL
    exp: . exp POR exp
    exp: . PI PD
    exp: . MENOS exp
    exp: . IF exp THEN exp ELSE exp
    l_value: . l_value PTO id
    exp: . BREAK
    l_value: . l_value CI exp CD
    exp: . exp MAYIG exp
    exp: . LET decs IN END
    exp: . exp MENOR exp
    exp: . PI exp PD
    exp: . l_value CI exp CD OF exp
    exp: . id LI rec_fields LD
    exp: . l_value DOSPIG exp
    exp: . id PI args PD
    l_value: . id
    exp: . exp PIPE exp
    exp: . PI exp PCOMA explist PD
    exp: . exp MENIG exp
    exp: . LET decs IN exp PCOMA explist END
    exp: . NRO
    exp: . exp MAS exp
    exp: PI . exp PD
    exp: . exp MENOS exp
    exp: . l_value
    exp: . LET decs IN exp END
    exp: . IF exp THEN exp
    exp: . exp MAYOR exp
    exp: PI . exp PCOMA explist PD
    exp: PI . PD
    exp: . exp DIST exp
    id: . ID
    exp: . LITERAL
    exp: . exp IGUAL exp
    exp: . WHILE exp DO exp

    NIL	announce rule exp: NIL
    BREAK	announce rule exp: BREAK
    WHILE	shift, and go to 3
    PD	announce rule exp: PI PD
    LET	shift, and go to 4
    ID	announce rule id: ID
    IF	shift, and go to 7
    PI	shift, and go to 8
    LITERAL	announce rule exp: LITERAL
    NRO	announce rule exp: NRO
    FOR	shift, and go to 9
    MENOS	shift, and go to 12

    exp	go to state 52
    id	go to state 16
    l_value	go to state 17


state 9 ( based on state 7 )

    exp: FOR . id DOSPIG exp TO exp DO exp
    id: . ID

    ID	announce rule id: ID

    id	go to state 10


state 10 ( based on state 25 )

    exp: FOR id . DOSPIG exp TO exp DO exp

    DOSPIG	shift, and go to 11


state 11 ( based on state 55 )

    exp: . FOR id DOSPIG exp TO exp DO exp
    exp: . exp AMPER exp
    exp: . exp DIV exp
    exp: . NIL
    exp: . exp POR exp
    exp: . PI PD
    exp: . MENOS exp
    exp: FOR id DOSPIG . exp TO exp DO exp
    exp: . IF exp THEN exp ELSE exp
    l_value: . l_value PTO id
    exp: . BREAK
    l_value: . l_value CI exp CD
    exp: . exp MAYIG exp
    exp: . LET decs IN END
    exp: . exp MENOR exp
    exp: . PI exp PD
    exp: . l_value CI exp CD OF exp
    exp: . id LI rec_fields LD
    exp: . l_value DOSPIG exp
    exp: . id PI args PD
    l_value: . id
    exp: . exp PIPE exp
    exp: . PI exp PCOMA explist PD
    exp: . exp MENIG exp
    exp: . LET decs IN exp PCOMA explist END
    exp: . NRO
    exp: . exp MAS exp
    exp: . exp MENOS exp
    exp: . l_value
    exp: . LET decs IN exp END
    exp: . IF exp THEN exp
    exp: . exp MAYOR exp
    exp: . exp DIST exp
    id: . ID
    exp: . LITERAL
    exp: . exp IGUAL exp
    exp: . WHILE exp DO exp

    NIL	announce rule exp: NIL
    BREAK	announce rule exp: BREAK
    WHILE	shift, and go to 3
    LET	shift, and go to 4
    ID	announce rule id: ID
    IF	shift, and go to 7
    PI	shift, and go to 8
    LITERAL	announce rule exp: LITERAL
    NRO	announce rule exp: NRO
    FOR	shift, and go to 9
    MENOS	shift, and go to 12

    exp	go to state 47
    id	go to state 16
    l_value	go to state 17


state 12 ( based on state 10 )

    exp: . FOR id DOSPIG exp TO exp DO exp
    exp: . exp AMPER exp
    exp: . exp DIV exp
    exp: . NIL
    exp: . exp POR exp
    exp: . PI PD
    exp: . MENOS exp
    exp: MENOS . exp
    exp: . IF exp THEN exp ELSE exp
    l_value: . l_value PTO id
    exp: . BREAK
    l_value: . l_value CI exp CD
    exp: . exp MAYIG exp
    exp: . LET decs IN END
    exp: . exp MENOR exp
    exp: . PI exp PD
    exp: . l_value CI exp CD OF exp
    exp: . id LI rec_fields LD
    exp: . l_value DOSPIG exp
    exp: . id PI args PD
    l_value: . id
    exp: . exp PIPE exp
    exp: . PI exp PCOMA explist PD
    exp: . exp MENIG exp
    exp: . LET decs IN exp PCOMA explist END
    exp: . NRO
    exp: . exp MAS exp
    exp: . exp MENOS exp
    exp: . l_value
    exp: . LET decs IN exp END
    exp: . IF exp THEN exp
    exp: . exp MAYOR exp
    exp: . exp DIST exp
    id: . ID
    exp: . LITERAL
    exp: . exp IGUAL exp
    exp: . WHILE exp DO exp

    NIL	announce rule exp: NIL
    BREAK	announce rule exp: BREAK
    WHILE	shift, and go to 3
    LET	shift, and go to 4
    ID	announce rule id: ID
    IF	shift, and go to 7
    PI	shift, and go to 8
    LITERAL	announce rule exp: LITERAL
    NRO	announce rule exp: NRO
    FOR	shift, and go to 9
    MENOS	shift, and go to 12

    exp	go to state 13
    id	go to state 16
    l_value	go to state 17


state 13 ( based on state 28 )

    exp: exp . MENOS exp
    exp: exp . IGUAL exp
    exp: exp . MAS exp
    exp: MENOS exp .
    exp: exp . POR exp
    exp: exp . MAYOR exp
    exp: exp . DIST exp
    exp: exp . MENIG exp
    exp: exp . PIPE exp
    exp: exp . MENOR exp
    exp: exp . MAYIG exp
    exp: exp . AMPER exp
    exp: exp . DIV exp

    DIV	shift, and go to 14
    POR	shift, and go to 22
    $default	announce rule exp: MENOS exp


state 14 ( based on state 42 )

    exp: . FOR id DOSPIG exp TO exp DO exp
    exp: . exp AMPER exp
    exp: . exp DIV exp
    exp: . NIL
    exp: . exp POR exp
    exp: . PI PD
    exp: . MENOS exp
    exp: . IF exp THEN exp ELSE exp
    l_value: . l_value PTO id
    exp: . BREAK
    l_value: . l_value CI exp CD
    exp: . exp MAYIG exp
    exp: . LET decs IN END
    exp: . exp MENOR exp
    exp: . PI exp PD
    exp: . l_value CI exp CD OF exp
    exp: . id LI rec_fields LD
    exp: . l_value DOSPIG exp
    exp: . id PI args PD
    l_value: . id
    exp: . exp PIPE exp
    exp: . PI exp PCOMA explist PD
    exp: . exp MENIG exp
    exp: . LET decs IN exp PCOMA explist END
    exp: . NRO
    exp: . exp MAS exp
    exp: exp DIV . exp
    exp: . exp MENOS exp
    exp: . l_value
    exp: . LET decs IN exp END
    exp: . IF exp THEN exp
    exp: . exp MAYOR exp
    exp: . exp DIST exp
    id: . ID
    exp: . LITERAL
    exp: . exp IGUAL exp
    exp: . WHILE exp DO exp

    NIL	announce rule exp: NIL
    BREAK	announce rule exp: BREAK
    WHILE	shift, and go to 3
    LET	shift, and go to 4
    ID	announce rule id: ID
    IF	shift, and go to 7
    PI	shift, and go to 8
    LITERAL	announce rule exp: LITERAL
    NRO	announce rule exp: NRO
    FOR	shift, and go to 9
    MENOS	shift, and go to 12

    exp	go to state 15
    id	go to state 16
    l_value	go to state 17


state 15 ( based on state 69 )

    exp: exp . MENOS exp
    exp: exp DIV exp .
    exp: exp . IGUAL exp
    exp: exp . MAS exp
    exp: exp . POR exp
    exp: exp . MAYOR exp
    exp: exp . DIST exp
    exp: exp . MENIG exp
    exp: exp . PIPE exp
    exp: exp . MENOR exp
    exp: exp . MAYIG exp
    exp: exp . AMPER exp
    exp: exp . DIV exp

    $default	announce rule exp: exp DIV exp


state 16 ( based on state 14 )

    exp: id . LI rec_fields LD
    l_value: id .
    exp: id . PI args PD

    LI	announce rule exp: id LI rec_fields LD
    PI	announce rule exp: id PI args PD
    $default	announce rule l_value: id


state 17 ( based on state 15 )

    l_value: l_value . CI exp CD
    l_value: l_value . PTO id
    exp: l_value . CI exp CD OF exp
    exp: l_value .
    exp: l_value . DOSPIG exp

    PTO	announce rule l_value: l_value PTO id
    CI	shift, and go to 18
    DOSPIG	shift, and go to 45
    $default	announce rule exp: l_value


state 18 ( based on state 47 )

    exp: . FOR id DOSPIG exp TO exp DO exp
    exp: . exp AMPER exp
    exp: . exp DIV exp
    exp: . NIL
    l_value: l_value CI . exp CD
    exp: . exp POR exp
    exp: . PI PD
    exp: . MENOS exp
    exp: . IF exp THEN exp ELSE exp
    l_value: . l_value PTO id
    exp: . BREAK
    l_value: . l_value CI exp CD
    exp: . exp MAYIG exp
    exp: . LET decs IN END
    exp: . exp MENOR exp
    exp: . PI exp PD
    exp: . l_value CI exp CD OF exp
    exp: . id LI rec_fields LD
    exp: l_value CI . exp CD OF exp
    exp: . l_value DOSPIG exp
    exp: . id PI args PD
    l_value: . id
    exp: . exp PIPE exp
    exp: . PI exp PCOMA explist PD
    exp: . exp MENIG exp
    exp: . LET decs IN exp PCOMA explist END
    exp: . NRO
    exp: . exp MAS exp
    exp: . exp MENOS exp
    exp: . l_value
    exp: . LET decs IN exp END
    exp: . IF exp THEN exp
    exp: . exp MAYOR exp
    exp: . exp DIST exp
    id: . ID
    exp: . LITERAL
    exp: . exp IGUAL exp
    exp: . WHILE exp DO exp

    NIL	announce rule exp: NIL
    BREAK	announce rule exp: BREAK
    WHILE	shift, and go to 3
    LET	shift, and go to 4
    ID	announce rule id: ID
    IF	shift, and go to 7
    PI	shift, and go to 8
    LITERAL	announce rule exp: LITERAL
    NRO	announce rule exp: NRO
    FOR	shift, and go to 9
    MENOS	shift, and go to 12

    exp	go to state 19
    id	go to state 16
    l_value	go to state 17


state 19 ( based on state 76 )

    exp: exp . MENOS exp
    exp: exp . IGUAL exp
    exp: l_value CI exp . CD OF exp
    exp: exp . MAS exp
    exp: exp . POR exp
    exp: exp . MAYOR exp
    exp: exp . MENIG exp
    exp: exp . DIST exp
    exp: exp . PIPE exp
    exp: exp . MENOR exp
    exp: exp . MAYIG exp
    exp: exp . AMPER exp
    l_value: l_value CI exp . CD
    exp: exp . DIV exp

    DIST	shift, and go to 20
    MAYIG	shift, and go to 28
    CD	shift, and go to 30
    PIPE	shift, and go to 33
    DIV	shift, and go to 14
    AMPER	shift, and go to 35
    MAYOR	shift, and go to 37
    MENOR	shift, and go to 39
    POR	shift, and go to 22
    IGUAL	shift, and go to 41
    MENIG	shift, and go to 43
    MAS	shift, and go to 24
    MENOS	shift, and go to 26


state 20 ( based on state 38 )

    exp: . FOR id DOSPIG exp TO exp DO exp
    exp: . exp AMPER exp
    exp: . exp DIV exp
    exp: . NIL
    exp: . exp POR exp
    exp: . PI PD
    exp: . MENOS exp
    exp: exp DIST . exp
    exp: . IF exp THEN exp ELSE exp
    l_value: . l_value PTO id
    exp: . BREAK
    l_value: . l_value CI exp CD
    exp: . exp MAYIG exp
    exp: . LET decs IN END
    exp: . exp MENOR exp
    exp: . PI exp PD
    exp: . l_value CI exp CD OF exp
    exp: . id LI rec_fields LD
    exp: . l_value DOSPIG exp
    exp: . id PI args PD
    l_value: . id
    exp: . exp PIPE exp
    exp: . PI exp PCOMA explist PD
    exp: . exp MENIG exp
    exp: . LET decs IN exp PCOMA explist END
    exp: . NRO
    exp: . exp MAS exp
    exp: . exp MENOS exp
    exp: . l_value
    exp: . LET decs IN exp END
    exp: . IF exp THEN exp
    exp: . exp MAYOR exp
    exp: . exp DIST exp
    id: . ID
    exp: . LITERAL
    exp: . exp IGUAL exp
    exp: . WHILE exp DO exp

    NIL	announce rule exp: NIL
    BREAK	announce rule exp: BREAK
    WHILE	shift, and go to 3
    LET	shift, and go to 4
    ID	announce rule id: ID
    IF	shift, and go to 7
    PI	shift, and go to 8
    LITERAL	announce rule exp: LITERAL
    NRO	announce rule exp: NRO
    FOR	shift, and go to 9
    MENOS	shift, and go to 12

    exp	go to state 21
    id	go to state 16
    l_value	go to state 17


state 21 ( based on state 65 )

    exp: exp . MENOS exp
    exp: exp . IGUAL exp
    exp: exp . MAS exp
    exp: exp DIST exp .
    exp: exp . POR exp
    exp: exp . MAYOR exp
    exp: exp . DIST exp
    exp: exp . MENIG exp
    exp: exp . PIPE exp
    exp: exp . MENOR exp
    exp: exp . MAYIG exp
    exp: exp . AMPER exp
    exp: exp . DIV exp

    DIST	error (nonassociative)
    MAYIG	error (nonassociative)
    DIV	shift, and go to 14
    MAYOR	error (nonassociative)
    MENOR	error (nonassociative)
    POR	shift, and go to 22
    IGUAL	error (nonassociative)
    MAS	shift, and go to 24
    MENOS	shift, and go to 26
    MENIG	error (nonassociative)
    $default	announce rule exp: exp DIST exp


state 22 ( based on state 41 )

    exp: . FOR id DOSPIG exp TO exp DO exp
    exp: . exp AMPER exp
    exp: . exp DIV exp
    exp: . NIL
    exp: exp POR . exp
    exp: . exp POR exp
    exp: . PI PD
    exp: . MENOS exp
    exp: . IF exp THEN exp ELSE exp
    l_value: . l_value PTO id
    exp: . BREAK
    l_value: . l_value CI exp CD
    exp: . exp MAYIG exp
    exp: . LET decs IN END
    exp: . exp MENOR exp
    exp: . PI exp PD
    exp: . l_value CI exp CD OF exp
    exp: . id LI rec_fields LD
    exp: . l_value DOSPIG exp
    exp: . id PI args PD
    l_value: . id
    exp: . exp PIPE exp
    exp: . PI exp PCOMA explist PD
    exp: . exp MENIG exp
    exp: . LET decs IN exp PCOMA explist END
    exp: . NRO
    exp: . exp MAS exp
    exp: . exp MENOS exp
    exp: . l_value
    exp: . LET decs IN exp END
    exp: . IF exp THEN exp
    exp: . exp MAYOR exp
    exp: . exp DIST exp
    id: . ID
    exp: . LITERAL
    exp: . exp IGUAL exp
    exp: . WHILE exp DO exp

    NIL	announce rule exp: NIL
    BREAK	announce rule exp: BREAK
    WHILE	shift, and go to 3
    LET	shift, and go to 4
    ID	announce rule id: ID
    IF	shift, and go to 7
    PI	shift, and go to 8
    LITERAL	announce rule exp: LITERAL
    NRO	announce rule exp: NRO
    FOR	shift, and go to 9
    MENOS	shift, and go to 12

    exp	go to state 23
    id	go to state 16
    l_value	go to state 17


state 23 ( based on state 68 )

    exp: exp . MENOS exp
    exp: exp . IGUAL exp
    exp: exp POR exp .
    exp: exp . MAS exp
    exp: exp . POR exp
    exp: exp . MAYOR exp
    exp: exp . DIST exp
    exp: exp . MENIG exp
    exp: exp . PIPE exp
    exp: exp . MENOR exp
    exp: exp . MAYIG exp
    exp: exp . AMPER exp
    exp: exp . DIV exp

    $default	announce rule exp: exp POR exp


state 24 ( based on state 39 )

    exp: . FOR id DOSPIG exp TO exp DO exp
    exp: . exp AMPER exp
    exp: . exp DIV exp
    exp: . NIL
    exp: . exp POR exp
    exp: . PI PD
    exp: . MENOS exp
    exp: . IF exp THEN exp ELSE exp
    l_value: . l_value PTO id
    exp: . BREAK
    l_value: . l_value CI exp CD
    exp: . exp MAYIG exp
    exp: exp MAS . exp
    exp: . LET decs IN END
    exp: . exp MENOR exp
    exp: . PI exp PD
    exp: . l_value CI exp CD OF exp
    exp: . id LI rec_fields LD
    exp: . l_value DOSPIG exp
    exp: . id PI args PD
    l_value: . id
    exp: . exp PIPE exp
    exp: . PI exp PCOMA explist PD
    exp: . exp MENIG exp
    exp: . LET decs IN exp PCOMA explist END
    exp: . NRO
    exp: . exp MAS exp
    exp: . exp MENOS exp
    exp: . l_value
    exp: . LET decs IN exp END
    exp: . IF exp THEN exp
    exp: . exp MAYOR exp
    exp: . exp DIST exp
    id: . ID
    exp: . LITERAL
    exp: . exp IGUAL exp
    exp: . WHILE exp DO exp

    NIL	announce rule exp: NIL
    BREAK	announce rule exp: BREAK
    WHILE	shift, and go to 3
    LET	shift, and go to 4
    ID	announce rule id: ID
    IF	shift, and go to 7
    PI	shift, and go to 8
    LITERAL	announce rule exp: LITERAL
    NRO	announce rule exp: NRO
    FOR	shift, and go to 9
    MENOS	shift, and go to 12

    exp	go to state 25
    id	go to state 16
    l_value	go to state 17


state 25 ( based on state 66 )

    exp: exp . MENOS exp
    exp: exp . IGUAL exp
    exp: exp MAS exp .
    exp: exp . MAS exp
    exp: exp . POR exp
    exp: exp . MAYOR exp
    exp: exp . DIST exp
    exp: exp . MENIG exp
    exp: exp . PIPE exp
    exp: exp . MENOR exp
    exp: exp . MAYIG exp
    exp: exp . AMPER exp
    exp: exp . DIV exp

    DIV	shift, and go to 14
    POR	shift, and go to 22
    $default	announce rule exp: exp MAS exp


state 26 ( based on state 40 )

    exp: . FOR id DOSPIG exp TO exp DO exp
    exp: exp MENOS . exp
    exp: . exp AMPER exp
    exp: . exp DIV exp
    exp: . NIL
    exp: . exp POR exp
    exp: . PI PD
    exp: . MENOS exp
    exp: . IF exp THEN exp ELSE exp
    l_value: . l_value PTO id
    exp: . BREAK
    l_value: . l_value CI exp CD
    exp: . exp MAYIG exp
    exp: . LET decs IN END
    exp: . exp MENOR exp
    exp: . PI exp PD
    exp: . l_value CI exp CD OF exp
    exp: . id LI rec_fields LD
    exp: . l_value DOSPIG exp
    exp: . id PI args PD
    l_value: . id
    exp: . exp PIPE exp
    exp: . PI exp PCOMA explist PD
    exp: . exp MENIG exp
    exp: . LET decs IN exp PCOMA explist END
    exp: . NRO
    exp: . exp MAS exp
    exp: . exp MENOS exp
    exp: . l_value
    exp: . LET decs IN exp END
    exp: . IF exp THEN exp
    exp: . exp MAYOR exp
    exp: . exp DIST exp
    id: . ID
    exp: . LITERAL
    exp: . exp IGUAL exp
    exp: . WHILE exp DO exp

    NIL	announce rule exp: NIL
    BREAK	announce rule exp: BREAK
    WHILE	shift, and go to 3
    LET	shift, and go to 4
    ID	announce rule id: ID
    IF	shift, and go to 7
    PI	shift, and go to 8
    LITERAL	announce rule exp: LITERAL
    NRO	announce rule exp: NRO
    FOR	shift, and go to 9
    MENOS	shift, and go to 12

    exp	go to state 27
    id	go to state 16
    l_value	go to state 17


state 27 ( based on state 67 )

    exp: exp . MENOS exp
    exp: exp . IGUAL exp
    exp: exp . MAS exp
    exp: exp . POR exp
    exp: exp . MAYOR exp
    exp: exp . DIST exp
    exp: exp . MENIG exp
    exp: exp . PIPE exp
    exp: exp . MENOR exp
    exp: exp . MAYIG exp
    exp: exp . AMPER exp
    exp: exp . DIV exp
    exp: exp MENOS exp .

    DIV	shift, and go to 14
    POR	shift, and go to 22
    $default	announce rule exp: exp MENOS exp


state 28 ( based on state 37 )

    exp: . FOR id DOSPIG exp TO exp DO exp
    exp: . exp AMPER exp
    exp: . exp DIV exp
    exp: . NIL
    exp: . exp POR exp
    exp: . PI PD
    exp: . MENOS exp
    exp: . IF exp THEN exp ELSE exp
    l_value: . l_value PTO id
    exp: . BREAK
    l_value: . l_value CI exp CD
    exp: . exp MAYIG exp
    exp: . LET decs IN END
    exp: . exp MENOR exp
    exp: . PI exp PD
    exp: . l_value CI exp CD OF exp
    exp: . id LI rec_fields LD
    exp: . l_value DOSPIG exp
    exp: . id PI args PD
    l_value: . id
    exp: exp MAYIG . exp
    exp: . exp PIPE exp
    exp: . PI exp PCOMA explist PD
    exp: . exp MENIG exp
    exp: . LET decs IN exp PCOMA explist END
    exp: . NRO
    exp: . exp MAS exp
    exp: . exp MENOS exp
    exp: . l_value
    exp: . LET decs IN exp END
    exp: . IF exp THEN exp
    exp: . exp MAYOR exp
    exp: . exp DIST exp
    id: . ID
    exp: . LITERAL
    exp: . exp IGUAL exp
    exp: . WHILE exp DO exp

    NIL	announce rule exp: NIL
    BREAK	announce rule exp: BREAK
    WHILE	shift, and go to 3
    LET	shift, and go to 4
    ID	announce rule id: ID
    IF	shift, and go to 7
    PI	shift, and go to 8
    LITERAL	announce rule exp: LITERAL
    NRO	announce rule exp: NRO
    FOR	shift, and go to 9
    MENOS	shift, and go to 12

    exp	go to state 29
    id	go to state 16
    l_value	go to state 17


state 29 ( based on state 64 )

    exp: exp . MENOS exp
    exp: exp . IGUAL exp
    exp: exp . MAS exp
    exp: exp . POR exp
    exp: exp MAYIG exp .
    exp: exp . MAYOR exp
    exp: exp . DIST exp
    exp: exp . MENIG exp
    exp: exp . PIPE exp
    exp: exp . MENOR exp
    exp: exp . MAYIG exp
    exp: exp . AMPER exp
    exp: exp . DIV exp

    DIST	error (nonassociative)
    MAYIG	error (nonassociative)
    DIV	shift, and go to 14
    MAYOR	error (nonassociative)
    MENOR	error (nonassociative)
    POR	shift, and go to 22
    IGUAL	error (nonassociative)
    MAS	shift, and go to 24
    MENOS	shift, and go to 26
    MENIG	error (nonassociative)
    $default	announce rule exp: exp MAYIG exp


state 30 ( based on state 92 )

    l_value: l_value CI exp CD .
    exp: l_value CI exp CD . OF exp

    OF	shift, and go to 31
    $default	announce rule l_value: l_value CI exp CD


state 31 ( based on state 110 )

    exp: . FOR id DOSPIG exp TO exp DO exp
    exp: . exp AMPER exp
    exp: . exp DIV exp
    exp: . NIL
    exp: . exp POR exp
    exp: . PI PD
    exp: . MENOS exp
    exp: . IF exp THEN exp ELSE exp
    l_value: . l_value PTO id
    exp: l_value CI exp CD OF . exp
    exp: . BREAK
    l_value: . l_value CI exp CD
    exp: . exp MAYIG exp
    exp: . LET decs IN END
    exp: . exp MENOR exp
    exp: . PI exp PD
    exp: . l_value CI exp CD OF exp
    exp: . id LI rec_fields LD
    exp: . l_value DOSPIG exp
    exp: . id PI args PD
    l_value: . id
    exp: . exp PIPE exp
    exp: . PI exp PCOMA explist PD
    exp: . exp MENIG exp
    exp: . LET decs IN exp PCOMA explist END
    exp: . NRO
    exp: . exp MAS exp
    exp: . exp MENOS exp
    exp: . l_value
    exp: . LET decs IN exp END
    exp: . IF exp THEN exp
    exp: . exp MAYOR exp
    exp: . exp DIST exp
    id: . ID
    exp: . LITERAL
    exp: . exp IGUAL exp
    exp: . WHILE exp DO exp

    NIL	announce rule exp: NIL
    BREAK	announce rule exp: BREAK
    WHILE	shift, and go to 3
    LET	shift, and go to 4
    ID	announce rule id: ID
    IF	shift, and go to 7
    PI	shift, and go to 8
    LITERAL	announce rule exp: LITERAL
    NRO	announce rule exp: NRO
    FOR	shift, and go to 9
    MENOS	shift, and go to 12

    exp	go to state 32
    id	go to state 16
    l_value	go to state 17


state 32 ( based on state 122 )

    exp: exp . MENOS exp
    exp: exp . IGUAL exp
    exp: exp . MAS exp
    exp: exp . POR exp
    exp: l_value CI exp CD OF exp .
    exp: exp . MAYOR exp
    exp: exp . DIST exp
    exp: exp . MENIG exp
    exp: exp . PIPE exp
    exp: exp . MENOR exp
    exp: exp . MAYIG exp
    exp: exp . AMPER exp
    exp: exp . DIV exp

    $default	announce rule exp: l_value CI exp CD OF exp


state 33 ( based on state 33 )

    exp: . FOR id DOSPIG exp TO exp DO exp
    exp: . exp AMPER exp
    exp: . exp DIV exp
    exp: . NIL
    exp: . exp POR exp
    exp: . PI PD
    exp: . MENOS exp
    exp: . IF exp THEN exp ELSE exp
    l_value: . l_value PTO id
    exp: . BREAK
    l_value: . l_value CI exp CD
    exp: . exp MAYIG exp
    exp: . LET decs IN END
    exp: . exp MENOR exp
    exp: . PI exp PD
    exp: . l_value CI exp CD OF exp
    exp: . id LI rec_fields LD
    exp: . l_value DOSPIG exp
    exp: . id PI args PD
    l_value: . id
    exp: . exp PIPE exp
    exp: . PI exp PCOMA explist PD
    exp: . exp MENIG exp
    exp: . LET decs IN exp PCOMA explist END
    exp: . NRO
    exp: . exp MAS exp
    exp: . exp MENOS exp
    exp: . l_value
    exp: . LET decs IN exp END
    exp: . IF exp THEN exp
    exp: . exp MAYOR exp
    exp: exp PIPE . exp
    exp: . exp DIST exp
    id: . ID
    exp: . LITERAL
    exp: . exp IGUAL exp
    exp: . WHILE exp DO exp

    NIL	announce rule exp: NIL
    BREAK	announce rule exp: BREAK
    WHILE	shift, and go to 3
    LET	shift, and go to 4
    ID	announce rule id: ID
    IF	shift, and go to 7
    PI	shift, and go to 8
    LITERAL	announce rule exp: LITERAL
    NRO	announce rule exp: NRO
    FOR	shift, and go to 9
    MENOS	shift, and go to 12

    exp	go to state 34
    id	go to state 16
    l_value	go to state 17


state 34 ( based on state 60 )

    exp: exp . MENOS exp
    exp: exp . IGUAL exp
    exp: exp . MAS exp
    exp: exp . POR exp
    exp: exp PIPE exp .
    exp: exp . MAYOR exp
    exp: exp . DIST exp
    exp: exp . MENIG exp
    exp: exp . PIPE exp
    exp: exp . MENOR exp
    exp: exp . MAYIG exp
    exp: exp . AMPER exp
    exp: exp . DIV exp

    DIST	shift, and go to 20
    MAYIG	shift, and go to 28
    DIV	shift, and go to 14
    AMPER	shift, and go to 35
    MAYOR	shift, and go to 37
    MENOR	shift, and go to 39
    IGUAL	shift, and go to 41
    POR	shift, and go to 22
    MENIG	shift, and go to 43
    MAS	shift, and go to 24
    MENOS	shift, and go to 26
    $default	announce rule exp: exp PIPE exp


state 35 ( based on state 32 )

    exp: . FOR id DOSPIG exp TO exp DO exp
    exp: . exp AMPER exp
    exp: . exp DIV exp
    exp: exp AMPER . exp
    exp: . NIL
    exp: . exp POR exp
    exp: . PI PD
    exp: . MENOS exp
    exp: . IF exp THEN exp ELSE exp
    l_value: . l_value PTO id
    exp: . BREAK
    l_value: . l_value CI exp CD
    exp: . exp MAYIG exp
    exp: . LET decs IN END
    exp: . exp MENOR exp
    exp: . PI exp PD
    exp: . l_value CI exp CD OF exp
    exp: . id LI rec_fields LD
    exp: . l_value DOSPIG exp
    exp: . id PI args PD
    l_value: . id
    exp: . exp PIPE exp
    exp: . PI exp PCOMA explist PD
    exp: . exp MENIG exp
    exp: . LET decs IN exp PCOMA explist END
    exp: . NRO
    exp: . exp MAS exp
    exp: . exp MENOS exp
    exp: . l_value
    exp: . LET decs IN exp END
    exp: . IF exp THEN exp
    exp: . exp MAYOR exp
    exp: . exp DIST exp
    id: . ID
    exp: . LITERAL
    exp: . exp IGUAL exp
    exp: . WHILE exp DO exp

    NIL	announce rule exp: NIL
    BREAK	announce rule exp: BREAK
    WHILE	shift, and go to 3
    LET	shift, and go to 4
    ID	announce rule id: ID
    IF	shift, and go to 7
    PI	shift, and go to 8
    LITERAL	announce rule exp: LITERAL
    NRO	announce rule exp: NRO
    FOR	shift, and go to 9
    MENOS	shift, and go to 12

    exp	go to state 36
    id	go to state 16
    l_value	go to state 17


state 36 ( based on state 59 )

    exp: exp AMPER exp .
    exp: exp . MENOS exp
    exp: exp . IGUAL exp
    exp: exp . MAS exp
    exp: exp . POR exp
    exp: exp . MAYOR exp
    exp: exp . DIST exp
    exp: exp . MENIG exp
    exp: exp . PIPE exp
    exp: exp . MENOR exp
    exp: exp . MAYIG exp
    exp: exp . AMPER exp
    exp: exp . DIV exp

    DIST	shift, and go to 20
    MAYIG	shift, and go to 28
    DIV	shift, and go to 14
    MAYOR	shift, and go to 37
    MENOR	shift, and go to 39
    IGUAL	shift, and go to 41
    POR	shift, and go to 22
    MENIG	shift, and go to 43
    MAS	shift, and go to 24
    MENOS	shift, and go to 26
    $default	announce rule exp: exp AMPER exp


state 37 ( based on state 36 )

    exp: . FOR id DOSPIG exp TO exp DO exp
    exp: . exp AMPER exp
    exp: . exp DIV exp
    exp: . NIL
    exp: exp MAYOR . exp
    exp: . exp POR exp
    exp: . PI PD
    exp: . MENOS exp
    exp: . IF exp THEN exp ELSE exp
    l_value: . l_value PTO id
    exp: . BREAK
    l_value: . l_value CI exp CD
    exp: . exp MAYIG exp
    exp: . LET decs IN END
    exp: . exp MENOR exp
    exp: . PI exp PD
    exp: . l_value CI exp CD OF exp
    exp: . id LI rec_fields LD
    exp: . l_value DOSPIG exp
    exp: . id PI args PD
    l_value: . id
    exp: . exp PIPE exp
    exp: . PI exp PCOMA explist PD
    exp: . exp MENIG exp
    exp: . LET decs IN exp PCOMA explist END
    exp: . NRO
    exp: . exp MAS exp
    exp: . exp MENOS exp
    exp: . l_value
    exp: . LET decs IN exp END
    exp: . IF exp THEN exp
    exp: . exp MAYOR exp
    exp: . exp DIST exp
    id: . ID
    exp: . LITERAL
    exp: . exp IGUAL exp
    exp: . WHILE exp DO exp

    NIL	announce rule exp: NIL
    BREAK	announce rule exp: BREAK
    WHILE	shift, and go to 3
    LET	shift, and go to 4
    ID	announce rule id: ID
    IF	shift, and go to 7
    PI	shift, and go to 8
    LITERAL	announce rule exp: LITERAL
    NRO	announce rule exp: NRO
    FOR	shift, and go to 9
    MENOS	shift, and go to 12

    exp	go to state 38
    id	go to state 16
    l_value	go to state 17


state 38 ( based on state 63 )

    exp: exp MAYOR exp .
    exp: exp . MENOS exp
    exp: exp . IGUAL exp
    exp: exp . MAS exp
    exp: exp . POR exp
    exp: exp . MAYOR exp
    exp: exp . DIST exp
    exp: exp . MENIG exp
    exp: exp . PIPE exp
    exp: exp . MENOR exp
    exp: exp . MAYIG exp
    exp: exp . AMPER exp
    exp: exp . DIV exp

    DIST	error (nonassociative)
    MAYIG	error (nonassociative)
    DIV	shift, and go to 14
    MAYOR	error (nonassociative)
    MENOR	error (nonassociative)
    POR	shift, and go to 22
    IGUAL	error (nonassociative)
    MAS	shift, and go to 24
    MENOS	shift, and go to 26
    MENIG	error (nonassociative)
    $default	announce rule exp: exp MAYOR exp


state 39 ( based on state 34 )

    exp: . FOR id DOSPIG exp TO exp DO exp
    exp: . exp AMPER exp
    exp: . exp DIV exp
    exp: . NIL
    exp: . exp POR exp
    exp: . PI PD
    exp: . MENOS exp
    exp: exp MENOR . exp
    exp: . IF exp THEN exp ELSE exp
    l_value: . l_value PTO id
    exp: . BREAK
    l_value: . l_value CI exp CD
    exp: . exp MAYIG exp
    exp: . LET decs IN END
    exp: . exp MENOR exp
    exp: . PI exp PD
    exp: . l_value CI exp CD OF exp
    exp: . id LI rec_fields LD
    exp: . l_value DOSPIG exp
    exp: . id PI args PD
    l_value: . id
    exp: . exp PIPE exp
    exp: . PI exp PCOMA explist PD
    exp: . exp MENIG exp
    exp: . LET decs IN exp PCOMA explist END
    exp: . NRO
    exp: . exp MAS exp
    exp: . exp MENOS exp
    exp: . l_value
    exp: . LET decs IN exp END
    exp: . IF exp THEN exp
    exp: . exp MAYOR exp
    exp: . exp DIST exp
    id: . ID
    exp: . LITERAL
    exp: . exp IGUAL exp
    exp: . WHILE exp DO exp

    NIL	announce rule exp: NIL
    BREAK	announce rule exp: BREAK
    WHILE	shift, and go to 3
    LET	shift, and go to 4
    ID	announce rule id: ID
    IF	shift, and go to 7
    PI	shift, and go to 8
    LITERAL	announce rule exp: LITERAL
    NRO	announce rule exp: NRO
    FOR	shift, and go to 9
    MENOS	shift, and go to 12

    exp	go to state 40
    id	go to state 16
    l_value	go to state 17


state 40 ( based on state 61 )

    exp: exp . MENOS exp
    exp: exp . IGUAL exp
    exp: exp . MAS exp
    exp: exp . POR exp
    exp: exp . MAYOR exp
    exp: exp . DIST exp
    exp: exp . MENIG exp
    exp: exp . PIPE exp
    exp: exp . MENOR exp
    exp: exp . MAYIG exp
    exp: exp . AMPER exp
    exp: exp MENOR exp .
    exp: exp . DIV exp

    DIST	error (nonassociative)
    MAYIG	error (nonassociative)
    DIV	shift, and go to 14
    MAYOR	error (nonassociative)
    MENOR	error (nonassociative)
    POR	shift, and go to 22
    IGUAL	error (nonassociative)
    MAS	shift, and go to 24
    MENOS	shift, and go to 26
    MENIG	error (nonassociative)
    $default	announce rule exp: exp MENOR exp


state 41 ( based on state 31 )

    exp: . FOR id DOSPIG exp TO exp DO exp
    exp: . exp AMPER exp
    exp: . exp DIV exp
    exp: . NIL
    exp: . exp POR exp
    exp: . PI PD
    exp: . MENOS exp
    exp: . IF exp THEN exp ELSE exp
    l_value: . l_value PTO id
    exp: . BREAK
    l_value: . l_value CI exp CD
    exp: . exp MAYIG exp
    exp: . LET decs IN END
    exp: . exp MENOR exp
    exp: . PI exp PD
    exp: . l_value CI exp CD OF exp
    exp: . id LI rec_fields LD
    exp: . l_value DOSPIG exp
    exp: . id PI args PD
    l_value: . id
    exp: . exp PIPE exp
    exp: . PI exp PCOMA explist PD
    exp: . exp MENIG exp
    exp: . LET decs IN exp PCOMA explist END
    exp: . NRO
    exp: . exp MAS exp
    exp: exp IGUAL . exp
    exp: . exp MENOS exp
    exp: . l_value
    exp: . LET decs IN exp END
    exp: . IF exp THEN exp
    exp: . exp MAYOR exp
    exp: . exp DIST exp
    id: . ID
    exp: . LITERAL
    exp: . exp IGUAL exp
    exp: . WHILE exp DO exp

    NIL	announce rule exp: NIL
    BREAK	announce rule exp: BREAK
    WHILE	shift, and go to 3
    LET	shift, and go to 4
    ID	announce rule id: ID
    IF	shift, and go to 7
    PI	shift, and go to 8
    LITERAL	announce rule exp: LITERAL
    NRO	announce rule exp: NRO
    FOR	shift, and go to 9
    MENOS	shift, and go to 12

    exp	go to state 42
    id	go to state 16
    l_value	go to state 17


state 42 ( based on state 58 )

    exp: exp . MENOS exp
    exp: exp . IGUAL exp
    exp: exp . MAS exp
    exp: exp . POR exp
    exp: exp . MAYOR exp
    exp: exp . DIST exp
    exp: exp IGUAL exp .
    exp: exp . MENIG exp
    exp: exp . PIPE exp
    exp: exp . MENOR exp
    exp: exp . MAYIG exp
    exp: exp . DIV exp
    exp: exp . AMPER exp

    DIST	error (nonassociative)
    MAYIG	error (nonassociative)
    DIV	shift, and go to 14
    MAYOR	error (nonassociative)
    MENOR	error (nonassociative)
    POR	shift, and go to 22
    IGUAL	error (nonassociative)
    MAS	shift, and go to 24
    MENOS	shift, and go to 26
    MENIG	error (nonassociative)
    $default	announce rule exp: exp IGUAL exp


state 43 ( based on state 35 )

    exp: . FOR id DOSPIG exp TO exp DO exp
    exp: . exp AMPER exp
    exp: . exp DIV exp
    exp: . NIL
    exp: . exp POR exp
    exp: . PI PD
    exp: . MENOS exp
    exp: . IF exp THEN exp ELSE exp
    l_value: . l_value PTO id
    exp: . BREAK
    l_value: . l_value CI exp CD
    exp: . exp MAYIG exp
    exp: . LET decs IN END
    exp: . exp MENOR exp
    exp: . PI exp PD
    exp: . l_value CI exp CD OF exp
    exp: . id LI rec_fields LD
    exp: . l_value DOSPIG exp
    exp: . id PI args PD
    l_value: . id
    exp: . exp PIPE exp
    exp: . PI exp PCOMA explist PD
    exp: . exp MENIG exp
    exp: . LET decs IN exp PCOMA explist END
    exp: . NRO
    exp: . exp MAS exp
    exp: . exp MENOS exp
    exp: . l_value
    exp: . LET decs IN exp END
    exp: . IF exp THEN exp
    exp: . exp MAYOR exp
    exp: . exp DIST exp
    exp: exp MENIG . exp
    exp: . LITERAL
    exp: . exp IGUAL exp
    id: . ID
    exp: . WHILE exp DO exp

    NIL	announce rule exp: NIL
    BREAK	announce rule exp: BREAK
    WHILE	shift, and go to 3
    LET	shift, and go to 4
    ID	announce rule id: ID
    IF	shift, and go to 7
    PI	shift, and go to 8
    LITERAL	announce rule exp: LITERAL
    NRO	announce rule exp: NRO
    FOR	shift, and go to 9
    MENOS	shift, and go to 12

    exp	go to state 44
    id	go to state 16
    l_value	go to state 17


state 44 ( based on state 62 )

    exp: exp . MENOS exp
    exp: exp . IGUAL exp
    exp: exp MENIG exp .
    exp: exp . MAS exp
    exp: exp . POR exp
    exp: exp . MAYOR exp
    exp: exp . DIST exp
    exp: exp . MENIG exp
    exp: exp . PIPE exp
    exp: exp . MENOR exp
    exp: exp . MAYIG exp
    exp: exp . AMPER exp
    exp: exp . DIV exp

    DIST	error (nonassociative)
    MAYIG	error (nonassociative)
    DIV	shift, and go to 14
    MAYOR	error (nonassociative)
    MENOR	error (nonassociative)
    POR	shift, and go to 22
    IGUAL	error (nonassociative)
    MAS	shift, and go to 24
    MENOS	shift, and go to 26
    MENIG	error (nonassociative)
    $default	announce rule exp: exp MENIG exp


state 45 ( based on state 46 )

    exp: . FOR id DOSPIG exp TO exp DO exp
    exp: . exp AMPER exp
    exp: . exp DIV exp
    exp: . NIL
    exp: . exp POR exp
    exp: . PI PD
    exp: . MENOS exp
    exp: . IF exp THEN exp ELSE exp
    l_value: . l_value PTO id
    exp: . BREAK
    l_value: . l_value CI exp CD
    exp: . exp MAYIG exp
    exp: . LET decs IN END
    exp: . exp MENOR exp
    exp: . PI exp PD
    exp: . l_value CI exp CD OF exp
    exp: . id LI rec_fields LD
    exp: . l_value DOSPIG exp
    exp: . id PI args PD
    l_value: . id
    exp: . exp PIPE exp
    exp: . PI exp PCOMA explist PD
    exp: . exp MENIG exp
    exp: . LET decs IN exp PCOMA explist END
    exp: . NRO
    exp: . exp MAS exp
    exp: l_value DOSPIG . exp
    exp: . exp MENOS exp
    exp: . l_value
    exp: . LET decs IN exp END
    exp: . IF exp THEN exp
    exp: . exp MAYOR exp
    exp: . exp DIST exp
    id: . ID
    exp: . LITERAL
    exp: . exp IGUAL exp
    exp: . WHILE exp DO exp

    NIL	announce rule exp: NIL
    BREAK	announce rule exp: BREAK
    WHILE	shift, and go to 3
    LET	shift, and go to 4
    ID	announce rule id: ID
    IF	shift, and go to 7
    PI	shift, and go to 8
    LITERAL	announce rule exp: LITERAL
    NRO	announce rule exp: NRO
    FOR	shift, and go to 9
    MENOS	shift, and go to 12

    exp	go to state 46
    id	go to state 16
    l_value	go to state 17


state 46 ( based on state 75 )

    exp: exp . MENOS exp
    exp: exp . IGUAL exp
    exp: exp . MAS exp
    exp: exp . POR exp
    exp: exp . MAYOR exp
    exp: exp . DIST exp
    exp: l_value DOSPIG exp .
    exp: exp . MENIG exp
    exp: exp . PIPE exp
    exp: exp . MENOR exp
    exp: exp . MAYIG exp
    exp: exp . DIV exp
    exp: exp . AMPER exp

    DIST	shift, and go to 20
    MAYIG	shift, and go to 28
    PIPE	shift, and go to 33
    DIV	shift, and go to 14
    AMPER	shift, and go to 35
    MAYOR	shift, and go to 37
    MENOR	shift, and go to 39
    IGUAL	shift, and go to 41
    POR	shift, and go to 22
    MENIG	shift, and go to 43
    MAS	shift, and go to 24
    MENOS	shift, and go to 26
    $default	announce rule exp: l_value DOSPIG exp


state 47 ( based on state 85 )

    exp: exp . MENOS exp
    exp: exp . IGUAL exp
    exp: exp . MAS exp
    exp: exp . POR exp
    exp: exp . MAYOR exp
    exp: exp . DIST exp
    exp: exp . MENIG exp
    exp: exp . PIPE exp
    exp: exp . MENOR exp
    exp: exp . MAYIG exp
    exp: exp . AMPER exp
    exp: FOR id DOSPIG exp . TO exp DO exp
    exp: exp . DIV exp

    DIST	shift, and go to 20
    MAYIG	shift, and go to 28
    PIPE	shift, and go to 33
    DIV	shift, and go to 14
    AMPER	shift, and go to 35
    MAYOR	shift, and go to 37
    MENOR	shift, and go to 39
    POR	shift, and go to 22
    IGUAL	shift, and go to 41
    TO	shift, and go to 48
    MENIG	shift, and go to 43
    MAS	shift, and go to 24
    MENOS	shift, and go to 26


state 48 ( based on state 105 )

    exp: . FOR id DOSPIG exp TO exp DO exp
    exp: . exp AMPER exp
    exp: . exp DIV exp
    exp: . NIL
    exp: . exp POR exp
    exp: . PI PD
    exp: . MENOS exp
    exp: . IF exp THEN exp ELSE exp
    l_value: . l_value PTO id
    exp: . BREAK
    l_value: . l_value CI exp CD
    exp: . exp MAYIG exp
    exp: . LET decs IN END
    exp: . exp MENOR exp
    exp: . PI exp PD
    exp: FOR id DOSPIG exp TO . exp DO exp
    exp: . l_value CI exp CD OF exp
    exp: . id LI rec_fields LD
    exp: . l_value DOSPIG exp
    exp: . id PI args PD
    l_value: . id
    exp: . exp PIPE exp
    exp: . PI exp PCOMA explist PD
    exp: . exp MENIG exp
    exp: . LET decs IN exp PCOMA explist END
    exp: . NRO
    exp: . exp MAS exp
    exp: . exp MENOS exp
    exp: . l_value
    exp: . LET decs IN exp END
    exp: . IF exp THEN exp
    exp: . exp MAYOR exp
    exp: . exp DIST exp
    id: . ID
    exp: . LITERAL
    exp: . exp IGUAL exp
    exp: . WHILE exp DO exp

    NIL	announce rule exp: NIL
    BREAK	announce rule exp: BREAK
    WHILE	shift, and go to 3
    LET	shift, and go to 4
    ID	announce rule id: ID
    IF	shift, and go to 7
    PI	shift, and go to 8
    LITERAL	announce rule exp: LITERAL
    NRO	announce rule exp: NRO
    FOR	shift, and go to 9
    MENOS	shift, and go to 12

    exp	go to state 49
    id	go to state 16
    l_value	go to state 17


state 49 ( based on state 119 )

    exp: exp . MENOS exp
    exp: exp . IGUAL exp
    exp: FOR id DOSPIG exp TO exp . DO exp
    exp: exp . MAS exp
    exp: exp . POR exp
    exp: exp . MAYOR exp
    exp: exp . DIST exp
    exp: exp . MENIG exp
    exp: exp . PIPE exp
    exp: exp . MENOR exp
    exp: exp . MAYIG exp
    exp: exp . AMPER exp
    exp: exp . DIV exp

    DIST	shift, and go to 20
    DO	shift, and go to 50
    MAYIG	shift, and go to 28
    PIPE	shift, and go to 33
    DIV	shift, and go to 14
    AMPER	shift, and go to 35
    MAYOR	shift, and go to 37
    MENOR	shift, and go to 39
    POR	shift, and go to 22
    IGUAL	shift, and go to 41
    MENIG	shift, and go to 43
    MAS	shift, and go to 24
    MENOS	shift, and go to 26


state 50 ( based on state 131 )

    exp: . FOR id DOSPIG exp TO exp DO exp
    exp: . exp AMPER exp
    exp: . exp DIV exp
    exp: . NIL
    exp: . exp POR exp
    exp: . PI PD
    exp: . MENOS exp
    exp: . IF exp THEN exp ELSE exp
    l_value: . l_value PTO id
    exp: . BREAK
    l_value: . l_value CI exp CD
    exp: . exp MAYIG exp
    exp: . LET decs IN END
    exp: . exp MENOR exp
    exp: . PI exp PD
    exp: . l_value CI exp CD OF exp
    exp: . id LI rec_fields LD
    exp: . l_value DOSPIG exp
    exp: . id PI args PD
    l_value: . id
    exp: FOR id DOSPIG exp TO exp DO . exp
    exp: . exp PIPE exp
    exp: . PI exp PCOMA explist PD
    exp: . exp MENIG exp
    exp: . LET decs IN exp PCOMA explist END
    exp: . NRO
    exp: . exp MAS exp
    exp: . exp MENOS exp
    exp: . l_value
    exp: . LET decs IN exp END
    exp: . IF exp THEN exp
    exp: . exp MAYOR exp
    exp: . exp DIST exp
    id: . ID
    exp: . LITERAL
    exp: . exp IGUAL exp
    exp: . WHILE exp DO exp

    NIL	announce rule exp: NIL
    BREAK	announce rule exp: BREAK
    WHILE	shift, and go to 3
    LET	shift, and go to 4
    ID	announce rule id: ID
    IF	shift, and go to 7
    PI	shift, and go to 8
    LITERAL	announce rule exp: LITERAL
    NRO	announce rule exp: NRO
    FOR	shift, and go to 9
    MENOS	shift, and go to 12

    exp	go to state 51
    id	go to state 16
    l_value	go to state 17


state 51 ( based on state 135 )

    exp: FOR id DOSPIG exp TO exp DO exp .
    exp: exp . MENOS exp
    exp: exp . IGUAL exp
    exp: exp . MAS exp
    exp: exp . POR exp
    exp: exp . MAYOR exp
    exp: exp . DIST exp
    exp: exp . MENIG exp
    exp: exp . PIPE exp
    exp: exp . MENOR exp
    exp: exp . MAYIG exp
    exp: exp . AMPER exp
    exp: exp . DIV exp

    $default	announce rule exp: FOR id DOSPIG exp TO exp DO exp


state 52 ( based on state 27 )

    exp: exp . MENOS exp
    exp: exp . IGUAL exp
    exp: exp . MAS exp
    exp: exp . POR exp
    exp: exp . MAYOR exp
    exp: PI exp . PCOMA explist PD
    exp: exp . DIST exp
    exp: exp . MENIG exp
    exp: PI exp . PD
    exp: exp . PIPE exp
    exp: exp . AMPER exp
    exp: exp . MENOR exp
    exp: exp . MAYIG exp
    exp: exp . DIV exp

    DIST	shift, and go to 20
    MAYIG	shift, and go to 28
    PD	announce rule exp: PI exp PD
    PIPE	shift, and go to 33
    DIV	shift, and go to 14
    AMPER	shift, and go to 35
    MAYOR	shift, and go to 37
    PCOMA	announce rule exp: PI exp PCOMA explist PD
    MENOR	shift, and go to 39
    POR	shift, and go to 22
    IGUAL	shift, and go to 41
    MENIG	shift, and go to 43
    MAS	shift, and go to 24
    MENOS	shift, and go to 26


state 53 ( based on state 23 )

    exp: IF exp . THEN exp ELSE exp
    exp: exp . MENOS exp
    exp: exp . IGUAL exp
    exp: exp . MAS exp
    exp: exp . POR exp
    exp: exp . MAYOR exp
    exp: IF exp . THEN exp
    exp: exp . DIST exp
    exp: exp . MENIG exp
    exp: exp . PIPE exp
    exp: exp . MENOR exp
    exp: exp . MAYIG exp
    exp: exp . AMPER exp
    exp: exp . DIV exp

    DIST	shift, and go to 20
    MAYIG	shift, and go to 28
    PIPE	shift, and go to 33
    DIV	shift, and go to 14
    THEN	shift, and go to 54
    AMPER	shift, and go to 35
    MAYOR	shift, and go to 37
    MENOR	shift, and go to 39
    POR	shift, and go to 22
    IGUAL	shift, and go to 41
    MENIG	shift, and go to 43
    MAS	shift, and go to 24
    MENOS	shift, and go to 26


state 54 ( based on state 53 )

    exp: . FOR id DOSPIG exp TO exp DO exp
    exp: . exp AMPER exp
    exp: . exp DIV exp
    exp: . NIL
    exp: IF exp THEN . exp
    exp: . exp POR exp
    exp: . PI PD
    exp: . MENOS exp
    exp: . IF exp THEN exp ELSE exp
    l_value: . l_value PTO id
    exp: . BREAK
    l_value: . l_value CI exp CD
    exp: . exp MAYIG exp
    exp: . LET decs IN END
    exp: . exp MENOR exp
    exp: . PI exp PD
    exp: . l_value CI exp CD OF exp
    exp: . id LI rec_fields LD
    exp: . l_value DOSPIG exp
    exp: . id PI args PD
    l_value: . id
    exp: . exp PIPE exp
    exp: . PI exp PCOMA explist PD
    exp: . exp MENIG exp
    exp: . LET decs IN exp PCOMA explist END
    exp: . NRO
    exp: . exp MAS exp
    exp: . exp MENOS exp
    exp: . l_value
    exp: . LET decs IN exp END
    exp: . IF exp THEN exp
    exp: . exp MAYOR exp
    exp: . exp DIST exp
    exp: IF exp THEN . exp ELSE exp
    exp: . LITERAL
    exp: . exp IGUAL exp
    id: . ID
    exp: . WHILE exp DO exp

    NIL	announce rule exp: NIL
    BREAK	announce rule exp: BREAK
    WHILE	shift, and go to 3
    LET	shift, and go to 4
    ID	announce rule id: ID
    IF	shift, and go to 7
    PI	shift, and go to 8
    LITERAL	announce rule exp: LITERAL
    NRO	announce rule exp: NRO
    FOR	shift, and go to 9
    MENOS	shift, and go to 12

    exp	go to state 55
    id	go to state 16
    l_value	go to state 17


state 55 ( based on state 83 )

    exp: exp . MENOS exp
    exp: exp . IGUAL exp
    exp: exp . MAS exp
    exp: exp . POR exp
    exp: IF exp THEN exp .
    exp: exp . MAYOR exp
    exp: exp . MENIG exp
    exp: exp . DIST exp
    exp: IF exp THEN exp . ELSE exp
    exp: exp . PIPE exp
    exp: exp . MENOR exp
    exp: exp . MAYIG exp
    exp: exp . AMPER exp
    exp: exp . DIV exp

    DIST	shift, and go to 20
    MAYIG	shift, and go to 28
    PIPE	shift, and go to 33
    ELSE	shift, and go to 56
    DIV	shift, and go to 14
    AMPER	shift, and go to 35
    MAYOR	shift, and go to 37
    MENOR	shift, and go to 39
    POR	shift, and go to 22
    IGUAL	shift, and go to 41
    MENIG	shift, and go to 43
    MAS	shift, and go to 24
    MENOS	shift, and go to 26
    $default	announce rule exp: IF exp THEN exp


state 56 ( based on state 104 )

    exp: . FOR id DOSPIG exp TO exp DO exp
    exp: . exp AMPER exp
    exp: . exp DIV exp
    exp: . NIL
    exp: . exp POR exp
    exp: . PI PD
    exp: . MENOS exp
    exp: IF exp THEN exp ELSE . exp
    exp: . IF exp THEN exp ELSE exp
    l_value: . l_value PTO id
    exp: . BREAK
    l_value: . l_value CI exp CD
    exp: . exp MAYIG exp
    exp: . LET decs IN END
    exp: . exp MENOR exp
    exp: . PI exp PD
    exp: . l_value CI exp CD OF exp
    exp: . id LI rec_fields LD
    exp: . l_value DOSPIG exp
    exp: . id PI args PD
    l_value: . id
    exp: . exp PIPE exp
    exp: . PI exp PCOMA explist PD
    exp: . exp MENIG exp
    exp: . LET decs IN exp PCOMA explist END
    exp: . NRO
    exp: . exp MAS exp
    exp: . exp MENOS exp
    exp: . l_value
    exp: . LET decs IN exp END
    exp: . IF exp THEN exp
    exp: . exp MAYOR exp
    exp: . exp DIST exp
    id: . ID
    exp: . LITERAL
    exp: . exp IGUAL exp
    exp: . WHILE exp DO exp

    NIL	announce rule exp: NIL
    BREAK	announce rule exp: BREAK
    WHILE	shift, and go to 3
    LET	shift, and go to 4
    ID	announce rule id: ID
    IF	shift, and go to 7
    PI	shift, and go to 8
    LITERAL	announce rule exp: LITERAL
    NRO	announce rule exp: NRO
    FOR	shift, and go to 9
    MENOS	shift, and go to 12

    exp	go to state 57
    id	go to state 16
    l_value	go to state 17


state 57 ( based on state 118 )

    exp: IF exp THEN exp ELSE exp .
    exp: exp . MENOS exp
    exp: exp . IGUAL exp
    exp: exp . MAS exp
    exp: exp . POR exp
    exp: exp . MAYOR exp
    exp: exp . DIST exp
    exp: exp . MENIG exp
    exp: exp . PIPE exp
    exp: exp . MENOR exp
    exp: exp . MAYIG exp
    exp: exp . AMPER exp
    exp: exp . DIV exp

    DIST	shift, and go to 20
    MAYIG	shift, and go to 28
    PIPE	shift, and go to 33
    DIV	shift, and go to 14
    AMPER	shift, and go to 35
    MAYOR	shift, and go to 37
    MENOR	shift, and go to 39
    IGUAL	shift, and go to 41
    POR	shift, and go to 22
    MENIG	shift, and go to 43
    MAS	shift, and go to 24
    MENOS	shift, and go to 26
    $default	announce rule exp: IF exp THEN exp ELSE exp


state 58 ( based on state 82 )

    exp: exp . MENOS exp
    exp: exp . IGUAL exp
    exp: LET decs IN exp . PCOMA explist END
    exp: exp . MAS exp
    exp: exp . POR exp
    exp: exp . MAYOR exp
    exp: exp . MENIG exp
    exp: exp . DIST exp
    exp: exp . PIPE exp
    exp: exp . MENOR exp
    exp: exp . MAYIG exp
    exp: exp . AMPER exp
    exp: LET decs IN exp . END
    exp: exp . DIV exp

    DIST	shift, and go to 20
    MAYIG	shift, and go to 28
    PIPE	shift, and go to 33
    DIV	shift, and go to 14
    AMPER	shift, and go to 35
    MAYOR	shift, and go to 37
    END	announce rule exp: LET decs IN exp END
    PCOMA	announce rule exp: LET decs IN exp PCOMA explist END
    MENOR	shift, and go to 39
    POR	shift, and go to 22
    IGUAL	shift, and go to 41
    MENIG	shift, and go to 43
    MAS	shift, and go to 24
    MENOS	shift, and go to 26


state 59 ( based on state 24 )

    exp: exp . MENOS exp
    exp: exp . IGUAL exp
    exp: exp . MAS exp
    exp: exp . POR exp
    exp: exp . MAYOR exp
    exp: exp . DIST exp
    exp: exp . MENIG exp
    exp: exp . PIPE exp
    exp: exp . MENOR exp
    exp: WHILE exp . DO exp
    exp: exp . MAYIG exp
    exp: exp . DIV exp
    exp: exp . AMPER exp

    DIST	shift, and go to 20
    DO	shift, and go to 60
    MAYIG	shift, and go to 28
    PIPE	shift, and go to 33
    DIV	shift, and go to 14
    AMPER	shift, and go to 35
    MAYOR	shift, and go to 37
    MENOR	shift, and go to 39
    POR	shift, and go to 22
    IGUAL	shift, and go to 41
    MENIG	shift, and go to 43
    MAS	shift, and go to 24
    MENOS	shift, and go to 26


state 60 ( based on state 54 )

    exp: . FOR id DOSPIG exp TO exp DO exp
    exp: . exp AMPER exp
    exp: . exp DIV exp
    exp: . NIL
    exp: . exp POR exp
    exp: . PI PD
    exp: . MENOS exp
    exp: WHILE exp DO . exp
    exp: . IF exp THEN exp ELSE exp
    l_value: . l_value PTO id
    exp: . BREAK
    l_value: . l_value CI exp CD
    exp: . exp MAYIG exp
    exp: . LET decs IN END
    exp: . exp MENOR exp
    exp: . PI exp PD
    exp: . l_value CI exp CD OF exp
    exp: . id LI rec_fields LD
    exp: . l_value DOSPIG exp
    exp: . id PI args PD
    l_value: . id
    exp: . exp PIPE exp
    exp: . PI exp PCOMA explist PD
    exp: . exp MENIG exp
    exp: . LET decs IN exp PCOMA explist END
    exp: . NRO
    exp: . exp MAS exp
    exp: . exp MENOS exp
    exp: . l_value
    exp: . LET decs IN exp END
    exp: . IF exp THEN exp
    exp: . exp MAYOR exp
    exp: . exp DIST exp
    id: . ID
    exp: . LITERAL
    exp: . exp IGUAL exp
    exp: . WHILE exp DO exp

    NIL	announce rule exp: NIL
    BREAK	announce rule exp: BREAK
    WHILE	shift, and go to 3
    LET	shift, and go to 4
    ID	announce rule id: ID
    IF	shift, and go to 7
    PI	shift, and go to 8
    LITERAL	announce rule exp: LITERAL
    NRO	announce rule exp: NRO
    FOR	shift, and go to 9
    MENOS	shift, and go to 12

    exp	go to state 61
    id	go to state 16
    l_value	go to state 17


state 61 ( based on state 84 )

    exp: exp . MENOS exp
    exp: exp . IGUAL exp
    exp: exp . MAS exp
    exp: exp . POR exp
    exp: exp . MAYOR exp
    exp: exp . DIST exp
    exp: exp . MENIG exp
    exp: exp . PIPE exp
    exp: exp . MENOR exp
    exp: exp . MAYIG exp
    exp: exp . AMPER exp
    exp: WHILE exp DO exp .
    exp: exp . DIV exp

    $default	announce rule exp: WHILE exp DO exp


state 62 ( based on state 13 )

    _: ⊢ exp .
    exp: exp . MENOS exp
    exp: exp . IGUAL exp
    exp: exp . MAS exp
    exp: exp . POR exp
    exp: exp . MAYOR exp
    exp: exp . DIST exp
    exp: exp . MENIG exp
    exp: exp . PIPE exp
    exp: exp . MENOR exp
    exp: exp . MAYIG exp
    exp: exp . AMPER exp
    exp: exp . DIV exp

    DIST	shift, and go to 20
    MAYIG	shift, and go to 28
    PIPE	shift, and go to 33
    DIV	shift, and go to 14
    YYEOF	accept exp
    AMPER	shift, and go to 35
    MAYOR	shift, and go to 37
    MENOR	shift, and go to 39
    POR	shift, and go to 22
    IGUAL	shift, and go to 41
    MENIG	shift, and go to 43
    MAS	shift, and go to 24
    MENOS	shift, and go to 26


state 63 ( based on state 56 )

    _: ⊢ . explist
    exp: . FOR id DOSPIG exp TO exp DO exp
    exp: . exp AMPER exp
    exp: . exp DIV exp
    exp: . NIL
    exp: . exp POR exp
    exp: . PI PD
    exp: . MENOS exp
    exp: . IF exp THEN exp ELSE exp
    l_value: . l_value PTO id
    exp: . BREAK
    l_value: . l_value CI exp CD
    exp: . exp MAYIG exp
    exp: . LET decs IN END
    exp: . exp MENOR exp
    exp: . PI exp PD
    exp: . l_value CI exp CD OF exp
    exp: . id LI rec_fields LD
    exp: . l_value DOSPIG exp
    exp: . id PI args PD
    l_value: . id
    explist: . exp PCOMA explist
    exp: . exp PIPE exp
    exp: . PI exp PCOMA explist PD
    exp: . exp MENIG exp
    exp: . LET decs IN exp PCOMA explist END
    exp: . NRO
    exp: . exp MAS exp
    exp: . exp MENOS exp
    exp: . l_value
    explist: . exp
    exp: . LET decs IN exp END
    exp: . IF exp THEN exp
    exp: . exp MAYOR exp
    exp: . exp DIST exp
    id: . ID
    exp: . LITERAL
    exp: . exp IGUAL exp
    exp: . WHILE exp DO exp

    NIL	announce rule exp: NIL
    BREAK	announce rule exp: BREAK
    WHILE	shift, and go to 3
    LET	shift, and go to 4
    ID	announce rule id: ID
    IF	shift, and go to 7
    PI	shift, and go to 8
    LITERAL	announce rule exp: LITERAL
    NRO	announce rule exp: NRO
    FOR	shift, and go to 9
    MENOS	shift, and go to 12

    exp	go to state 64
    id	go to state 16
    l_value	go to state 17
    explist	go to state 65


state 64 ( based on state 86 )

    exp: exp . MENOS exp
    exp: exp . IGUAL exp
    exp: exp . MAS exp
    exp: exp . POR exp
    explist: exp .
    explist: exp . PCOMA explist
    exp: exp . MAYOR exp
    exp: exp . MENIG exp
    exp: exp . DIST exp
    exp: exp . PIPE exp
    exp: exp . MENOR exp
    exp: exp . MAYIG exp
    exp: exp . AMPER exp
    exp: exp . DIV exp

    DIST	shift, and go to 20
    MAYIG	shift, and go to 28
    PIPE	shift, and go to 33
    DIV	shift, and go to 14
    AMPER	shift, and go to 35
    MAYOR	shift, and go to 37
    PCOMA	announce rule explist: exp PCOMA explist
    MENOR	shift, and go to 39
    POR	shift, and go to 22
    IGUAL	shift, and go to 41
    MENIG	shift, and go to 43
    MAS	shift, and go to 24
    MENOS	shift, and go to 26
    $default	announce rule explist: exp


state 65 ( based on state 87 )

    _: ⊢ explist .

    PD	accept explist
    END	accept explist


state 66 ( based on state 43 )

    _: ⊢ . args
    exp: . FOR id DOSPIG exp TO exp DO exp
    exp: . exp AMPER exp
    exp: . exp DIV exp
    exp: . NIL
    exp: . exp POR exp
    exp: . PI PD
    exp: . MENOS exp
    args: . exp
    exp: . IF exp THEN exp ELSE exp
    l_value: . l_value PTO id
    exp: . BREAK
    l_value: . l_value CI exp CD
    exp: . exp MAYIG exp
    exp: . LET decs IN END
    exp: . exp MENOR exp
    exp: . PI exp PD
    args: . exp COMA args
    args: .
    exp: . l_value CI exp CD OF exp
    exp: . id LI rec_fields LD
    exp: . l_value DOSPIG exp
    exp: . id PI args PD
    l_value: . id
    exp: . exp PIPE exp
    exp: . PI exp PCOMA explist PD
    exp: . exp MENIG exp
    exp: . LET decs IN exp PCOMA explist END
    exp: . NRO
    exp: . exp MAS exp
    exp: . exp MENOS exp
    exp: . l_value
    exp: . LET decs IN exp END
    exp: . IF exp THEN exp
    exp: . exp MAYOR exp
    exp: . exp DIST exp
    id: . ID
    exp: . LITERAL
    exp: . exp IGUAL exp
    exp: . WHILE exp DO exp

    NIL	announce rule exp: NIL
    BREAK	announce rule exp: BREAK
    WHILE	shift, and go to 3
    PD	announce rule args: /* empty */
    LET	shift, and go to 4
    ID	announce rule id: ID
    IF	shift, and go to 7
    PI	shift, and go to 8
    LITERAL	announce rule exp: LITERAL
    NRO	announce rule exp: NRO
    FOR	shift, and go to 9
    MENOS	shift, and go to 12
    $default	announce rule args: /* empty */

    exp	go to state 67
    args	go to state 68
    id	go to state 16
    l_value	go to state 17


state 67 ( based on state 70 )

    args: exp . COMA args
    exp: exp . MENOS exp
    exp: exp . IGUAL exp
    exp: exp . MAS exp
    exp: exp . POR exp
    exp: exp . MAYOR exp
    exp: exp . MENIG exp
    exp: exp . DIST exp
    exp: exp . PIPE exp
    exp: exp . MENOR exp
    exp: exp . MAYIG exp
    exp: exp . AMPER exp
    exp: exp . DIV exp
    args: exp .

    DIST	shift, and go to 20
    MAYIG	shift, and go to 28
    PIPE	shift, and go to 33
    DIV	shift, and go to 14
    COMA	announce rule args: exp COMA args
    AMPER	shift, and go to 35
    MAYOR	shift, and go to 37
    MENOR	shift, and go to 39
    POR	shift, and go to 22
    IGUAL	shift, and go to 41
    MENIG	shift, and go to 43
    MAS	shift, and go to 24
    MENOS	shift, and go to 26
    $default	announce rule args: exp


state 68 ( based on state 71 )

    _: ⊢ args .

    PD	accept args


state 69 ( based on state 44 )

    _: ⊢ . rec_fields
    rec_fields: . id IGUAL exp
    rec_fields: .
    rec_fields: . id IGUAL exp COMA rec_fields
    id: . ID

    ID	announce rule id: ID
    LD	announce rule rec_fields: /* empty */
    $default	announce rule rec_fields: /* empty */

    rec_fields	go to state 70
    id	go to state 71


state 70 ( based on state 72 )

    _: ⊢ rec_fields .

    LD	accept rec_fields


state 71 ( based on state 73 )

    rec_fields: id . IGUAL exp COMA rec_fields
    rec_fields: id . IGUAL exp

    IGUAL	shift, and go to 72


state 72 ( based on state 91 )

    exp: . FOR id DOSPIG exp TO exp DO exp
    exp: . exp AMPER exp
    exp: . exp DIV exp
    exp: . NIL
    exp: . exp POR exp
    exp: . PI PD
    exp: . MENOS exp
    exp: . IF exp THEN exp ELSE exp
    l_value: . l_value PTO id
    exp: . BREAK
    l_value: . l_value CI exp CD
    exp: . exp MAYIG exp
    rec_fields: id IGUAL . exp
    exp: . LET decs IN END
    exp: . exp MENOR exp
    exp: . PI exp PD
    exp: . l_value CI exp CD OF exp
    exp: . id LI rec_fields LD
    exp: . l_value DOSPIG exp
    exp: . id PI args PD
    l_value: . id
    rec_fields: id IGUAL . exp COMA rec_fields
    exp: . exp PIPE exp
    exp: . PI exp PCOMA explist PD
    exp: . exp MENIG exp
    exp: . LET decs IN exp PCOMA explist END
    exp: . NRO
    exp: . exp MAS exp
    exp: . exp MENOS exp
    exp: . l_value
    exp: . LET decs IN exp END
    exp: . IF exp THEN exp
    exp: . exp MAYOR exp
    exp: . exp DIST exp
    id: . ID
    exp: . LITERAL
    exp: . exp IGUAL exp
    exp: . WHILE exp DO exp

    NIL	announce rule exp: NIL
    BREAK	announce rule exp: BREAK
    WHILE	shift, and go to 3
    LET	shift, and go to 4
    ID	announce rule id: ID
    IF	shift, and go to 7
    PI	shift, and go to 8
    LITERAL	announce rule exp: LITERAL
    NRO	announce rule exp: NRO
    FOR	shift, and go to 9
    MENOS	shift, and go to 12

    exp	go to state 73
    id	go to state 16
    l_value	go to state 17


state 73 ( based on state 109 )

    rec_fields: id IGUAL exp . COMA rec_fields
    exp: exp . MENOS exp
    rec_fields: id IGUAL exp .
    exp: exp . IGUAL exp
    exp: exp . MAS exp
    exp: exp . POR exp
    exp: exp . MAYOR exp
    exp: exp . MENIG exp
    exp: exp . DIST exp
    exp: exp . PIPE exp
    exp: exp . MENOR exp
    exp: exp . MAYIG exp
    exp: exp . AMPER exp
    exp: exp . DIV exp

    DIST	shift, and go to 20
    MAYIG	shift, and go to 28
    PIPE	shift, and go to 33
    DIV	shift, and go to 14
    COMA	shift, and go to 74
    AMPER	shift, and go to 35
    MAYOR	shift, and go to 37
    MENOR	shift, and go to 39
    POR	shift, and go to 22
    IGUAL	shift, and go to 41
    MENIG	shift, and go to 43
    MAS	shift, and go to 24
    MENOS	shift, and go to 26
    $default	announce rule rec_fields: id IGUAL exp


state 74 ( based on state 121 )

    rec_fields: id IGUAL exp COMA . rec_fields
    rec_fields: . id IGUAL exp
    rec_fields: .
    rec_fields: . id IGUAL exp COMA rec_fields
    id: . ID

    ID	announce rule id: ID
    $default	announce rule rec_fields: /* empty */

    rec_fields	go to state 75
    id	go to state 71


state 75 ( based on state 132 )

    rec_fields: id IGUAL exp COMA rec_fields .

    $default	announce rule rec_fields: id IGUAL exp COMA rec_fields


state 76 ( based on state 4 )

    _: ⊢ . dec
    dec: . vardec
    dec: . fundec
    dec: . TYPE id IGUAL ty

    FUNCTION	announce rule dec: fundec
    TYPE	shift, and go to 77
    VAR	announce rule dec: vardec

    dec	go to state 84


state 77 ( based on state 16 )

    dec: TYPE . id IGUAL ty
    id: . ID

    ID	announce rule id: ID

    id	go to state 78


state 78 ( based on state 48 )

    dec: TYPE id . IGUAL ty

    IGUAL	shift, and go to 79


state 79 ( based on state 77 )

    dec: TYPE id IGUAL . ty
    ty: . LI tyflds LD
    ty: . ARRAY OF id
    ty: . id

    ARRAY	shift, and go to 80
    LI	announce rule ty: LI tyflds LD
    ID	announce rule ty: id

    ty	go to state 83


state 80 ( based on state 93 )

    ty: ARRAY . OF id

    OF	shift, and go to 81


state 81 ( based on state 111 )

    id: . ID
    ty: ARRAY OF . id

    ID	announce rule id: ID

    id	go to state 82


state 82 ( based on state 123 )

    ty: ARRAY OF id .

    $default	announce rule ty: ARRAY OF id


state 83 ( based on state 95 )

    dec: TYPE id IGUAL ty .

    $default	announce rule dec: TYPE id IGUAL ty


state 84 ( based on state 20 )

    _: ⊢ dec .

    FUNCTION	accept dec
    TYPE	accept dec
    VAR	accept dec
    IN	accept dec


state 85 ( based on state 20 )

    _: ⊢ . decs
    decs: .
    decs: . dec decs

    FUNCTION	announce rule decs: dec decs
    TYPE	announce rule decs: dec decs
    VAR	announce rule decs: dec decs
    IN	announce rule decs: /* empty */
    $default	announce rule decs: /* empty */

    decs	go to state 86


state 86 ( based on state 52 )

    _: ⊢ decs .

    IN	accept decs


state 87 ( based on state 4 )

    _: ⊢ . vardec
    vardec: . VAR id DOSPIG exp
    vardec: . VAR id DOSP id DOSPIG exp

    VAR	shift, and go to 88

    vardec	go to state 96


state 88 ( based on state 17 )

    vardec: VAR . id DOSP id DOSPIG exp
    vardec: VAR . id DOSPIG exp
    id: . ID

    ID	announce rule id: ID

    id	go to state 89


state 89 ( based on state 49 )

    vardec: VAR id . DOSPIG exp
    vardec: VAR id . DOSP id DOSPIG exp

    DOSPIG	shift, and go to 90
    DOSP	shift, and go to 92


state 90 ( based on state 79 )

    exp: . FOR id DOSPIG exp TO exp DO exp
    exp: . exp AMPER exp
    exp: . exp DIV exp
    exp: . NIL
    vardec: VAR id DOSPIG . exp
    exp: . exp POR exp
    exp: . PI PD
    exp: . MENOS exp
    exp: . IF exp THEN exp ELSE exp
    l_value: . l_value PTO id
    exp: . BREAK
    l_value: . l_value CI exp CD
    exp: . exp MAYIG exp
    exp: . LET decs IN END
    exp: . exp MENOR exp
    exp: . PI exp PD
    exp: . l_value CI exp CD OF exp
    exp: . id LI rec_fields LD
    exp: . l_value DOSPIG exp
    exp: . id PI args PD
    l_value: . id
    exp: . exp PIPE exp
    exp: . PI exp PCOMA explist PD
    exp: . exp MENIG exp
    exp: . LET decs IN exp PCOMA explist END
    exp: . NRO
    exp: . exp MAS exp
    exp: . exp MENOS exp
    exp: . l_value
    exp: . LET decs IN exp END
    exp: . IF exp THEN exp
    exp: . exp MAYOR exp
    exp: . exp DIST exp
    id: . ID
    exp: . LITERAL
    exp: . exp IGUAL exp
    exp: . WHILE exp DO exp

    NIL	announce rule exp: NIL
    BREAK	announce rule exp: BREAK
    WHILE	shift, and go to 3
    LET	shift, and go to 4
    ID	announce rule id: ID
    IF	shift, and go to 7
    PI	shift, and go to 8
    LITERAL	announce rule exp: LITERAL
    NRO	announce rule exp: NRO
    FOR	shift, and go to 9
    MENOS	shift, and go to 12

    exp	go to state 91
    id	go to state 16
    l_value	go to state 17


state 91 ( based on state 98 )

    exp: exp . MENOS exp
    vardec: VAR id DOSPIG exp .
    exp: exp . IGUAL exp
    exp: exp . MAS exp
    exp: exp . POR exp
    exp: exp . MAYOR exp
    exp: exp . DIST exp
    exp: exp . MENIG exp
    exp: exp . PIPE exp
    exp: exp . MENOR exp
    exp: exp . MAYIG exp
    exp: exp . AMPER exp
    exp: exp . DIV exp

    DIST	shift, and go to 20
    MAYIG	shift, and go to 28
    PIPE	shift, and go to 33
    DIV	shift, and go to 14
    AMPER	shift, and go to 35
    MAYOR	shift, and go to 37
    MENOR	shift, and go to 39
    IGUAL	shift, and go to 41
    POR	shift, and go to 22
    MENIG	shift, and go to 43
    MAS	shift, and go to 24
    MENOS	shift, and go to 26
    $default	announce rule vardec: VAR id DOSPIG exp


state 92 ( based on state 78 )

    vardec: VAR id DOSP . id DOSPIG exp
    id: . ID

    ID	announce rule id: ID

    id	go to state 93


state 93 ( based on state 97 )

    vardec: VAR id DOSP id . DOSPIG exp

    DOSPIG	shift, and go to 94


state 94 ( based on state 113 )

    exp: . FOR id DOSPIG exp TO exp DO exp
    exp: . exp AMPER exp
    exp: . exp DIV exp
    exp: . NIL
    exp: . exp POR exp
    exp: . PI PD
    exp: . MENOS exp
    exp: . IF exp THEN exp ELSE exp
    l_value: . l_value PTO id
    exp: . BREAK
    l_value: . l_value CI exp CD
    exp: . exp MAYIG exp
    exp: . LET decs IN END
    exp: . exp MENOR exp
    exp: . PI exp PD
    exp: . l_value CI exp CD OF exp
    exp: . id LI rec_fields LD
    vardec: VAR id DOSP id DOSPIG . exp
    exp: . l_value DOSPIG exp
    exp: . id PI args PD
    l_value: . id
    exp: . exp PIPE exp
    exp: . PI exp PCOMA explist PD
    exp: . exp MENIG exp
    exp: . LET decs IN exp PCOMA explist END
    exp: . NRO
    exp: . exp MAS exp
    exp: . exp MENOS exp
    exp: . l_value
    exp: . LET decs IN exp END
    exp: . IF exp THEN exp
    exp: . exp MAYOR exp
    exp: . exp DIST exp
    id: . ID
    exp: . LITERAL
    exp: . exp IGUAL exp
    exp: . WHILE exp DO exp

    NIL	announce rule exp: NIL
    BREAK	announce rule exp: BREAK
    WHILE	shift, and go to 3
    LET	shift, and go to 4
    ID	announce rule id: ID
    IF	shift, and go to 7
    PI	shift, and go to 8
    LITERAL	announce rule exp: LITERAL
    NRO	announce rule exp: NRO
    FOR	shift, and go to 9
    MENOS	shift, and go to 12

    exp	go to state 95
    id	go to state 16
    l_value	go to state 17


state 95 ( based on state 125 )

    exp: exp . MENOS exp
    vardec: VAR id DOSP id DOSPIG exp .
    exp: exp . IGUAL exp
    exp: exp . MAS exp
    exp: exp . POR exp
    exp: exp . MAYOR exp
    exp: exp . DIST exp
    exp: exp . MENIG exp
    exp: exp . PIPE exp
    exp: exp . MENOR exp
    exp: exp . MAYIG exp
    exp: exp . AMPER exp
    exp: exp . DIV exp

    DIST	shift, and go to 20
    MAYIG	shift, and go to 28
    PIPE	shift, and go to 33
    DIV	shift, and go to 14
    AMPER	shift, and go to 35
    MAYOR	shift, and go to 37
    MENOR	shift, and go to 39
    IGUAL	shift, and go to 41
    POR	shift, and go to 22
    MENIG	shift, and go to 43
    MAS	shift, and go to 24
    MENOS	shift, and go to 26
    $default	announce rule vardec: VAR id DOSP id DOSPIG exp


state 96 ( based on state 21 )

    _: ⊢ vardec .

    FUNCTION	accept vardec
    TYPE	accept vardec
    VAR	accept vardec
    IN	accept vardec


state 97 ( based on state 4 )

    _: ⊢ . fundec
    fundec: . FUNCTION id PI tyflds PD IGUAL exp
    fundec: . FUNCTION id PI tyflds PD DOSP id IGUAL exp

    FUNCTION	shift, and go to 98

    fundec	go to state 110


state 98 ( based on state 18 )

    fundec: FUNCTION . id PI tyflds PD DOSP id IGUAL exp
    fundec: FUNCTION . id PI tyflds PD IGUAL exp
    id: . ID

    ID	announce rule id: ID

    id	go to state 99


state 99 ( based on state 50 )

    fundec: FUNCTION id . PI tyflds PD IGUAL exp
    fundec: FUNCTION id . PI tyflds PD DOSP id IGUAL exp

    PI	shift, and go to 100


state 100 ( based on state 80 )

    tyfield: . id DOSP id
    tyflds: . tyfield
    tyflds: . tyfield COMA tyflds
    tyflds: .
    fundec: FUNCTION id PI . tyflds PD DOSP id IGUAL exp
    fundec: FUNCTION id PI . tyflds PD IGUAL exp

    ID	announce rule tyfield: id DOSP id
    $default	announce rule tyflds: /* empty */

    tyflds	go to state 101
    tyfield	go to state 109


state 101 ( based on state 100 )

    fundec: FUNCTION id PI tyflds . PD IGUAL exp
    fundec: FUNCTION id PI tyflds . PD DOSP id IGUAL exp

    PD	shift, and go to 102


state 102 ( based on state 115 )

    fundec: FUNCTION id PI tyflds PD . DOSP id IGUAL exp
    fundec: FUNCTION id PI tyflds PD . IGUAL exp

    DOSP	shift, and go to 103
    IGUAL	shift, and go to 107


state 103 ( based on state 127 )

    fundec: FUNCTION id PI tyflds PD DOSP . id IGUAL exp
    id: . ID

    ID	announce rule id: ID

    id	go to state 104


state 104 ( based on state 133 )

    fundec: FUNCTION id PI tyflds PD DOSP id . IGUAL exp

    IGUAL	shift, and go to 105


state 105 ( based on state 136 )

    exp: . FOR id DOSPIG exp TO exp DO exp
    exp: . exp AMPER exp
    exp: . exp DIV exp
    exp: . NIL
    exp: . exp POR exp
    exp: . PI PD
    exp: . MENOS exp
    exp: . IF exp THEN exp ELSE exp
    l_value: . l_value PTO id
    exp: . BREAK
    l_value: . l_value CI exp CD
    exp: . exp MAYIG exp
    exp: . LET decs IN END
    exp: . exp MENOR exp
    exp: . PI exp PD
    fundec: FUNCTION id PI tyflds PD DOSP id IGUAL . exp
    exp: . l_value CI exp CD OF exp
    exp: . id LI rec_fields LD
    exp: . l_value DOSPIG exp
    exp: . id PI args PD
    l_value: . id
    exp: . exp PIPE exp
    exp: . PI exp PCOMA explist PD
    exp: . exp MENIG exp
    exp: . LET decs IN exp PCOMA explist END
    exp: . NRO
    exp: . exp MAS exp
    exp: . exp MENOS exp
    exp: . l_value
    exp: . LET decs IN exp END
    exp: . IF exp THEN exp
    exp: . exp MAYOR exp
    exp: . exp DIST exp
    id: . ID
    exp: . LITERAL
    exp: . exp IGUAL exp
    exp: . WHILE exp DO exp

    NIL	announce rule exp: NIL
    BREAK	announce rule exp: BREAK
    WHILE	shift, and go to 3
    LET	shift, and go to 4
    ID	announce rule id: ID
    IF	shift, and go to 7
    PI	shift, and go to 8
    LITERAL	announce rule exp: LITERAL
    NRO	announce rule exp: NRO
    FOR	shift, and go to 9
    MENOS	shift, and go to 12

    exp	go to state 106
    id	go to state 16
    l_value	go to state 17


state 106 ( based on state 137 )

    exp: exp . MENOS exp
    fundec: FUNCTION id PI tyflds PD DOSP id IGUAL exp .
    exp: exp . IGUAL exp
    exp: exp . MAS exp
    exp: exp . POR exp
    exp: exp . MAYOR exp
    exp: exp . DIST exp
    exp: exp . MENIG exp
    exp: exp . PIPE exp
    exp: exp . MENOR exp
    exp: exp . MAYIG exp
    exp: exp . AMPER exp
    exp: exp . DIV exp

    DIST	shift, and go to 20
    MAYIG	shift, and go to 28
    PIPE	shift, and go to 33
    DIV	shift, and go to 14
    AMPER	shift, and go to 35
    MAYOR	shift, and go to 37
    MENOR	shift, and go to 39
    IGUAL	shift, and go to 41
    POR	shift, and go to 22
    MENIG	shift, and go to 43
    MAS	shift, and go to 24
    MENOS	shift, and go to 26
    $default	announce rule fundec: FUNCTION id PI tyflds PD DOSP id IGUAL exp


state 107 ( based on state 128 )

    exp: . FOR id DOSPIG exp TO exp DO exp
    exp: . exp AMPER exp
    exp: . exp DIV exp
    exp: . NIL
    exp: . exp POR exp
    exp: . PI PD
    exp: . MENOS exp
    exp: . IF exp THEN exp ELSE exp
    l_value: . l_value PTO id
    exp: . BREAK
    l_value: . l_value CI exp CD
    exp: . exp MAYIG exp
    exp: . LET decs IN END
    exp: . exp MENOR exp
    exp: . PI exp PD
    exp: . l_value CI exp CD OF exp
    exp: . id LI rec_fields LD
    exp: . l_value DOSPIG exp
    exp: . id PI args PD
    l_value: . id
    exp: . exp PIPE exp
    exp: . PI exp PCOMA explist PD
    exp: . exp MENIG exp
    exp: . LET decs IN exp PCOMA explist END
    exp: . NRO
    exp: . exp MAS exp
    exp: . exp MENOS exp
    exp: . l_value
    exp: . LET decs IN exp END
    exp: . IF exp THEN exp
    fundec: FUNCTION id PI tyflds PD IGUAL . exp
    exp: . exp MAYOR exp
    exp: . exp DIST exp
    id: . ID
    exp: . LITERAL
    exp: . exp IGUAL exp
    exp: . WHILE exp DO exp

    NIL	announce rule exp: NIL
    BREAK	announce rule exp: BREAK
    WHILE	shift, and go to 3
    LET	shift, and go to 4
    ID	announce rule id: ID
    IF	shift, and go to 7
    PI	shift, and go to 8
    LITERAL	announce rule exp: LITERAL
    NRO	announce rule exp: NRO
    FOR	shift, and go to 9
    MENOS	shift, and go to 12

    exp	go to state 108
    id	go to state 16
    l_value	go to state 17


state 108 ( based on state 134 )

    exp: exp . MENOS exp
    exp: exp . IGUAL exp
    exp: exp . MAS exp
    exp: exp . POR exp
    fundec: FUNCTION id PI tyflds PD IGUAL exp .
    exp: exp . MAYOR exp
    exp: exp . DIST exp
    exp: exp . MENIG exp
    exp: exp . PIPE exp
    exp: exp . MENOR exp
    exp: exp . MAYIG exp
    exp: exp . AMPER exp
    exp: exp . DIV exp

    DIST	shift, and go to 20
    MAYIG	shift, and go to 28
    PIPE	shift, and go to 33
    DIV	shift, and go to 14
    AMPER	shift, and go to 35
    MAYOR	shift, and go to 37
    MENOR	shift, and go to 39
    IGUAL	shift, and go to 41
    POR	shift, and go to 22
    MENIG	shift, and go to 43
    MAS	shift, and go to 24
    MENOS	shift, and go to 26
    $default	announce rule fundec: FUNCTION id PI tyflds PD IGUAL exp


state 109 ( based on state 101 )

    tyflds: tyfield .
    tyflds: tyfield . COMA tyflds

    COMA	announce rule tyflds: tyfield COMA tyflds
    $default	announce rule tyflds: tyfield


state 110 ( based on state 22 )

    _: ⊢ fundec .

    FUNCTION	accept fundec
    TYPE	accept fundec
    VAR	accept fundec
    IN	accept fundec


state 111 ( based on state 77 )

    _: ⊢ . id
    id: . ID

    ID	announce rule id: ID

    id	go to state 112


state 112 ( based on state 96 )

    _: ⊢ id .

    PTO	accept id
    FUNCTION	accept id
    DIST	accept id
    DO	accept id
    CI	accept id
    MAYIG	accept id
    TYPE	accept id
    CD	accept id
    PD	accept id
    PIPE	accept id
    DIV	accept id
    ELSE	accept id
    DOSPIG	accept id
    YYEOF	accept id
    COMA	accept id
    THEN	accept id
    VAR	accept id
    LD	accept id
    MAYOR	accept id
    AMPER	accept id
    END	accept id
    PCOMA	accept id
    DOSP	accept id
    IN	accept id
    MENOR	accept id
    POR	accept id
    IGUAL	accept id
    MENIG	accept id
    MAS	accept id
    TO	accept id
    MENOS	accept id


state 113 ( based on state 94 )

    _: ⊢ . tyflds
    tyfield: . id DOSP id
    tyflds: . tyfield
    tyflds: . tyfield COMA tyflds
    tyflds: .

    PD	announce rule tyflds: /* empty */
    ID	announce rule tyfield: id DOSP id
    LD	announce rule tyflds: /* empty */
    $default	announce rule tyflds: /* empty */

    tyflds	go to state 114
    tyfield	go to state 109


state 114 ( based on state 112 )

    _: ⊢ tyflds .

    PD	accept tyflds
    LD	accept tyflds



