/* The following code was generated by JFlex 1.5.0-SNAPSHOT (+scala) on 9/9/13 12:40 PM */

package tiger.parser

import tiger.parser.TigerTokens._


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.5.0-SNAPSHOT (+scala)
 * on 9/9/13 12:40 PM from the specification file
 * <tt>Tiger.lex</tt>
 */
class TigerScanner(private var zzReader : java.io.Reader) extends Iterator[TigerTokens.YYToken] {
  def this(in : java.io.InputStream) = this(new java.io.InputStreamReader(in));

  /** This character denotes the end of file */
  val YYEOF : Int = -1;

  /** initial size of the lookahead buffer */
   private val ZZ_BUFFERSIZE:Int =  16384;

  /** lexical states */
  val COM:Int = 4;
  val YYINITIAL:Int = 0;
  val STRING:Int = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
   private val ZZ_LEXSTATE:Array[Int] = Array(
     0,  0,  1,  1,  2, 2
  );

  /** 
   * Translates characters to character classes
   */
   private val ZZ_CMAP_PACKED:String = 
    "\11\0\1\1\1\5\2\0\1\57\22\0\1\1\1\0\1\10\3\0"+
    "\1\24\1\0\1\16\1\17\1\7\1\30\1\14\1\31\1\11\1\6"+
    "\12\4\1\12\1\15\1\26\1\13\1\27\2\0\32\2\1\20\1\56"+
    "\1\21\1\0\1\3\1\0\1\36\1\54\1\45\1\50\1\35\1\41"+
    "\1\2\1\51\1\46\1\2\1\55\1\47\1\2\1\44\1\40\1\34"+
    "\1\2\1\37\1\52\1\32\1\43\1\42\1\53\1\2\1\33\1\2"+
    "\1\22\1\25\1\23\uff82\0";

  /** 
   * Translates characters to character classes
   */
   private val ZZ_CMAP:Array[Char] = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */

   private val ZZ_ACTION_PACKED_0:String = 
    "\3\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\14\2\1\31\1\32\1\33\3\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\2\1\42\4\2\1\43\4\2"+
    "\1\44\1\45\1\2\1\46\2\2\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\2\2\1\55\2\2\1\56\1\2"+
    "\1\57\1\60\1\61\2\2\1\62\1\63\1\64\4\2"+
    "\1\65\1\2\1\66\1\67\2\2\1\70";

  private def zzUnpackAction() : Array[Int] =  {
    val result:Array[Int] = new Array[Int](99);
    var offset:Int = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private def zzUnpackAction(packed:String,offset:Int,result:Array[Int]) : Int =  {
    var i:Int = 0;       /* index in packed string  */
    var j:Int = offset;  /* index in unpacked array */
    val l:Int = packed.length();
    while (i < l) {
      var count:Int = packed.charAt(i); i+= 1;
      var value:Int = packed.charAt(i); i+= 1;
      do { result(j) = value; j+=1; count -= 1; } while (count > 0);
    }
    return j;
  }
   private val ZZ_ACTION:Array[Int] = zzUnpackAction();


  /** 
   * Translates a state to a row index in the transition table
   */

   private val ZZ_ROWMAP_PACKED_0:String = 
    "\0\0\0\60\0\140\0\220\0\300\0\360\0\u0120\0\u0150"+
    "\0\u0120\0\u0120\0\u0120\0\u0180\0\u0120\0\u0120\0\u0120\0\u0120"+
    "\0\u0120\0\u0120\0\u0120\0\u0120\0\u0120\0\u0120\0\u0120\0\u01b0"+
    "\0\u01e0\0\u0120\0\u0120\0\u0210\0\u0240\0\u0270\0\u02a0\0\u02d0"+
    "\0\u0300\0\u0330\0\u0360\0\u0390\0\u03c0\0\u03f0\0\u0420\0\u0450"+
    "\0\u0120\0\u0480\0\u0120\0\u04b0\0\u04e0\0\u0120\0\u0120\0\u0120"+
    "\0\u0120\0\u0120\0\u0510\0\300\0\u0540\0\u0570\0\u05a0\0\u05d0"+
    "\0\300\0\u0600\0\u0630\0\u0660\0\u0690\0\300\0\300\0\u06c0"+
    "\0\300\0\u06f0\0\u0720\0\u0120\0\u0120\0\u0120\0\u0120\0\u0120"+
    "\0\u0120\0\u0750\0\u0780\0\300\0\u07b0\0\u07e0\0\300\0\u0810"+
    "\0\300\0\300\0\300\0\u0840\0\u0870\0\300\0\300\0\300"+
    "\0\u08a0\0\u08d0\0\u0900\0\u0930\0\300\0\u0960\0\300\0\300"+
    "\0\u0990\0\u09c0\0\300";

  private def zzUnpackRowMap() : Array[Int] =  {
    val result:Array[Int] = new Array[Int](99);
    var offset:Int = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private def zzUnpackRowMap(packed:String,offset:Int,result:Array[Int]) : Int =  {
    var i:Int = 0;       /* index in packed string  */
    var j:Int = offset;  /* index in unpacked array */
    val l:Int = packed.length();
    while (i < l) {
      val high:Int = packed.charAt(i) << 16; i+= 1;
      result(j) = high | packed.charAt(i); i+= 1; j += 1;
    }
    return j;
  }
   private val ZZ_ROWMAP:Array[Int] = zzUnpackRowMap();

  /** 
   * The transition table of the DFA
   */

   private val ZZ_TRANS_PACKED_0:String = 
    "\1\0\1\4\1\5\1\0\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\2\5\1\35\1\36\1\5\1\37"+
    "\1\40\1\41\1\5\1\42\1\5\1\43\1\44\1\45"+
    "\2\5\1\46\1\47\1\5\1\0\1\4\5\50\1\0"+
    "\2\50\1\51\45\50\1\52\1\0\6\53\1\54\1\55"+
    "\50\53\1\0\1\4\55\0\1\4\2\0\3\5\25\0"+
    "\24\5\6\0\1\6\142\0\1\56\63\0\1\57\57\0"+
    "\1\60\13\0\1\61\43\0\1\62\46\0\3\5\25\0"+
    "\1\5\1\63\4\5\1\64\10\5\1\65\4\5\4\0"+
    "\3\5\25\0\12\5\1\66\2\5\1\67\6\5\4\0"+
    "\3\5\25\0\5\5\1\70\16\5\4\0\3\5\25\0"+
    "\7\5\1\71\14\5\4\0\3\5\25\0\6\5\1\72"+
    "\2\5\1\73\12\5\4\0\3\5\25\0\4\5\1\74"+
    "\17\5\4\0\3\5\25\0\14\5\1\75\7\5\4\0"+
    "\3\5\25\0\7\5\1\76\2\5\1\77\11\5\4\0"+
    "\3\5\25\0\3\5\1\100\20\5\4\0\3\5\25\0"+
    "\6\5\1\101\15\5\4\0\3\5\25\0\17\5\1\102"+
    "\4\5\4\0\3\5\25\0\5\5\1\103\16\5\2\0"+
    "\5\50\1\0\2\50\1\0\45\50\12\0\1\104\21\0"+
    "\1\105\4\0\1\106\4\0\1\107\22\0\1\110\56\0"+
    "\1\111\53\0\3\5\25\0\2\5\1\112\21\5\4\0"+
    "\3\5\25\0\3\5\1\113\20\5\4\0\3\5\25\0"+
    "\16\5\1\114\5\5\4\0\3\5\25\0\20\5\1\115"+
    "\3\5\4\0\3\5\25\0\5\5\1\116\16\5\4\0"+
    "\3\5\25\0\5\5\1\117\16\5\4\0\3\5\25\0"+
    "\12\5\1\120\11\5\4\0\3\5\25\0\5\5\1\121"+
    "\16\5\4\0\3\5\25\0\15\5\1\122\6\5\4\0"+
    "\3\5\25\0\1\123\23\5\4\0\3\5\25\0\14\5"+
    "\1\124\7\5\4\0\3\5\25\0\3\5\1\125\20\5"+
    "\4\0\3\5\25\0\3\5\1\126\20\5\4\0\3\5"+
    "\25\0\12\5\1\127\11\5\4\0\3\5\25\0\3\5"+
    "\1\130\20\5\4\0\3\5\25\0\4\5\1\131\17\5"+
    "\4\0\3\5\25\0\13\5\1\132\10\5\4\0\3\5"+
    "\25\0\15\5\1\133\6\5\4\0\3\5\25\0\4\5"+
    "\1\134\17\5\4\0\3\5\25\0\1\5\1\135\22\5"+
    "\4\0\3\5\25\0\1\136\23\5\4\0\3\5\25\0"+
    "\3\5\1\137\20\5\4\0\3\5\25\0\23\5\1\140"+
    "\4\0\3\5\25\0\14\5\1\141\7\5\4\0\3\5"+
    "\25\0\6\5\1\142\15\5\4\0\3\5\25\0\12\5"+
    "\1\143\11\5\2\0";

  private def zzUnpackTrans() : Array[Int] =  {
    val result:Array[Int] = new Array[Int](2544);
    var offset:Int = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private def zzUnpackTrans(packed:String,offset:Int,result:Array[Int]) : Int =  {
    var i:Int = 0;       /* index in packed string  */
    var j:Int = offset;  /* index in unpacked array */
    val l:Int = packed.length();
    while (i < l) {
      var count:Int = packed.charAt(i); i+= 1;
      var value:Int = packed.charAt(i); i+= 1;
      value-= 1;
      do { result(j) = value; j+=1; count -= 1; } while (count > 0);
    }
    return j;
  }
   private val ZZ_TRANS:Array[Int] = zzUnpackTrans();


  /* error codes */
  private val ZZ_UNKNOWN_ERROR : Int = 0;
  private val ZZ_NO_MATCH : Int = 1;
  private val ZZ_PUSHBACK_2BIG : Int = 2;

  /* error messages for the codes above */
  private val ZZ_ERROR_MSG: Array[String] = Array(
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  );

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */

   private val ZZ_ATTRIBUTE_PACKED_0:String = 
    "\3\0\3\1\1\11\1\1\3\11\1\1\13\11\2\1"+
    "\2\11\15\1\1\11\1\1\1\11\2\1\5\11\21\1"+
    "\6\11\32\1";

  private def zzUnpackAttribute() : Array[Int] =  {
    val result:Array[Int] = new Array[Int](99);
    var offset:Int = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private def zzUnpackAttribute(packed:String,offset:Int,result:Array[Int]) : Int =  {
    var i:Int = 0;       /* index in packed string  */
    var j:Int = offset;  /* index in unpacked array */
    val l:Int = packed.length();
    while (i < l) {
      var count:Int = packed.charAt(i); i+= 1;
      var value:Int = packed.charAt(i); i+= 1;
      do { result(j) = value; j+=1; count -= 1; } while (count > 0);
    }
    return j;
  }
   private val ZZ_ATTRIBUTE:Array[Int] = zzUnpackAttribute();


  /** the current state of the DFA */
  private var zzState : Int = 0;

  /** the current lexical state */
  private var zzLexicalState : Int = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private var zzBuffer : Array[Char] = new Array(ZZ_BUFFERSIZE);

  /** the textposition at the last accepting state */
  private var zzMarkedPos : Int = 0;

  /** the current text position in the buffer */
  private var zzCurrentPos : Int = 0;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private var zzStartRead : Int = 0;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private var zzEndRead : Int = 0;

  /** number of newlines encountered up to the start of the matched text */
  private var yyline : Int = 0;

  /** the number of characters up to the start of the matched text */
  private var yychar : Int = 0;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private var yycolumn : Int = 0;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private var zzAtBOL : Boolean = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private var zzAtEOF : Boolean = false;

  /* user code: */

  // These features are added to the Scanner class
  var lookahead : TigerTokens.YYToken = null;
   
  override def hasNext() : Boolean = { 
    if (lookahead == null) lookahead = yylex();
    lookahead match {
      case x:TigerTokens.YYEOF => false;
      case x:TigerTokens.YYToken => true;
    }
  };
  
  override def next() : TigerTokens.YYToken = {
    if (lookahead == null) lookahead = yylex();
    var result : TigerTokens.YYToken = lookahead;
    lookahead = null;
    result
  };
  
  def getLineNumber() : Int = yyline+1;

  var tigerStr = new StringBuffer();

  var ncom = 0




  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private def zzUnpackCMap(packed:String) : Array[Char] = {
    val map:Array[Char] = new Array[Char](0x10000);
    var i:Int = 0;  /* index in packed string  */
    var j:Int = 0;  /* index in unpacked array */
    while (i < 128) {
      var count:Int = packed.charAt(i); i+= 1;
      var value:Char = packed.charAt(i); i+= 1;
      do { map(j) = value; j+=1; count-=1; } while (count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   */
  private def zzRefill() : Boolean = {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      val newBuffer : Array[Char] = new Array(zzCurrentPos*2);
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    val numRead : Int = zzReader.read(zzBuffer, zzEndRead,
                                      zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      val c : Int = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer(zzEndRead) = c toChar;
	    zzEndRead += 1
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  def yyclose() : Unit = {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  def yyreset(reader : java.io.Reader) : Unit = {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = 0; zzStartRead = 0;
    zzCurrentPos = 0; zzMarkedPos = 0;
    yyline = 0; yychar = 0; yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  def yystate() : Int = {
    zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  def yybegin(newState : Int) : Unit = {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  def yytext() : String = {
    new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  def yycharat(pos : Int) : Char = {
    zzBuffer(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  def yylength() : Int = {
    zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private def zzScanError(errorCode:Int) : Unit =  {
    var message : String = null;
    try {
      message = ZZ_ERROR_MSG(errorCode);
    } catch {
      case e:ArrayIndexOutOfBoundsException =>
	    message = ZZ_ERROR_MSG(ZZ_UNKNOWN_ERROR);
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  def yypushback(number:Int) : Unit =  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }

  /** Nested class to simulate multi-level break */
  private case class ZZbreak(name:String) extends Throwable;

  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  def yylex() : TigerTokens.YYToken = 
 {
    var zzInput : Int = 0;
    var zzAction : Int = 0;

    // cached fields:
    var zzCurrentPosL : Int = 0;
    var zzMarkedPosL : Int = 0;
    var zzEndReadL : Int = zzEndRead;
    var zzBufferL : Array[Char] = zzBuffer;
    var zzCMapL : Array[Char] = ZZ_CMAP;

    val zzTransL:Array[Int] = ZZ_TRANS;
    val zzRowMapL:Array[Int] = ZZ_ROWMAP;
    val zzAttrL:Array[Int] = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      var zzR:Boolean = false;
      zzCurrentPosL = zzStartRead
      while (zzCurrentPosL < zzMarkedPosL) {
        (zzBufferL(zzCurrentPosL)) match {
        case '\u000B'
        |'\u000C'
        |'\u0085'
        |'\u2028'
        |'\u2029' => {
          yyline+=1;
          zzR = false;
          }
        case '\r' => {
          yyline+=1;
          zzR = true;
          }
        case '\n' => {
          if (zzR)
            zzR = false;
          else {
            yyline+=1;
          }
          }
        case _ => {
          zzR = false;
          }
        }
        zzCurrentPosL += 1;
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        var zzPeek:Boolean = false;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL(zzMarkedPosL) == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          val eof:Boolean = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL(zzMarkedPosL) == '\n';
        }
        if (zzPeek) yyline-= 1;
      }
      zzAction = -1;

      { val p : Int = zzMarkedPosL;
        zzCurrentPosL = p; zzCurrentPos = p; zzStartRead = p;
      }
  
      zzState = ZZ_LEXSTATE(zzLexicalState);

      // set up zzAction for empty match case:
      var zzAttributes:Int = zzAttrL(zzState);
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      /* zzForAction: */ try {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = zzBufferL(zzCurrentPosL);
            zzCurrentPosL += 1;
          } else if (zzAtEOF) {
            zzInput = YYEOF;
            throw ZZbreak("zzForAction");
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            val eof:Boolean = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              throw ZZbreak("zzForAction");
            }
            else {
              zzInput = zzBufferL(zzCurrentPosL);
              zzCurrentPosL += 1;
            }
          }
          val zzNext:Int = zzTransL(zzRowMapL(zzState) + zzCMapL(zzInput));
          if (zzNext == -1) throw ZZbreak("zzForAction");
          zzState = zzNext;

          zzAttributes = zzAttrL(zzState);
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) throw ZZbreak("zzForAction");
          }

        }
      } catch { case ZZbreak("zzForAction") => () }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      (if ( zzAction < 0 ) zzAction; else ZZ_ACTION(zzAction)) match  {
        case 1 => {
          { 
          }
        }
        case 3 => {
          { return NRO(Integer.parseInt(yytext))
          }
        }
        case 7 => {
          { tigerStr.setLength(0); yybegin(STRING);
          }
        }
        case 54 => {
          { return  WHILE()
          }
        }
        case 48 => {
          { return  NIL()
          }
        }
        case 55 => {
          { return  BREAK()
          }
        }
        case 27 => {
          { tigerStr.append('\\');
          }
        }
        case 30 => {
          { return DOSPIG()
          }
        }
        case 17 => {
          { return LI()
          }
        }
        case 43 => {
          { ncom = ncom + 1;
          }
        }
        case 2 => {
          { return ID(yytext)
          }
        }
        case 32 => {
          { return DIST()
          }
        }
        case 13 => {
          { return PI()
          }
        }
        case 18 => {
          { return LD()
          }
        }
        case 49 => {
          { return  LET()
          }
        }
        case 22 => {
          { return MAYOR()
          }
        }
        case 11 => {
          { return COMA()
          }
        }
        case 9 => {
          { return DOSP()
          }
        }
        case 51 => {
          { return  THEN()
          }
        }
        case 10 => {
          { return IGUAL()
          }
        }
        case 44 => {
          { ncom = ncom - 1; if (ncom == 0) { yybegin(YYINITIAL) }
          }
        }
        case 4 => {
          { /* Ignorar */
          }
        }
        case 6 => {
          { return POR()
          }
        }
        case 47 => {
          { return  VAR()
          }
        }
        case 31 => {
          { return MENIG()
          }
        }
        case 29 => {
          { ncom = 1; yybegin(COM);
          }
        }
        case 5 => {
          { return DIV()
          }
        }
        case 24 => {
          { return MENOS()
          }
        }
        case 23 => {
          { return MAS()
          }
        }
        case 40 => {
          { tigerStr.append('\t');
          }
        }
        case 39 => {
          { tigerStr.append('\"');
          }
        }
        case 26 => {
          { yybegin(YYINITIAL);
                                   return TigerTokens.LITERAL(tigerStr.toString());
          }
        }
        case 25 => {
          { tigerStr.append( yytext );
          }
        }
        case 38 => {
          { return  DO()
          }
        }
        case 21 => {
          { return MENOR()
          }
        }
        case 37 => {
          { return  IN()
          }
        }
        case 41 => {
          { tigerStr.append('\r');
          }
        }
        case 53 => {
          { return  ARRAY()
          }
        }
        case 50 => {
          { return  TYPE()
          }
        }
        case 35 => {
          { return  OF()
          }
        }
        case 46 => {
          { return  FOR()
          }
        }
        case 28 => {
          { /* ignorar */
          }
        }
        case 8 => {
          { return PTO()
          }
        }
        case 16 => {
          { return CD()
          }
        }
        case 33 => {
          { return MAYIG()
          }
        }
        case 15 => {
          { return CI()
          }
        }
        case 45 => {
          { return  END()
          }
        }
        case 36 => {
          { return  IF()
          }
        }
        case 52 => {
          { return  ELSE()
          }
        }
        case 14 => {
          { return PD()
          }
        }
        case 20 => {
          { return PIPE()
          }
        }
        case 34 => {
          { return  TO()
          }
        }
        case 19 => {
          { return AMPER()
          }
        }
        case 56 => {
          { return  FUNCTION()
          }
        }
        case 42 => {
          { tigerStr.append('\n');
          }
        }
        case 12 => {
          { return PCOMA()
          }
        }
        case _ =>
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            (zzLexicalState) match  {
            case COM => { {
              throw new Error("Commentario incompleto")
            }
          }
            case YYINITIAL => { {
              return TigerTokens.YYEOF();
            }
          }
            case STRING => { {
              throw new Error("String incompleto")
            }
          }
            case _ => {
            return null;
              }
            };
          } else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
    throw new RuntimeException("NOT REACHED");
  }


}
