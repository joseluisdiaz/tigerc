/* Generated by Scala-Bison version 0.83 */

package tiger.parser
import tiger.Tree._


/** Generated LALR(1) recursive-ascent-descent parser */
class TigerParser extends TigerParserBase {
  class YYNonterminal extends TigerTokens.YYSymbol;

  case class YYNTerror(yy : String) extends YYNonterminal;
  case class YYNTexp(yy: Exp) extends YYNonterminal;
  case class YYNTprog(yy: Exp) extends YYNonterminal;
  case class YYNTty(yy: Ty) extends YYNonterminal;
  case class YYNTid(yy: String) extends YYNonterminal;
  case class YYNTtyfield(yy: Field) extends YYNonterminal;
  case class YYNTtyflds(yy: List[Field]) extends YYNonterminal;
  case class YYNTexplist(yy: List[Exp]) extends YYNonterminal;
  case class YYNTrec_fields(yy: List[(Symbol, Exp)]) extends YYNonterminal;
  case class YYNTargs(yy: List[Exp]) extends YYNonterminal;
  case class YYNTl_value(yy: Var) extends YYNonterminal;
  case class YYNTdec(yy: Dec) extends YYNonterminal;
  case class YYNTvardec(yy: Dec) extends YYNonterminal;
  case class YYNTfundec(yy: Dec) extends YYNonterminal;
  case class YYNTdecs(yy: List[Dec]) extends YYNonterminal;

  private var yynt : YYNonterminal = null;

  case class YYError(s:String) extends Exception(s);

  // boilerplate

  var yydebug : Boolean = false;
  private var yyinput : Iterator[TigerTokens.YYToken] = null;
  private var yycur : TigerTokens.YYToken = null;

  private def yynext() = {
    yycur = {
      if (yyinput hasNext) {
        yyinput.next
      } else {
        TigerTokens.YYEOF();
      }
    }
  }

  private def yypanic(test : (TigerTokens.YYToken) => Boolean) = {
    while (!test(yycur)) {
      yynext;
      if (yycur == TigerTokens.YYEOF()) throw new YYError("Giving up")
    }
  }

  def yyreset(input : Iterator[TigerTokens.YYToken]) = {
    yyinput = input;
    yynt = null;
    yynext
  }

  def yyparse() : Boolean = {
    try {
      parse_prog()
      parse_YYEOF()
      true
    } catch {
      case YYError(s) => yyerror(s); false
    }
  }

  def parse_YYCHAR(yy:Char) : Unit = {
    yycur match {
      case TigerTokens.YYCHAR(`yy`) => yynext; ()
      case _ => throw new YYError("Expected '"+yy+"'");
    }
  }

  // generated parser

  def parse_YYEOF() : Unit = {
    yycur match {
      case TigerTokens.YYEOF() => yynext; ()
      case _ => throw new YYError("Expected 'YYEOF'");
    }
  }

  def parse_LITERAL() : String = {
    yycur match {
      case TigerTokens.LITERAL(yy) => yynext; yy
      case _ => throw new YYError("Expected 'LITERAL'");
    }
  }

  def parse_ID() : String = {
    yycur match {
      case TigerTokens.ID(yy) => yynext; yy
      case _ => throw new YYError("Expected 'ID'");
    }
  }

  def parse_NRO() : Integer = {
    yycur match {
      case TigerTokens.NRO(yy) => yynext; yy
      case _ => throw new YYError("Expected 'NRO'");
    }
  }

  def parse_TYPE() : Unit = {
    yycur match {
      case TigerTokens.TYPE() => yynext; ()
      case _ => throw new YYError("Expected 'TYPE'");
    }
  }

  def parse_ARRAY() : Unit = {
    yycur match {
      case TigerTokens.ARRAY() => yynext; ()
      case _ => throw new YYError("Expected 'ARRAY'");
    }
  }

  def parse_OF() : Unit = {
    yycur match {
      case TigerTokens.OF() => yynext; ()
      case _ => throw new YYError("Expected 'OF'");
    }
  }

  def parse_VAR() : Unit = {
    yycur match {
      case TigerTokens.VAR() => yynext; ()
      case _ => throw new YYError("Expected 'VAR'");
    }
  }

  def parse_FUNCTION() : Unit = {
    yycur match {
      case TigerTokens.FUNCTION() => yynext; ()
      case _ => throw new YYError("Expected 'FUNCTION'");
    }
  }

  def parse_LET() : Unit = {
    yycur match {
      case TigerTokens.LET() => yynext; ()
      case _ => throw new YYError("Expected 'LET'");
    }
  }

  def parse_IN() : Unit = {
    yycur match {
      case TigerTokens.IN() => yynext; ()
      case _ => throw new YYError("Expected 'IN'");
    }
  }

  def parse_END() : Unit = {
    yycur match {
      case TigerTokens.END() => yynext; ()
      case _ => throw new YYError("Expected 'END'");
    }
  }

  def parse_IF() : Unit = {
    yycur match {
      case TigerTokens.IF() => yynext; ()
      case _ => throw new YYError("Expected 'IF'");
    }
  }

  def parse_THEN() : Unit = {
    yycur match {
      case TigerTokens.THEN() => yynext; ()
      case _ => throw new YYError("Expected 'THEN'");
    }
  }

  def parse_ELSE() : Unit = {
    yycur match {
      case TigerTokens.ELSE() => yynext; ()
      case _ => throw new YYError("Expected 'ELSE'");
    }
  }

  def parse_WHILE() : Unit = {
    yycur match {
      case TigerTokens.WHILE() => yynext; ()
      case _ => throw new YYError("Expected 'WHILE'");
    }
  }

  def parse_DO() : Unit = {
    yycur match {
      case TigerTokens.DO() => yynext; ()
      case _ => throw new YYError("Expected 'DO'");
    }
  }

  def parse_FOR() : Unit = {
    yycur match {
      case TigerTokens.FOR() => yynext; ()
      case _ => throw new YYError("Expected 'FOR'");
    }
  }

  def parse_TO() : Unit = {
    yycur match {
      case TigerTokens.TO() => yynext; ()
      case _ => throw new YYError("Expected 'TO'");
    }
  }

  def parse_BREAK() : Unit = {
    yycur match {
      case TigerTokens.BREAK() => yynext; ()
      case _ => throw new YYError("Expected 'BREAK'");
    }
  }

  def parse_PTO() : Unit = {
    yycur match {
      case TigerTokens.PTO() => yynext; ()
      case _ => throw new YYError("Expected 'PTO'");
    }
  }

  def parse_DOSP() : Unit = {
    yycur match {
      case TigerTokens.DOSP() => yynext; ()
      case _ => throw new YYError("Expected 'DOSP'");
    }
  }

  def parse_DOSPIG() : Unit = {
    yycur match {
      case TigerTokens.DOSPIG() => yynext; ()
      case _ => throw new YYError("Expected 'DOSPIG'");
    }
  }

  def parse_COMA() : Unit = {
    yycur match {
      case TigerTokens.COMA() => yynext; ()
      case _ => throw new YYError("Expected 'COMA'");
    }
  }

  def parse_PCOMA() : Unit = {
    yycur match {
      case TigerTokens.PCOMA() => yynext; ()
      case _ => throw new YYError("Expected 'PCOMA'");
    }
  }

  def parse_IGUAL() : Unit = {
    yycur match {
      case TigerTokens.IGUAL() => yynext; ()
      case _ => throw new YYError("Expected 'IGUAL'");
    }
  }

  def parse_PI() : Unit = {
    yycur match {
      case TigerTokens.PI() => yynext; ()
      case _ => throw new YYError("Expected 'PI'");
    }
  }

  def parse_PD() : Unit = {
    yycur match {
      case TigerTokens.PD() => yynext; ()
      case _ => throw new YYError("Expected 'PD'");
    }
  }

  def parse_CI() : Unit = {
    yycur match {
      case TigerTokens.CI() => yynext; ()
      case _ => throw new YYError("Expected 'CI'");
    }
  }

  def parse_CD() : Unit = {
    yycur match {
      case TigerTokens.CD() => yynext; ()
      case _ => throw new YYError("Expected 'CD'");
    }
  }

  def parse_LI() : Unit = {
    yycur match {
      case TigerTokens.LI() => yynext; ()
      case _ => throw new YYError("Expected 'LI'");
    }
  }

  def parse_LD() : Unit = {
    yycur match {
      case TigerTokens.LD() => yynext; ()
      case _ => throw new YYError("Expected 'LD'");
    }
  }

  def parse_AMPER() : Unit = {
    yycur match {
      case TigerTokens.AMPER() => yynext; ()
      case _ => throw new YYError("Expected 'AMPER'");
    }
  }

  def parse_PIPE() : Unit = {
    yycur match {
      case TigerTokens.PIPE() => yynext; ()
      case _ => throw new YYError("Expected 'PIPE'");
    }
  }

  def parse_MENOR() : Unit = {
    yycur match {
      case TigerTokens.MENOR() => yynext; ()
      case _ => throw new YYError("Expected 'MENOR'");
    }
  }

  def parse_MENIG() : Unit = {
    yycur match {
      case TigerTokens.MENIG() => yynext; ()
      case _ => throw new YYError("Expected 'MENIG'");
    }
  }

  def parse_MAYOR() : Unit = {
    yycur match {
      case TigerTokens.MAYOR() => yynext; ()
      case _ => throw new YYError("Expected 'MAYOR'");
    }
  }

  def parse_MAYIG() : Unit = {
    yycur match {
      case TigerTokens.MAYIG() => yynext; ()
      case _ => throw new YYError("Expected 'MAYIG'");
    }
  }

  def parse_DIST() : Unit = {
    yycur match {
      case TigerTokens.DIST() => yynext; ()
      case _ => throw new YYError("Expected 'DIST'");
    }
  }

  def parse_MAS() : Unit = {
    yycur match {
      case TigerTokens.MAS() => yynext; ()
      case _ => throw new YYError("Expected 'MAS'");
    }
  }

  def parse_MENOS() : Unit = {
    yycur match {
      case TigerTokens.MENOS() => yynext; ()
      case _ => throw new YYError("Expected 'MENOS'");
    }
  }

  def parse_POR() : Unit = {
    yycur match {
      case TigerTokens.POR() => yynext; ()
      case _ => throw new YYError("Expected 'POR'");
    }
  }

  def parse_DIV() : Unit = {
    yycur match {
      case TigerTokens.DIV() => yynext; ()
      case _ => throw new YYError("Expected 'DIV'");
    }
  }

  def parse_NIL() : Unit = {
    yycur match {
      case TigerTokens.NIL() => yynext; ()
      case _ => throw new YYError("Expected 'NIL'");
    }
  }

  def parse_prog() : Exp = {
    yystate0();
    yynt match {
      case YYNTprog(yy) => yy
      case YYNTerror(s) => throw new YYError(s)
    }
  }

  def parse_tyflds() : List[Field] = {
    yystate113();
    yynt match {
      case YYNTtyflds(yy) => yy
      case YYNTerror(s) => throw new YYError(s)
    }
  }

  def parse_exp() : Exp = {
    yystate2();
    yynt match {
      case YYNTexp(yy) => yy
      case YYNTerror(s) => throw new YYError(s)
    }
  }

  def parse_args() : List[Exp] = {
    yystate66();
    yynt match {
      case YYNTargs(yy) => yy
      case YYNTerror(s) => throw new YYError(s)
    }
  }

  def parse_rec_fields() : List[(Symbol, Exp)] = {
    yystate69();
    yynt match {
      case YYNTrec_fields(yy) => yy
      case YYNTerror(s) => throw new YYError(s)
    }
  }

  def parse_decs() : List[Dec] = {
    yystate85();
    yynt match {
      case YYNTdecs(yy) => yy
      case YYNTerror(s) => throw new YYError(s)
    }
  }

  def parse_vardec() : Dec = {
    yystate87();
    yynt match {
      case YYNTvardec(yy) => yy
      case YYNTerror(s) => throw new YYError(s)
    }
  }

  def parse_id() : String = {
    yystate111();
    yynt match {
      case YYNTid(yy) => yy
      case YYNTerror(s) => throw new YYError(s)
    }
  }

  def parse_fundec() : Dec = {
    yystate97();
    yynt match {
      case YYNTfundec(yy) => yy
      case YYNTerror(s) => throw new YYError(s)
    }
  }

  def parse_explist() : List[Exp] = {
    yystate63();
    yynt match {
      case YYNTexplist(yy) => yy
      case YYNTerror(s) => throw new YYError(s)
    }
  }

  def parse_dec() : Dec = {
    yystate76();
    yynt match {
      case YYNTdec(yy) => yy
      case YYNTerror(s) => throw new YYError(s)
    }
  }


  /** Recursive descent parser after recognition point
   * prog: . exp YYEOF
   */
  private def yyrule1() : Exp = {
    var yyresult : Exp = null;
    val yyarg1 : Exp = parse_exp();
    parse_YYEOF();
    { yyresult = yyarg1; }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * exp: . NRO
   */
  private def yyrule2() : Exp = {
    var yyresult : Exp = null;
    val yyarg1 : Integer = parse_NRO();
    { yyresult = IntExp(yyarg1, line); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * exp: PI . PD
   */
  private def yyrule3() : Exp = {
    var yyresult : Exp = null;
    parse_PD();
    { yyresult = UnitExp(line); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * exp: . NIL
   */
  private def yyrule4() : Exp = {
    var yyresult : Exp = null;
    parse_NIL();
    { yyresult = NilExp(line); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * exp: . LITERAL
   */
  private def yyrule5() : Exp = {
    var yyresult : Exp = null;
    val yyarg1 : String = parse_LITERAL();
    { yyresult = StringExp(yyarg1, line); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * exp: . BREAK
   */
  private def yyrule6() : Exp = {
    var yyresult : Exp = null;
    parse_BREAK();
    { yyresult = BreakExp(line); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * exp: l_value .
   */
  private def yyrule7(yyarg1 : Var) : Exp = {
    var yyresult : Exp = null;
    { yyresult = VarExp(yyarg1, line); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * exp: l_value DOSPIG exp .
   */
  private def yyrule8(yyarg1 : Var, yyarg3 : Exp) : Exp = {
    var yyresult : Exp = null;
    { yyresult = AssignExp(yyarg1, yyarg3, line); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * exp: PI exp . PCOMA explist PD
   */
  private def yyrule9(yyarg2 : Exp) : Exp = {
    var yyresult : Exp = null;
    parse_PCOMA();
    val yyarg4 : List[Exp] = parse_explist();
    parse_PD();
    { yyresult = SeqExp( yyarg2 :: yyarg4, line); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * exp: exp PIPE exp .
   */
  private def yyrule10(yyarg1 : Exp, yyarg3 : Exp) : Exp = {
    var yyresult : Exp = null;
    { yyresult = IfExp(yyarg1, IntExp(1, line), Some(yyarg3), line); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * exp: exp AMPER exp .
   */
  private def yyrule11(yyarg1 : Exp, yyarg3 : Exp) : Exp = {
    var yyresult : Exp = null;
    { yyresult = IfExp(yyarg1, yyarg3, Some(IntExp(0, line)), line); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * exp: exp IGUAL exp .
   */
  private def yyrule12(yyarg1 : Exp, yyarg3 : Exp) : Exp = {
    var yyresult : Exp = null;
    { yyresult = OpExp(yyarg1, EqOp(), yyarg3, line); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * exp: exp MENOR exp .
   */
  private def yyrule13(yyarg1 : Exp, yyarg3 : Exp) : Exp = {
    var yyresult : Exp = null;
    { yyresult = OpExp(yyarg1, LtOp(), yyarg3, line); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * exp: exp MENIG exp .
   */
  private def yyrule14(yyarg1 : Exp, yyarg3 : Exp) : Exp = {
    var yyresult : Exp = null;
    { yyresult = OpExp(yyarg1, LeOp(), yyarg3, line); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * exp: exp MAYOR exp .
   */
  private def yyrule15(yyarg1 : Exp, yyarg3 : Exp) : Exp = {
    var yyresult : Exp = null;
    { yyresult = OpExp(yyarg1, GtOp(), yyarg3, line); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * exp: exp MAYIG exp .
   */
  private def yyrule16(yyarg1 : Exp, yyarg3 : Exp) : Exp = {
    var yyresult : Exp = null;
    { yyresult = OpExp(yyarg1, GeOp(), yyarg3, line); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * exp: exp DIST exp .
   */
  private def yyrule17(yyarg1 : Exp, yyarg3 : Exp) : Exp = {
    var yyresult : Exp = null;
    { yyresult = OpExp(yyarg1, NeqOp(), yyarg3, line); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * exp: exp MAS exp .
   */
  private def yyrule18(yyarg1 : Exp, yyarg3 : Exp) : Exp = {
    var yyresult : Exp = null;
    { yyresult = OpExp(yyarg1, PlusOp(), yyarg3, line); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * exp: exp MENOS exp .
   */
  private def yyrule19(yyarg1 : Exp, yyarg3 : Exp) : Exp = {
    var yyresult : Exp = null;
    { yyresult = OpExp(yyarg1, MinusOp(), yyarg3, line); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * exp: exp POR exp .
   */
  private def yyrule20(yyarg1 : Exp, yyarg3 : Exp) : Exp = {
    var yyresult : Exp = null;
    { yyresult = OpExp(yyarg1, TimesOp(), yyarg3, line); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * exp: exp DIV exp .
   */
  private def yyrule21(yyarg1 : Exp, yyarg3 : Exp) : Exp = {
    var yyresult : Exp = null;
    { yyresult = OpExp(yyarg1, DivideOp(), yyarg3, line); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * exp: MENOS exp .
   */
  private def yyrule22(yyarg2 : Exp) : Exp = {
    var yyresult : Exp = null;
    { yyresult = OpExp(IntExp(0, line), MinusOp(), yyarg2, line); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * exp: PI exp . PD
   */
  private def yyrule23(yyarg2 : Exp) : Exp = {
    var yyresult : Exp = null;
    parse_PD();
    { yyresult = yyarg2; }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * exp: id . PI args PD
   */
  private def yyrule24(yyarg1 : String) : Exp = {
    var yyresult : Exp = null;
    parse_PI();
    val yyarg3 : List[Exp] = parse_args();
    parse_PD();
    { yyresult = CallExp(yyarg1, yyarg3, line); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * exp: IF exp THEN exp .
   */
  private def yyrule25(yyarg2 : Exp, yyarg4 : Exp) : Exp = {
    var yyresult : Exp = null;
    { yyresult = IfExp(yyarg2, yyarg4, None, line); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * exp: IF exp THEN exp ELSE exp .
   */
  private def yyrule26(yyarg2 : Exp, yyarg4 : Exp, yyarg6 : Exp) : Exp = {
    var yyresult : Exp = null;
    { yyresult = IfExp(yyarg2, yyarg4, Some(yyarg6), line); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * exp: WHILE exp DO exp .
   */
  private def yyrule27(yyarg2 : Exp, yyarg4 : Exp) : Exp = {
    var yyresult : Exp = null;
    { yyresult = WhileExp(yyarg2, yyarg4, line); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * exp: FOR id DOSPIG exp TO exp DO exp .
   */
  private def yyrule28(yyarg2 : String, yyarg4 : Exp, yyarg6 : Exp, yyarg8 : Exp) : Exp = {
    var yyresult : Exp = null;
    { yyresult = ForExp(yyarg2, false, yyarg4, yyarg6, yyarg8, line); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * exp: LET decs IN . END
   */
  private def yyrule29(yyarg2 : List[Dec]) : Exp = {
    var yyresult : Exp = null;
    parse_END();
    { yyresult = LetExp(yyarg2, UnitExp(line), line); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * exp: LET decs IN exp . END
   */
  private def yyrule30(yyarg2 : List[Dec], yyarg4 : Exp) : Exp = {
    var yyresult : Exp = null;
    parse_END();
    { yyresult = LetExp(yyarg2, yyarg4, line); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * exp: LET decs IN exp . PCOMA explist END
   */
  private def yyrule31(yyarg2 : List[Dec], yyarg4 : Exp) : Exp = {
    var yyresult : Exp = null;
    parse_PCOMA();
    val yyarg6 : List[Exp] = parse_explist();
    parse_END();
    { yyresult = LetExp(yyarg2, SeqExp(yyarg4::yyarg6, line), line); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * exp: l_value CI exp CD OF exp .
   */
  private def yyrule32(yyarg1 : Var, yyarg3 : Exp, yyarg6 : Exp) : Exp = {
    var yyresult : Exp = null;
    { yyresult = ArrayExp(nombre(yyarg1), yyarg3, yyarg6, line); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * exp: id . LI rec_fields LD
   */
  private def yyrule33(yyarg1 : String) : Exp = {
    var yyresult : Exp = null;
    parse_LI();
    val yyarg3 : List[(Symbol, Exp)] = parse_rec_fields();
    parse_LD();
    { yyresult = RecordExp(yyarg3, yyarg1, line); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * explist: exp . PCOMA explist
   */
  private def yyrule34(yyarg1 : Exp) : List[Exp] = {
    var yyresult : List[Exp] = null;
    parse_PCOMA();
    val yyarg3 : List[Exp] = parse_explist();
    { yyresult = yyarg1::yyarg3; }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * explist: exp .
   */
  private def yyrule35(yyarg1 : Exp) : List[Exp] = {
    var yyresult : List[Exp] = null;
    { yyresult = List(yyarg1); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * rec_fields: id IGUAL exp COMA rec_fields .
   */
  private def yyrule36(yyarg1 : String, yyarg3 : Exp, yyarg5 : List[(Symbol, Exp)]) : List[(Symbol, Exp)] = {
    var yyresult : List[(Symbol, Exp)] = null;
    { yyresult = (yyarg1, yyarg3) :: yyarg5 ; }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * rec_fields: id IGUAL exp .
   */
  private def yyrule37(yyarg1 : String, yyarg3 : Exp) : List[(Symbol, Exp)] = {
    var yyresult : List[(Symbol, Exp)] = null;
    { yyresult = List( (yyarg1, yyarg3) ); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * rec_fields: .
   */
  private def yyrule38() : List[(Symbol, Exp)] = {
    var yyresult : List[(Symbol, Exp)] = null;
    { yyresult = Nil; }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * decs: . dec decs
   */
  private def yyrule39() : List[Dec] = {
    var yyresult : List[Dec] = null;
    val yyarg1 : Dec = parse_dec();
    val yyarg2 : List[Dec] = parse_decs();
    { yyresult = yyarg1 :: yyarg2; }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * decs: .
   */
  private def yyrule40() : List[Dec] = {
    var yyresult : List[Dec] = null;
    { yyresult = Nil; }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * dec: TYPE id IGUAL ty .
   */
  private def yyrule41(yyarg2 : String, yyarg4 : Ty) : Dec = {
    var yyresult : Dec = null;
    { yyresult = TypeDecs(List(TypeDec(yyarg2, yyarg4, line))); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * dec: . vardec
   */
  private def yyrule42() : Dec = {
    var yyresult : Dec = null;
    val yyarg1 : Dec = parse_vardec();
    { yyresult = yyarg1; }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * dec: . fundec
   */
  private def yyrule43() : Dec = {
    var yyresult : Dec = null;
    val yyarg1 : Dec = parse_fundec();
    { yyresult = yyarg1; }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * ty: . id
   */
  private def yyrule44() : Ty = {
    var yyresult : Ty = null;
    val yyarg1 : String = parse_id();
    { yyresult = NameTy(yyarg1); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * ty: . LI tyflds LD
   */
  private def yyrule45() : Ty = {
    var yyresult : Ty = null;
    parse_LI();
    val yyarg2 : List[Field] = parse_tyflds();
    parse_LD();
    { yyresult = RecordTy(yyarg2); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * ty: ARRAY OF id .
   */
  private def yyrule46(yyarg3 : String) : Ty = {
    var yyresult : Ty = null;
    { yyresult = ArrayTy(yyarg3); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * id: . ID
   */
  private def yyrule47() : String = {
    var yyresult : String = null;
    val yyarg1 : String = parse_ID();
    { yyresult = yyarg1; }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * tyflds: tyfield . COMA tyflds
   */
  private def yyrule48(yyarg1 : Field) : List[Field] = {
    var yyresult : List[Field] = null;
    parse_COMA();
    val yyarg3 : List[Field] = parse_tyflds();
    { yyresult = yyarg1 :: yyarg3; }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * tyflds: tyfield .
   */
  private def yyrule49(yyarg1 : Field) : List[Field] = {
    var yyresult : List[Field] = null;
    { yyresult = List(yyarg1); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * tyflds: .
   */
  private def yyrule50() : List[Field] = {
    var yyresult : List[Field] = null;
    { yyresult = Nil; }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * vardec: VAR id DOSPIG exp .
   */
  private def yyrule51(yyarg2 : String, yyarg4 : Exp) : Dec = {
    var yyresult : Dec = null;
    { yyresult = VarDec(yyarg2, false, None, yyarg4, line); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * vardec: VAR id DOSP id DOSPIG exp .
   */
  private def yyrule52(yyarg2 : String, yyarg4 : String, yyarg6 : Exp) : Dec = {
    var yyresult : Dec = null;
    { yyresult = VarDec(yyarg2, false, Some(yyarg4), yyarg6, line); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * fundec: FUNCTION id PI tyflds PD IGUAL exp .
   */
  private def yyrule53(yyarg2 : String, yyarg4 : List[Field], yyarg7 : Exp) : Dec = {
    var yyresult : Dec = null;
    { yyresult = FunctionDecs(List(FunctionDec(yyarg2, yyarg4, None, yyarg7, line))); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * fundec: FUNCTION id PI tyflds PD DOSP id IGUAL exp .
   */
  private def yyrule54(yyarg2 : String, yyarg4 : List[Field], yyarg7 : String, yyarg9 : Exp) : Dec = {
    var yyresult : Dec = null;
    { yyresult = FunctionDecs(List(FunctionDec(yyarg2, yyarg4, Some(yyarg7), yyarg9, line))); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * tyfield: . id DOSP id
   */
  private def yyrule55() : Field = {
    var yyresult : Field = null;
    val yyarg1 : String = parse_id();
    parse_DOSP();
    val yyarg3 : String = parse_id();
    { yyresult = Field(yyarg1, false, NameTy(yyarg3)); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * args: exp . COMA args
   */
  private def yyrule56(yyarg1 : Exp) : List[Exp] = {
    var yyresult : List[Exp] = null;
    parse_COMA();
    val yyarg3 : List[Exp] = parse_args();
    { yyarg1 :: yyarg3; }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * args: exp .
   */
  private def yyrule57(yyarg1 : Exp) : List[Exp] = {
    var yyresult : List[Exp] = null;
    { List(yyarg1); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * args: .
   */
  private def yyrule58() : List[Exp] = {
    var yyresult : List[Exp] = null;
    { List(); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * l_value: id .
   */
  private def yyrule59(yyarg1 : String) : Var = {
    var yyresult : Var = null;
    { yyresult = SimpleVar(yyarg1); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * l_value: l_value . PTO id
   */
  private def yyrule60(yyarg1 : Var) : Var = {
    var yyresult : Var = null;
    parse_PTO();
    val yyarg3 : String = parse_id();
    { yyresult = FieldVar(yyarg1, yyarg3); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * l_value: l_value CI exp CD .
   */
  private def yyrule61(yyarg1 : Var, yyarg3 : Exp) : Var = {
    var yyresult : Var = null;
    { yyresult = SubscriptVar(yyarg1, yyarg3); }
    yyresult
  }

  private def yystate1(yyarg1: Exp) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case TigerTokens.YYEOF() => yynt = YYNTprog(yyarg1); yygoto = 2;
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTprog => return 0;
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate0() : Int = {
    var yygoto : Int = 0;
    yycur match {
      case TigerTokens.NIL() => yynt = YYNTprog(yyrule1()); yygoto = 0
      case TigerTokens.BREAK() => yynt = YYNTprog(yyrule1()); yygoto = 0
      case TigerTokens.WHILE() => yynt = YYNTprog(yyrule1()); yygoto = 0
      case TigerTokens.LET() => yynt = YYNTprog(yyrule1()); yygoto = 0
      case TigerTokens.ID(_) => yynt = YYNTprog(yyrule1()); yygoto = 0
      case TigerTokens.IF() => yynt = YYNTprog(yyrule1()); yygoto = 0
      case TigerTokens.PI() => yynt = YYNTprog(yyrule1()); yygoto = 0
      case TigerTokens.LITERAL(_) => yynt = YYNTprog(yyrule1()); yygoto = 0
      case TigerTokens.NRO(_) => yynt = YYNTprog(yyrule1()); yygoto = 0
      case TigerTokens.FOR() => yynt = YYNTprog(yyrule1()); yygoto = 0
      case TigerTokens.MENOS() => yynt = YYNTprog(yyrule1()); yygoto = 0
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case YYNTprog(yyarg1) => yygoto = yystate1(yyarg1);
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate114(yyarg1: List[Field]) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case TigerTokens.PD() => yynt = YYNTtyflds(yyarg1); yygoto = 2;
      case TigerTokens.LD() => yynt = YYNTtyflds(yyarg1); yygoto = 2;
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTtyflds => return 0;
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate109(yyarg1: Field) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case TigerTokens.COMA() => yynt = YYNTtyflds(yyrule48(yyarg1)); yygoto = 1
      case _ => yynt = YYNTtyflds(yyrule49(yyarg1)); yygoto = 1
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate113() : Int = {
    var yygoto : Int = 0;
    yycur match {
      case TigerTokens.PD() => yynt = YYNTtyflds(yyrule50()); yygoto = 0
      case TigerTokens.ID(_) => yynt = YYNTtyfield(yyrule55()); yygoto = 0
      case TigerTokens.LD() => yynt = YYNTtyflds(yyrule50()); yygoto = 0
      case _ => yynt = YYNTtyflds(yyrule50()); yygoto = 0
    }
    while (yygoto == 0) {
      yynt match {
        case YYNTtyflds(yyarg1) => yygoto = yystate114(yyarg1);
        case YYNTtyfield(yyarg1) => yygoto = yystate109(yyarg1);
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate15(yyarg1: Exp, yyarg3: Exp) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case _ => yynt = YYNTexp(yyrule21(yyarg1,yyarg3)); yygoto = 3
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate16(yyarg1: String) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case TigerTokens.LI() => yynt = YYNTexp(yyrule33(yyarg1)); yygoto = 1
      case TigerTokens.PI() => yynt = YYNTexp(yyrule24(yyarg1)); yygoto = 1
      case _ => yynt = YYNTl_value(yyrule59(yyarg1)); yygoto = 1
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate23(yyarg1: Exp, yyarg3: Exp) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case _ => yynt = YYNTexp(yyrule20(yyarg1,yyarg3)); yygoto = 3
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate22(yyarg1: Exp) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case TigerTokens.NIL() => yynt = YYNTexp(yyrule4()); yygoto = 0
      case TigerTokens.BREAK() => yynt = YYNTexp(yyrule6()); yygoto = 0
      case TigerTokens.WHILE() => yynext; yygoto = yystate3();
      case TigerTokens.LET() => yynext; yygoto = yystate4();
      case TigerTokens.ID(_) => yynt = YYNTid(yyrule47()); yygoto = 0
      case TigerTokens.IF() => yynext; yygoto = yystate7();
      case TigerTokens.PI() => yynext; yygoto = yystate8();
      case TigerTokens.LITERAL(_) => yynt = YYNTexp(yyrule5()); yygoto = 0
      case TigerTokens.NRO(_) => yynt = YYNTexp(yyrule2()); yygoto = 0
      case TigerTokens.FOR() => yynext; yygoto = yystate9();
      case TigerTokens.MENOS() => yynext; yygoto = yystate12();
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case YYNTexp(yyarg3) => yygoto = yystate23(yyarg1,yyarg3);
        case YYNTid(yyarg3) => yygoto = yystate16(yyarg3);
        case YYNTl_value(yyarg3) => yygoto = yystate17(yyarg3);
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate25(yyarg1: Exp, yyarg3: Exp) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case TigerTokens.DIV() => yynext; yygoto = yystate14(yyarg3);
      case TigerTokens.POR() => yynext; yygoto = yystate22(yyarg3);
      case _ => yynt = YYNTexp(yyrule18(yyarg1,yyarg3)); yygoto = 3
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate24(yyarg1: Exp) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case TigerTokens.NIL() => yynt = YYNTexp(yyrule4()); yygoto = 0
      case TigerTokens.BREAK() => yynt = YYNTexp(yyrule6()); yygoto = 0
      case TigerTokens.WHILE() => yynext; yygoto = yystate3();
      case TigerTokens.LET() => yynext; yygoto = yystate4();
      case TigerTokens.ID(_) => yynt = YYNTid(yyrule47()); yygoto = 0
      case TigerTokens.IF() => yynext; yygoto = yystate7();
      case TigerTokens.PI() => yynext; yygoto = yystate8();
      case TigerTokens.LITERAL(_) => yynt = YYNTexp(yyrule5()); yygoto = 0
      case TigerTokens.NRO(_) => yynt = YYNTexp(yyrule2()); yygoto = 0
      case TigerTokens.FOR() => yynext; yygoto = yystate9();
      case TigerTokens.MENOS() => yynext; yygoto = yystate12();
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case YYNTexp(yyarg3) => yygoto = yystate25(yyarg1,yyarg3);
        case YYNTid(yyarg3) => yygoto = yystate16(yyarg3);
        case YYNTl_value(yyarg3) => yygoto = yystate17(yyarg3);
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate27(yyarg1: Exp, yyarg3: Exp) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case TigerTokens.DIV() => yynext; yygoto = yystate14(yyarg3);
      case TigerTokens.POR() => yynext; yygoto = yystate22(yyarg3);
      case _ => yynt = YYNTexp(yyrule19(yyarg1,yyarg3)); yygoto = 3
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate26(yyarg1: Exp) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case TigerTokens.NIL() => yynt = YYNTexp(yyrule4()); yygoto = 0
      case TigerTokens.BREAK() => yynt = YYNTexp(yyrule6()); yygoto = 0
      case TigerTokens.WHILE() => yynext; yygoto = yystate3();
      case TigerTokens.LET() => yynext; yygoto = yystate4();
      case TigerTokens.ID(_) => yynt = YYNTid(yyrule47()); yygoto = 0
      case TigerTokens.IF() => yynext; yygoto = yystate7();
      case TigerTokens.PI() => yynext; yygoto = yystate8();
      case TigerTokens.LITERAL(_) => yynt = YYNTexp(yyrule5()); yygoto = 0
      case TigerTokens.NRO(_) => yynt = YYNTexp(yyrule2()); yygoto = 0
      case TigerTokens.FOR() => yynext; yygoto = yystate9();
      case TigerTokens.MENOS() => yynext; yygoto = yystate12();
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case YYNTexp(yyarg3) => yygoto = yystate27(yyarg1,yyarg3);
        case YYNTid(yyarg3) => yygoto = yystate16(yyarg3);
        case YYNTl_value(yyarg3) => yygoto = yystate17(yyarg3);
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate21(yyarg1: Exp, yyarg3: Exp) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case TigerTokens.DIST() => yynt = YYNTerror("(nonassociative)");
      case TigerTokens.MAYIG() => yynt = YYNTerror("(nonassociative)");
      case TigerTokens.DIV() => yynext; yygoto = yystate14(yyarg3);
      case TigerTokens.MAYOR() => yynt = YYNTerror("(nonassociative)");
      case TigerTokens.MENOR() => yynt = YYNTerror("(nonassociative)");
      case TigerTokens.POR() => yynext; yygoto = yystate22(yyarg3);
      case TigerTokens.IGUAL() => yynt = YYNTerror("(nonassociative)");
      case TigerTokens.MAS() => yynext; yygoto = yystate24(yyarg3);
      case TigerTokens.MENOS() => yynext; yygoto = yystate26(yyarg3);
      case TigerTokens.MENIG() => yynt = YYNTerror("(nonassociative)");
      case _ => yynt = YYNTexp(yyrule17(yyarg1,yyarg3)); yygoto = 3
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate20(yyarg1: Exp) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case TigerTokens.NIL() => yynt = YYNTexp(yyrule4()); yygoto = 0
      case TigerTokens.BREAK() => yynt = YYNTexp(yyrule6()); yygoto = 0
      case TigerTokens.WHILE() => yynext; yygoto = yystate3();
      case TigerTokens.LET() => yynext; yygoto = yystate4();
      case TigerTokens.ID(_) => yynt = YYNTid(yyrule47()); yygoto = 0
      case TigerTokens.IF() => yynext; yygoto = yystate7();
      case TigerTokens.PI() => yynext; yygoto = yystate8();
      case TigerTokens.LITERAL(_) => yynt = YYNTexp(yyrule5()); yygoto = 0
      case TigerTokens.NRO(_) => yynt = YYNTexp(yyrule2()); yygoto = 0
      case TigerTokens.FOR() => yynext; yygoto = yystate9();
      case TigerTokens.MENOS() => yynext; yygoto = yystate12();
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case YYNTexp(yyarg3) => yygoto = yystate21(yyarg1,yyarg3);
        case YYNTid(yyarg3) => yygoto = yystate16(yyarg3);
        case YYNTl_value(yyarg3) => yygoto = yystate17(yyarg3);
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate29(yyarg1: Exp, yyarg3: Exp) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case TigerTokens.DIST() => yynt = YYNTerror("(nonassociative)");
      case TigerTokens.MAYIG() => yynt = YYNTerror("(nonassociative)");
      case TigerTokens.DIV() => yynext; yygoto = yystate14(yyarg3);
      case TigerTokens.MAYOR() => yynt = YYNTerror("(nonassociative)");
      case TigerTokens.MENOR() => yynt = YYNTerror("(nonassociative)");
      case TigerTokens.POR() => yynext; yygoto = yystate22(yyarg3);
      case TigerTokens.IGUAL() => yynt = YYNTerror("(nonassociative)");
      case TigerTokens.MAS() => yynext; yygoto = yystate24(yyarg3);
      case TigerTokens.MENOS() => yynext; yygoto = yystate26(yyarg3);
      case TigerTokens.MENIG() => yynt = YYNTerror("(nonassociative)");
      case _ => yynt = YYNTexp(yyrule16(yyarg1,yyarg3)); yygoto = 3
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate28(yyarg1: Exp) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case TigerTokens.NIL() => yynt = YYNTexp(yyrule4()); yygoto = 0
      case TigerTokens.BREAK() => yynt = YYNTexp(yyrule6()); yygoto = 0
      case TigerTokens.WHILE() => yynext; yygoto = yystate3();
      case TigerTokens.LET() => yynext; yygoto = yystate4();
      case TigerTokens.ID(_) => yynt = YYNTid(yyrule47()); yygoto = 0
      case TigerTokens.IF() => yynext; yygoto = yystate7();
      case TigerTokens.PI() => yynext; yygoto = yystate8();
      case TigerTokens.LITERAL(_) => yynt = YYNTexp(yyrule5()); yygoto = 0
      case TigerTokens.NRO(_) => yynt = YYNTexp(yyrule2()); yygoto = 0
      case TigerTokens.FOR() => yynext; yygoto = yystate9();
      case TigerTokens.MENOS() => yynext; yygoto = yystate12();
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case YYNTexp(yyarg3) => yygoto = yystate29(yyarg1,yyarg3);
        case YYNTid(yyarg3) => yygoto = yystate16(yyarg3);
        case YYNTl_value(yyarg3) => yygoto = yystate17(yyarg3);
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate32(yyarg1: Var, yyarg3: Exp, yyarg6: Exp) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case _ => yynt = YYNTexp(yyrule32(yyarg1,yyarg3,yyarg6)); yygoto = 6
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate31(yyarg1: Var, yyarg3: Exp) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case TigerTokens.NIL() => yynt = YYNTexp(yyrule4()); yygoto = 0
      case TigerTokens.BREAK() => yynt = YYNTexp(yyrule6()); yygoto = 0
      case TigerTokens.WHILE() => yynext; yygoto = yystate3();
      case TigerTokens.LET() => yynext; yygoto = yystate4();
      case TigerTokens.ID(_) => yynt = YYNTid(yyrule47()); yygoto = 0
      case TigerTokens.IF() => yynext; yygoto = yystate7();
      case TigerTokens.PI() => yynext; yygoto = yystate8();
      case TigerTokens.LITERAL(_) => yynt = YYNTexp(yyrule5()); yygoto = 0
      case TigerTokens.NRO(_) => yynt = YYNTexp(yyrule2()); yygoto = 0
      case TigerTokens.FOR() => yynext; yygoto = yystate9();
      case TigerTokens.MENOS() => yynext; yygoto = yystate12();
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case YYNTexp(yyarg6) => yygoto = yystate32(yyarg1,yyarg3,yyarg6);
        case YYNTid(yyarg6) => yygoto = yystate16(yyarg6);
        case YYNTl_value(yyarg6) => yygoto = yystate17(yyarg6);
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate30(yyarg1: Var, yyarg3: Exp) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case TigerTokens.OF() => yynext; yygoto = yystate31(yyarg1,yyarg3);
      case _ => yynt = YYNTl_value(yyrule61(yyarg1,yyarg3)); yygoto = 4
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate38(yyarg1: Exp, yyarg3: Exp) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case TigerTokens.DIST() => yynt = YYNTerror("(nonassociative)");
      case TigerTokens.MAYIG() => yynt = YYNTerror("(nonassociative)");
      case TigerTokens.DIV() => yynext; yygoto = yystate14(yyarg3);
      case TigerTokens.MAYOR() => yynt = YYNTerror("(nonassociative)");
      case TigerTokens.MENOR() => yynt = YYNTerror("(nonassociative)");
      case TigerTokens.POR() => yynext; yygoto = yystate22(yyarg3);
      case TigerTokens.IGUAL() => yynt = YYNTerror("(nonassociative)");
      case TigerTokens.MAS() => yynext; yygoto = yystate24(yyarg3);
      case TigerTokens.MENOS() => yynext; yygoto = yystate26(yyarg3);
      case TigerTokens.MENIG() => yynt = YYNTerror("(nonassociative)");
      case _ => yynt = YYNTexp(yyrule15(yyarg1,yyarg3)); yygoto = 3
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate37(yyarg1: Exp) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case TigerTokens.NIL() => yynt = YYNTexp(yyrule4()); yygoto = 0
      case TigerTokens.BREAK() => yynt = YYNTexp(yyrule6()); yygoto = 0
      case TigerTokens.WHILE() => yynext; yygoto = yystate3();
      case TigerTokens.LET() => yynext; yygoto = yystate4();
      case TigerTokens.ID(_) => yynt = YYNTid(yyrule47()); yygoto = 0
      case TigerTokens.IF() => yynext; yygoto = yystate7();
      case TigerTokens.PI() => yynext; yygoto = yystate8();
      case TigerTokens.LITERAL(_) => yynt = YYNTexp(yyrule5()); yygoto = 0
      case TigerTokens.NRO(_) => yynt = YYNTexp(yyrule2()); yygoto = 0
      case TigerTokens.FOR() => yynext; yygoto = yystate9();
      case TigerTokens.MENOS() => yynext; yygoto = yystate12();
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case YYNTexp(yyarg3) => yygoto = yystate38(yyarg1,yyarg3);
        case YYNTid(yyarg3) => yygoto = yystate16(yyarg3);
        case YYNTl_value(yyarg3) => yygoto = yystate17(yyarg3);
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate40(yyarg1: Exp, yyarg3: Exp) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case TigerTokens.DIST() => yynt = YYNTerror("(nonassociative)");
      case TigerTokens.MAYIG() => yynt = YYNTerror("(nonassociative)");
      case TigerTokens.DIV() => yynext; yygoto = yystate14(yyarg3);
      case TigerTokens.MAYOR() => yynt = YYNTerror("(nonassociative)");
      case TigerTokens.MENOR() => yynt = YYNTerror("(nonassociative)");
      case TigerTokens.POR() => yynext; yygoto = yystate22(yyarg3);
      case TigerTokens.IGUAL() => yynt = YYNTerror("(nonassociative)");
      case TigerTokens.MAS() => yynext; yygoto = yystate24(yyarg3);
      case TigerTokens.MENOS() => yynext; yygoto = yystate26(yyarg3);
      case TigerTokens.MENIG() => yynt = YYNTerror("(nonassociative)");
      case _ => yynt = YYNTexp(yyrule13(yyarg1,yyarg3)); yygoto = 3
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate39(yyarg1: Exp) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case TigerTokens.NIL() => yynt = YYNTexp(yyrule4()); yygoto = 0
      case TigerTokens.BREAK() => yynt = YYNTexp(yyrule6()); yygoto = 0
      case TigerTokens.WHILE() => yynext; yygoto = yystate3();
      case TigerTokens.LET() => yynext; yygoto = yystate4();
      case TigerTokens.ID(_) => yynt = YYNTid(yyrule47()); yygoto = 0
      case TigerTokens.IF() => yynext; yygoto = yystate7();
      case TigerTokens.PI() => yynext; yygoto = yystate8();
      case TigerTokens.LITERAL(_) => yynt = YYNTexp(yyrule5()); yygoto = 0
      case TigerTokens.NRO(_) => yynt = YYNTexp(yyrule2()); yygoto = 0
      case TigerTokens.FOR() => yynext; yygoto = yystate9();
      case TigerTokens.MENOS() => yynext; yygoto = yystate12();
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case YYNTexp(yyarg3) => yygoto = yystate40(yyarg1,yyarg3);
        case YYNTid(yyarg3) => yygoto = yystate16(yyarg3);
        case YYNTl_value(yyarg3) => yygoto = yystate17(yyarg3);
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate42(yyarg1: Exp, yyarg3: Exp) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case TigerTokens.DIST() => yynt = YYNTerror("(nonassociative)");
      case TigerTokens.MAYIG() => yynt = YYNTerror("(nonassociative)");
      case TigerTokens.DIV() => yynext; yygoto = yystate14(yyarg3);
      case TigerTokens.MAYOR() => yynt = YYNTerror("(nonassociative)");
      case TigerTokens.MENOR() => yynt = YYNTerror("(nonassociative)");
      case TigerTokens.POR() => yynext; yygoto = yystate22(yyarg3);
      case TigerTokens.IGUAL() => yynt = YYNTerror("(nonassociative)");
      case TigerTokens.MAS() => yynext; yygoto = yystate24(yyarg3);
      case TigerTokens.MENOS() => yynext; yygoto = yystate26(yyarg3);
      case TigerTokens.MENIG() => yynt = YYNTerror("(nonassociative)");
      case _ => yynt = YYNTexp(yyrule12(yyarg1,yyarg3)); yygoto = 3
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate41(yyarg1: Exp) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case TigerTokens.NIL() => yynt = YYNTexp(yyrule4()); yygoto = 0
      case TigerTokens.BREAK() => yynt = YYNTexp(yyrule6()); yygoto = 0
      case TigerTokens.WHILE() => yynext; yygoto = yystate3();
      case TigerTokens.LET() => yynext; yygoto = yystate4();
      case TigerTokens.ID(_) => yynt = YYNTid(yyrule47()); yygoto = 0
      case TigerTokens.IF() => yynext; yygoto = yystate7();
      case TigerTokens.PI() => yynext; yygoto = yystate8();
      case TigerTokens.LITERAL(_) => yynt = YYNTexp(yyrule5()); yygoto = 0
      case TigerTokens.NRO(_) => yynt = YYNTexp(yyrule2()); yygoto = 0
      case TigerTokens.FOR() => yynext; yygoto = yystate9();
      case TigerTokens.MENOS() => yynext; yygoto = yystate12();
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case YYNTexp(yyarg3) => yygoto = yystate42(yyarg1,yyarg3);
        case YYNTid(yyarg3) => yygoto = yystate16(yyarg3);
        case YYNTl_value(yyarg3) => yygoto = yystate17(yyarg3);
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate44(yyarg1: Exp, yyarg3: Exp) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case TigerTokens.DIST() => yynt = YYNTerror("(nonassociative)");
      case TigerTokens.MAYIG() => yynt = YYNTerror("(nonassociative)");
      case TigerTokens.DIV() => yynext; yygoto = yystate14(yyarg3);
      case TigerTokens.MAYOR() => yynt = YYNTerror("(nonassociative)");
      case TigerTokens.MENOR() => yynt = YYNTerror("(nonassociative)");
      case TigerTokens.POR() => yynext; yygoto = yystate22(yyarg3);
      case TigerTokens.IGUAL() => yynt = YYNTerror("(nonassociative)");
      case TigerTokens.MAS() => yynext; yygoto = yystate24(yyarg3);
      case TigerTokens.MENOS() => yynext; yygoto = yystate26(yyarg3);
      case TigerTokens.MENIG() => yynt = YYNTerror("(nonassociative)");
      case _ => yynt = YYNTexp(yyrule14(yyarg1,yyarg3)); yygoto = 3
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate43(yyarg1: Exp) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case TigerTokens.NIL() => yynt = YYNTexp(yyrule4()); yygoto = 0
      case TigerTokens.BREAK() => yynt = YYNTexp(yyrule6()); yygoto = 0
      case TigerTokens.WHILE() => yynext; yygoto = yystate3();
      case TigerTokens.LET() => yynext; yygoto = yystate4();
      case TigerTokens.ID(_) => yynt = YYNTid(yyrule47()); yygoto = 0
      case TigerTokens.IF() => yynext; yygoto = yystate7();
      case TigerTokens.PI() => yynext; yygoto = yystate8();
      case TigerTokens.LITERAL(_) => yynt = YYNTexp(yyrule5()); yygoto = 0
      case TigerTokens.NRO(_) => yynt = YYNTexp(yyrule2()); yygoto = 0
      case TigerTokens.FOR() => yynext; yygoto = yystate9();
      case TigerTokens.MENOS() => yynext; yygoto = yystate12();
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case YYNTexp(yyarg3) => yygoto = yystate44(yyarg1,yyarg3);
        case YYNTid(yyarg3) => yygoto = yystate16(yyarg3);
        case YYNTl_value(yyarg3) => yygoto = yystate17(yyarg3);
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate36(yyarg1: Exp, yyarg3: Exp) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case TigerTokens.DIST() => yynext; yygoto = yystate20(yyarg3);
      case TigerTokens.MAYIG() => yynext; yygoto = yystate28(yyarg3);
      case TigerTokens.DIV() => yynext; yygoto = yystate14(yyarg3);
      case TigerTokens.MAYOR() => yynext; yygoto = yystate37(yyarg3);
      case TigerTokens.MENOR() => yynext; yygoto = yystate39(yyarg3);
      case TigerTokens.IGUAL() => yynext; yygoto = yystate41(yyarg3);
      case TigerTokens.POR() => yynext; yygoto = yystate22(yyarg3);
      case TigerTokens.MENIG() => yynext; yygoto = yystate43(yyarg3);
      case TigerTokens.MAS() => yynext; yygoto = yystate24(yyarg3);
      case TigerTokens.MENOS() => yynext; yygoto = yystate26(yyarg3);
      case _ => yynt = YYNTexp(yyrule11(yyarg1,yyarg3)); yygoto = 3
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate35(yyarg1: Exp) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case TigerTokens.NIL() => yynt = YYNTexp(yyrule4()); yygoto = 0
      case TigerTokens.BREAK() => yynt = YYNTexp(yyrule6()); yygoto = 0
      case TigerTokens.WHILE() => yynext; yygoto = yystate3();
      case TigerTokens.LET() => yynext; yygoto = yystate4();
      case TigerTokens.ID(_) => yynt = YYNTid(yyrule47()); yygoto = 0
      case TigerTokens.IF() => yynext; yygoto = yystate7();
      case TigerTokens.PI() => yynext; yygoto = yystate8();
      case TigerTokens.LITERAL(_) => yynt = YYNTexp(yyrule5()); yygoto = 0
      case TigerTokens.NRO(_) => yynt = YYNTexp(yyrule2()); yygoto = 0
      case TigerTokens.FOR() => yynext; yygoto = yystate9();
      case TigerTokens.MENOS() => yynext; yygoto = yystate12();
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case YYNTexp(yyarg3) => yygoto = yystate36(yyarg1,yyarg3);
        case YYNTid(yyarg3) => yygoto = yystate16(yyarg3);
        case YYNTl_value(yyarg3) => yygoto = yystate17(yyarg3);
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate34(yyarg1: Exp, yyarg3: Exp) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case TigerTokens.DIST() => yynext; yygoto = yystate20(yyarg3);
      case TigerTokens.MAYIG() => yynext; yygoto = yystate28(yyarg3);
      case TigerTokens.DIV() => yynext; yygoto = yystate14(yyarg3);
      case TigerTokens.AMPER() => yynext; yygoto = yystate35(yyarg3);
      case TigerTokens.MAYOR() => yynext; yygoto = yystate37(yyarg3);
      case TigerTokens.MENOR() => yynext; yygoto = yystate39(yyarg3);
      case TigerTokens.IGUAL() => yynext; yygoto = yystate41(yyarg3);
      case TigerTokens.POR() => yynext; yygoto = yystate22(yyarg3);
      case TigerTokens.MENIG() => yynext; yygoto = yystate43(yyarg3);
      case TigerTokens.MAS() => yynext; yygoto = yystate24(yyarg3);
      case TigerTokens.MENOS() => yynext; yygoto = yystate26(yyarg3);
      case _ => yynt = YYNTexp(yyrule10(yyarg1,yyarg3)); yygoto = 3
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate33(yyarg1: Exp) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case TigerTokens.NIL() => yynt = YYNTexp(yyrule4()); yygoto = 0
      case TigerTokens.BREAK() => yynt = YYNTexp(yyrule6()); yygoto = 0
      case TigerTokens.WHILE() => yynext; yygoto = yystate3();
      case TigerTokens.LET() => yynext; yygoto = yystate4();
      case TigerTokens.ID(_) => yynt = YYNTid(yyrule47()); yygoto = 0
      case TigerTokens.IF() => yynext; yygoto = yystate7();
      case TigerTokens.PI() => yynext; yygoto = yystate8();
      case TigerTokens.LITERAL(_) => yynt = YYNTexp(yyrule5()); yygoto = 0
      case TigerTokens.NRO(_) => yynt = YYNTexp(yyrule2()); yygoto = 0
      case TigerTokens.FOR() => yynext; yygoto = yystate9();
      case TigerTokens.MENOS() => yynext; yygoto = yystate12();
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case YYNTexp(yyarg3) => yygoto = yystate34(yyarg1,yyarg3);
        case YYNTid(yyarg3) => yygoto = yystate16(yyarg3);
        case YYNTl_value(yyarg3) => yygoto = yystate17(yyarg3);
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate19(yyarg1: Var, yyarg3: Exp) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case TigerTokens.DIST() => yynext; yygoto = yystate20(yyarg3);
      case TigerTokens.MAYIG() => yynext; yygoto = yystate28(yyarg3);
      case TigerTokens.CD() => yynext; yygoto = yystate30(yyarg1,yyarg3);
      case TigerTokens.PIPE() => yynext; yygoto = yystate33(yyarg3);
      case TigerTokens.DIV() => yynext; yygoto = yystate14(yyarg3);
      case TigerTokens.AMPER() => yynext; yygoto = yystate35(yyarg3);
      case TigerTokens.MAYOR() => yynext; yygoto = yystate37(yyarg3);
      case TigerTokens.MENOR() => yynext; yygoto = yystate39(yyarg3);
      case TigerTokens.POR() => yynext; yygoto = yystate22(yyarg3);
      case TigerTokens.IGUAL() => yynext; yygoto = yystate41(yyarg3);
      case TigerTokens.MENIG() => yynext; yygoto = yystate43(yyarg3);
      case TigerTokens.MAS() => yynext; yygoto = yystate24(yyarg3);
      case TigerTokens.MENOS() => yynext; yygoto = yystate26(yyarg3);
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate18(yyarg1: Var) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case TigerTokens.NIL() => yynt = YYNTexp(yyrule4()); yygoto = 0
      case TigerTokens.BREAK() => yynt = YYNTexp(yyrule6()); yygoto = 0
      case TigerTokens.WHILE() => yynext; yygoto = yystate3();
      case TigerTokens.LET() => yynext; yygoto = yystate4();
      case TigerTokens.ID(_) => yynt = YYNTid(yyrule47()); yygoto = 0
      case TigerTokens.IF() => yynext; yygoto = yystate7();
      case TigerTokens.PI() => yynext; yygoto = yystate8();
      case TigerTokens.LITERAL(_) => yynt = YYNTexp(yyrule5()); yygoto = 0
      case TigerTokens.NRO(_) => yynt = YYNTexp(yyrule2()); yygoto = 0
      case TigerTokens.FOR() => yynext; yygoto = yystate9();
      case TigerTokens.MENOS() => yynext; yygoto = yystate12();
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case YYNTexp(yyarg3) => yygoto = yystate19(yyarg1,yyarg3);
        case YYNTid(yyarg3) => yygoto = yystate16(yyarg3);
        case YYNTl_value(yyarg3) => yygoto = yystate17(yyarg3);
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate46(yyarg1: Var, yyarg3: Exp) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case TigerTokens.DIST() => yynext; yygoto = yystate20(yyarg3);
      case TigerTokens.MAYIG() => yynext; yygoto = yystate28(yyarg3);
      case TigerTokens.PIPE() => yynext; yygoto = yystate33(yyarg3);
      case TigerTokens.DIV() => yynext; yygoto = yystate14(yyarg3);
      case TigerTokens.AMPER() => yynext; yygoto = yystate35(yyarg3);
      case TigerTokens.MAYOR() => yynext; yygoto = yystate37(yyarg3);
      case TigerTokens.MENOR() => yynext; yygoto = yystate39(yyarg3);
      case TigerTokens.IGUAL() => yynext; yygoto = yystate41(yyarg3);
      case TigerTokens.POR() => yynext; yygoto = yystate22(yyarg3);
      case TigerTokens.MENIG() => yynext; yygoto = yystate43(yyarg3);
      case TigerTokens.MAS() => yynext; yygoto = yystate24(yyarg3);
      case TigerTokens.MENOS() => yynext; yygoto = yystate26(yyarg3);
      case _ => yynt = YYNTexp(yyrule8(yyarg1,yyarg3)); yygoto = 3
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate45(yyarg1: Var) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case TigerTokens.NIL() => yynt = YYNTexp(yyrule4()); yygoto = 0
      case TigerTokens.BREAK() => yynt = YYNTexp(yyrule6()); yygoto = 0
      case TigerTokens.WHILE() => yynext; yygoto = yystate3();
      case TigerTokens.LET() => yynext; yygoto = yystate4();
      case TigerTokens.ID(_) => yynt = YYNTid(yyrule47()); yygoto = 0
      case TigerTokens.IF() => yynext; yygoto = yystate7();
      case TigerTokens.PI() => yynext; yygoto = yystate8();
      case TigerTokens.LITERAL(_) => yynt = YYNTexp(yyrule5()); yygoto = 0
      case TigerTokens.NRO(_) => yynt = YYNTexp(yyrule2()); yygoto = 0
      case TigerTokens.FOR() => yynext; yygoto = yystate9();
      case TigerTokens.MENOS() => yynext; yygoto = yystate12();
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case YYNTexp(yyarg3) => yygoto = yystate46(yyarg1,yyarg3);
        case YYNTid(yyarg3) => yygoto = yystate16(yyarg3);
        case YYNTl_value(yyarg3) => yygoto = yystate17(yyarg3);
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate17(yyarg1: Var) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case TigerTokens.PTO() => yynt = YYNTl_value(yyrule60(yyarg1)); yygoto = 1
      case TigerTokens.CI() => yynext; yygoto = yystate18(yyarg1);
      case TigerTokens.DOSPIG() => yynext; yygoto = yystate45(yyarg1);
      case _ => yynt = YYNTexp(yyrule7(yyarg1)); yygoto = 1
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate14(yyarg1: Exp) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case TigerTokens.NIL() => yynt = YYNTexp(yyrule4()); yygoto = 0
      case TigerTokens.BREAK() => yynt = YYNTexp(yyrule6()); yygoto = 0
      case TigerTokens.WHILE() => yynext; yygoto = yystate3();
      case TigerTokens.LET() => yynext; yygoto = yystate4();
      case TigerTokens.ID(_) => yynt = YYNTid(yyrule47()); yygoto = 0
      case TigerTokens.IF() => yynext; yygoto = yystate7();
      case TigerTokens.PI() => yynext; yygoto = yystate8();
      case TigerTokens.LITERAL(_) => yynt = YYNTexp(yyrule5()); yygoto = 0
      case TigerTokens.NRO(_) => yynt = YYNTexp(yyrule2()); yygoto = 0
      case TigerTokens.FOR() => yynext; yygoto = yystate9();
      case TigerTokens.MENOS() => yynext; yygoto = yystate12();
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case YYNTexp(yyarg3) => yygoto = yystate15(yyarg1,yyarg3);
        case YYNTid(yyarg3) => yygoto = yystate16(yyarg3);
        case YYNTl_value(yyarg3) => yygoto = yystate17(yyarg3);
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate13(yyarg2: Exp) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case TigerTokens.DIV() => yynext; yygoto = yystate14(yyarg2);
      case TigerTokens.POR() => yynext; yygoto = yystate22(yyarg2);
      case _ => yynt = YYNTexp(yyrule22(yyarg2)); yygoto = 2
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate12() : Int = {
    var yygoto : Int = 0;
    yycur match {
      case TigerTokens.NIL() => yynt = YYNTexp(yyrule4()); yygoto = 0
      case TigerTokens.BREAK() => yynt = YYNTexp(yyrule6()); yygoto = 0
      case TigerTokens.WHILE() => yynext; yygoto = yystate3();
      case TigerTokens.LET() => yynext; yygoto = yystate4();
      case TigerTokens.ID(_) => yynt = YYNTid(yyrule47()); yygoto = 0
      case TigerTokens.IF() => yynext; yygoto = yystate7();
      case TigerTokens.PI() => yynext; yygoto = yystate8();
      case TigerTokens.LITERAL(_) => yynt = YYNTexp(yyrule5()); yygoto = 0
      case TigerTokens.NRO(_) => yynt = YYNTexp(yyrule2()); yygoto = 0
      case TigerTokens.FOR() => yynext; yygoto = yystate9();
      case TigerTokens.MENOS() => yynext; yygoto = yystate12();
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case YYNTexp(yyarg2) => yygoto = yystate13(yyarg2);
        case YYNTid(yyarg2) => yygoto = yystate16(yyarg2);
        case YYNTl_value(yyarg2) => yygoto = yystate17(yyarg2);
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate51(yyarg2: String, yyarg4: Exp, yyarg6: Exp, yyarg8: Exp) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case _ => yynt = YYNTexp(yyrule28(yyarg2,yyarg4,yyarg6,yyarg8)); yygoto = 8
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate50(yyarg2: String, yyarg4: Exp, yyarg6: Exp) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case TigerTokens.NIL() => yynt = YYNTexp(yyrule4()); yygoto = 0
      case TigerTokens.BREAK() => yynt = YYNTexp(yyrule6()); yygoto = 0
      case TigerTokens.WHILE() => yynext; yygoto = yystate3();
      case TigerTokens.LET() => yynext; yygoto = yystate4();
      case TigerTokens.ID(_) => yynt = YYNTid(yyrule47()); yygoto = 0
      case TigerTokens.IF() => yynext; yygoto = yystate7();
      case TigerTokens.PI() => yynext; yygoto = yystate8();
      case TigerTokens.LITERAL(_) => yynt = YYNTexp(yyrule5()); yygoto = 0
      case TigerTokens.NRO(_) => yynt = YYNTexp(yyrule2()); yygoto = 0
      case TigerTokens.FOR() => yynext; yygoto = yystate9();
      case TigerTokens.MENOS() => yynext; yygoto = yystate12();
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case YYNTexp(yyarg8) => yygoto = yystate51(yyarg2,yyarg4,yyarg6,yyarg8);
        case YYNTid(yyarg8) => yygoto = yystate16(yyarg8);
        case YYNTl_value(yyarg8) => yygoto = yystate17(yyarg8);
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate49(yyarg2: String, yyarg4: Exp, yyarg6: Exp) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case TigerTokens.DIST() => yynext; yygoto = yystate20(yyarg6);
      case TigerTokens.DO() => yynext; yygoto = yystate50(yyarg2,yyarg4,yyarg6);
      case TigerTokens.MAYIG() => yynext; yygoto = yystate28(yyarg6);
      case TigerTokens.PIPE() => yynext; yygoto = yystate33(yyarg6);
      case TigerTokens.DIV() => yynext; yygoto = yystate14(yyarg6);
      case TigerTokens.AMPER() => yynext; yygoto = yystate35(yyarg6);
      case TigerTokens.MAYOR() => yynext; yygoto = yystate37(yyarg6);
      case TigerTokens.MENOR() => yynext; yygoto = yystate39(yyarg6);
      case TigerTokens.POR() => yynext; yygoto = yystate22(yyarg6);
      case TigerTokens.IGUAL() => yynext; yygoto = yystate41(yyarg6);
      case TigerTokens.MENIG() => yynext; yygoto = yystate43(yyarg6);
      case TigerTokens.MAS() => yynext; yygoto = yystate24(yyarg6);
      case TigerTokens.MENOS() => yynext; yygoto = yystate26(yyarg6);
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate48(yyarg2: String, yyarg4: Exp) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case TigerTokens.NIL() => yynt = YYNTexp(yyrule4()); yygoto = 0
      case TigerTokens.BREAK() => yynt = YYNTexp(yyrule6()); yygoto = 0
      case TigerTokens.WHILE() => yynext; yygoto = yystate3();
      case TigerTokens.LET() => yynext; yygoto = yystate4();
      case TigerTokens.ID(_) => yynt = YYNTid(yyrule47()); yygoto = 0
      case TigerTokens.IF() => yynext; yygoto = yystate7();
      case TigerTokens.PI() => yynext; yygoto = yystate8();
      case TigerTokens.LITERAL(_) => yynt = YYNTexp(yyrule5()); yygoto = 0
      case TigerTokens.NRO(_) => yynt = YYNTexp(yyrule2()); yygoto = 0
      case TigerTokens.FOR() => yynext; yygoto = yystate9();
      case TigerTokens.MENOS() => yynext; yygoto = yystate12();
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case YYNTexp(yyarg6) => yygoto = yystate49(yyarg2,yyarg4,yyarg6);
        case YYNTid(yyarg6) => yygoto = yystate16(yyarg6);
        case YYNTl_value(yyarg6) => yygoto = yystate17(yyarg6);
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate47(yyarg2: String, yyarg4: Exp) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case TigerTokens.DIST() => yynext; yygoto = yystate20(yyarg4);
      case TigerTokens.MAYIG() => yynext; yygoto = yystate28(yyarg4);
      case TigerTokens.PIPE() => yynext; yygoto = yystate33(yyarg4);
      case TigerTokens.DIV() => yynext; yygoto = yystate14(yyarg4);
      case TigerTokens.AMPER() => yynext; yygoto = yystate35(yyarg4);
      case TigerTokens.MAYOR() => yynext; yygoto = yystate37(yyarg4);
      case TigerTokens.MENOR() => yynext; yygoto = yystate39(yyarg4);
      case TigerTokens.POR() => yynext; yygoto = yystate22(yyarg4);
      case TigerTokens.IGUAL() => yynext; yygoto = yystate41(yyarg4);
      case TigerTokens.TO() => yynext; yygoto = yystate48(yyarg2,yyarg4);
      case TigerTokens.MENIG() => yynext; yygoto = yystate43(yyarg4);
      case TigerTokens.MAS() => yynext; yygoto = yystate24(yyarg4);
      case TigerTokens.MENOS() => yynext; yygoto = yystate26(yyarg4);
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate11(yyarg2: String) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case TigerTokens.NIL() => yynt = YYNTexp(yyrule4()); yygoto = 0
      case TigerTokens.BREAK() => yynt = YYNTexp(yyrule6()); yygoto = 0
      case TigerTokens.WHILE() => yynext; yygoto = yystate3();
      case TigerTokens.LET() => yynext; yygoto = yystate4();
      case TigerTokens.ID(_) => yynt = YYNTid(yyrule47()); yygoto = 0
      case TigerTokens.IF() => yynext; yygoto = yystate7();
      case TigerTokens.PI() => yynext; yygoto = yystate8();
      case TigerTokens.LITERAL(_) => yynt = YYNTexp(yyrule5()); yygoto = 0
      case TigerTokens.NRO(_) => yynt = YYNTexp(yyrule2()); yygoto = 0
      case TigerTokens.FOR() => yynext; yygoto = yystate9();
      case TigerTokens.MENOS() => yynext; yygoto = yystate12();
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case YYNTexp(yyarg4) => yygoto = yystate47(yyarg2,yyarg4);
        case YYNTid(yyarg4) => yygoto = yystate16(yyarg4);
        case YYNTl_value(yyarg4) => yygoto = yystate17(yyarg4);
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate10(yyarg2: String) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case TigerTokens.DOSPIG() => yynext; yygoto = yystate11(yyarg2);
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate9() : Int = {
    var yygoto : Int = 0;
    yycur match {
      case TigerTokens.ID(_) => yynt = YYNTid(yyrule47()); yygoto = 0
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case YYNTid(yyarg2) => yygoto = yystate10(yyarg2);
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate52(yyarg2: Exp) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case TigerTokens.DIST() => yynext; yygoto = yystate20(yyarg2);
      case TigerTokens.MAYIG() => yynext; yygoto = yystate28(yyarg2);
      case TigerTokens.PD() => yynt = YYNTexp(yyrule23(yyarg2)); yygoto = 2
      case TigerTokens.PIPE() => yynext; yygoto = yystate33(yyarg2);
      case TigerTokens.DIV() => yynext; yygoto = yystate14(yyarg2);
      case TigerTokens.AMPER() => yynext; yygoto = yystate35(yyarg2);
      case TigerTokens.MAYOR() => yynext; yygoto = yystate37(yyarg2);
      case TigerTokens.PCOMA() => yynt = YYNTexp(yyrule9(yyarg2)); yygoto = 2
      case TigerTokens.MENOR() => yynext; yygoto = yystate39(yyarg2);
      case TigerTokens.POR() => yynext; yygoto = yystate22(yyarg2);
      case TigerTokens.IGUAL() => yynext; yygoto = yystate41(yyarg2);
      case TigerTokens.MENIG() => yynext; yygoto = yystate43(yyarg2);
      case TigerTokens.MAS() => yynext; yygoto = yystate24(yyarg2);
      case TigerTokens.MENOS() => yynext; yygoto = yystate26(yyarg2);
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate8() : Int = {
    var yygoto : Int = 0;
    yycur match {
      case TigerTokens.NIL() => yynt = YYNTexp(yyrule4()); yygoto = 0
      case TigerTokens.BREAK() => yynt = YYNTexp(yyrule6()); yygoto = 0
      case TigerTokens.WHILE() => yynext; yygoto = yystate3();
      case TigerTokens.PD() => yynt = YYNTexp(yyrule3()); yygoto = 1
      case TigerTokens.LET() => yynext; yygoto = yystate4();
      case TigerTokens.ID(_) => yynt = YYNTid(yyrule47()); yygoto = 0
      case TigerTokens.IF() => yynext; yygoto = yystate7();
      case TigerTokens.PI() => yynext; yygoto = yystate8();
      case TigerTokens.LITERAL(_) => yynt = YYNTexp(yyrule5()); yygoto = 0
      case TigerTokens.NRO(_) => yynt = YYNTexp(yyrule2()); yygoto = 0
      case TigerTokens.FOR() => yynext; yygoto = yystate9();
      case TigerTokens.MENOS() => yynext; yygoto = yystate12();
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case YYNTexp(yyarg2) => yygoto = yystate52(yyarg2);
        case YYNTid(yyarg2) => yygoto = yystate16(yyarg2);
        case YYNTl_value(yyarg2) => yygoto = yystate17(yyarg2);
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate57(yyarg2: Exp, yyarg4: Exp, yyarg6: Exp) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case TigerTokens.DIST() => yynext; yygoto = yystate20(yyarg6);
      case TigerTokens.MAYIG() => yynext; yygoto = yystate28(yyarg6);
      case TigerTokens.PIPE() => yynext; yygoto = yystate33(yyarg6);
      case TigerTokens.DIV() => yynext; yygoto = yystate14(yyarg6);
      case TigerTokens.AMPER() => yynext; yygoto = yystate35(yyarg6);
      case TigerTokens.MAYOR() => yynext; yygoto = yystate37(yyarg6);
      case TigerTokens.MENOR() => yynext; yygoto = yystate39(yyarg6);
      case TigerTokens.IGUAL() => yynext; yygoto = yystate41(yyarg6);
      case TigerTokens.POR() => yynext; yygoto = yystate22(yyarg6);
      case TigerTokens.MENIG() => yynext; yygoto = yystate43(yyarg6);
      case TigerTokens.MAS() => yynext; yygoto = yystate24(yyarg6);
      case TigerTokens.MENOS() => yynext; yygoto = yystate26(yyarg6);
      case _ => yynt = YYNTexp(yyrule26(yyarg2,yyarg4,yyarg6)); yygoto = 6
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate56(yyarg2: Exp, yyarg4: Exp) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case TigerTokens.NIL() => yynt = YYNTexp(yyrule4()); yygoto = 0
      case TigerTokens.BREAK() => yynt = YYNTexp(yyrule6()); yygoto = 0
      case TigerTokens.WHILE() => yynext; yygoto = yystate3();
      case TigerTokens.LET() => yynext; yygoto = yystate4();
      case TigerTokens.ID(_) => yynt = YYNTid(yyrule47()); yygoto = 0
      case TigerTokens.IF() => yynext; yygoto = yystate7();
      case TigerTokens.PI() => yynext; yygoto = yystate8();
      case TigerTokens.LITERAL(_) => yynt = YYNTexp(yyrule5()); yygoto = 0
      case TigerTokens.NRO(_) => yynt = YYNTexp(yyrule2()); yygoto = 0
      case TigerTokens.FOR() => yynext; yygoto = yystate9();
      case TigerTokens.MENOS() => yynext; yygoto = yystate12();
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case YYNTexp(yyarg6) => yygoto = yystate57(yyarg2,yyarg4,yyarg6);
        case YYNTid(yyarg6) => yygoto = yystate16(yyarg6);
        case YYNTl_value(yyarg6) => yygoto = yystate17(yyarg6);
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate55(yyarg2: Exp, yyarg4: Exp) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case TigerTokens.DIST() => yynext; yygoto = yystate20(yyarg4);
      case TigerTokens.MAYIG() => yynext; yygoto = yystate28(yyarg4);
      case TigerTokens.PIPE() => yynext; yygoto = yystate33(yyarg4);
      case TigerTokens.ELSE() => yynext; yygoto = yystate56(yyarg2,yyarg4);
      case TigerTokens.DIV() => yynext; yygoto = yystate14(yyarg4);
      case TigerTokens.AMPER() => yynext; yygoto = yystate35(yyarg4);
      case TigerTokens.MAYOR() => yynext; yygoto = yystate37(yyarg4);
      case TigerTokens.MENOR() => yynext; yygoto = yystate39(yyarg4);
      case TigerTokens.POR() => yynext; yygoto = yystate22(yyarg4);
      case TigerTokens.IGUAL() => yynext; yygoto = yystate41(yyarg4);
      case TigerTokens.MENIG() => yynext; yygoto = yystate43(yyarg4);
      case TigerTokens.MAS() => yynext; yygoto = yystate24(yyarg4);
      case TigerTokens.MENOS() => yynext; yygoto = yystate26(yyarg4);
      case _ => yynt = YYNTexp(yyrule25(yyarg2,yyarg4)); yygoto = 4
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate54(yyarg2: Exp) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case TigerTokens.NIL() => yynt = YYNTexp(yyrule4()); yygoto = 0
      case TigerTokens.BREAK() => yynt = YYNTexp(yyrule6()); yygoto = 0
      case TigerTokens.WHILE() => yynext; yygoto = yystate3();
      case TigerTokens.LET() => yynext; yygoto = yystate4();
      case TigerTokens.ID(_) => yynt = YYNTid(yyrule47()); yygoto = 0
      case TigerTokens.IF() => yynext; yygoto = yystate7();
      case TigerTokens.PI() => yynext; yygoto = yystate8();
      case TigerTokens.LITERAL(_) => yynt = YYNTexp(yyrule5()); yygoto = 0
      case TigerTokens.NRO(_) => yynt = YYNTexp(yyrule2()); yygoto = 0
      case TigerTokens.FOR() => yynext; yygoto = yystate9();
      case TigerTokens.MENOS() => yynext; yygoto = yystate12();
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case YYNTexp(yyarg4) => yygoto = yystate55(yyarg2,yyarg4);
        case YYNTid(yyarg4) => yygoto = yystate16(yyarg4);
        case YYNTl_value(yyarg4) => yygoto = yystate17(yyarg4);
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate53(yyarg2: Exp) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case TigerTokens.DIST() => yynext; yygoto = yystate20(yyarg2);
      case TigerTokens.MAYIG() => yynext; yygoto = yystate28(yyarg2);
      case TigerTokens.PIPE() => yynext; yygoto = yystate33(yyarg2);
      case TigerTokens.DIV() => yynext; yygoto = yystate14(yyarg2);
      case TigerTokens.THEN() => yynext; yygoto = yystate54(yyarg2);
      case TigerTokens.AMPER() => yynext; yygoto = yystate35(yyarg2);
      case TigerTokens.MAYOR() => yynext; yygoto = yystate37(yyarg2);
      case TigerTokens.MENOR() => yynext; yygoto = yystate39(yyarg2);
      case TigerTokens.POR() => yynext; yygoto = yystate22(yyarg2);
      case TigerTokens.IGUAL() => yynext; yygoto = yystate41(yyarg2);
      case TigerTokens.MENIG() => yynext; yygoto = yystate43(yyarg2);
      case TigerTokens.MAS() => yynext; yygoto = yystate24(yyarg2);
      case TigerTokens.MENOS() => yynext; yygoto = yystate26(yyarg2);
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate7() : Int = {
    var yygoto : Int = 0;
    yycur match {
      case TigerTokens.NIL() => yynt = YYNTexp(yyrule4()); yygoto = 0
      case TigerTokens.BREAK() => yynt = YYNTexp(yyrule6()); yygoto = 0
      case TigerTokens.WHILE() => yynext; yygoto = yystate3();
      case TigerTokens.LET() => yynext; yygoto = yystate4();
      case TigerTokens.ID(_) => yynt = YYNTid(yyrule47()); yygoto = 0
      case TigerTokens.IF() => yynext; yygoto = yystate7();
      case TigerTokens.PI() => yynext; yygoto = yystate8();
      case TigerTokens.LITERAL(_) => yynt = YYNTexp(yyrule5()); yygoto = 0
      case TigerTokens.NRO(_) => yynt = YYNTexp(yyrule2()); yygoto = 0
      case TigerTokens.FOR() => yynext; yygoto = yystate9();
      case TigerTokens.MENOS() => yynext; yygoto = yystate12();
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case YYNTexp(yyarg2) => yygoto = yystate53(yyarg2);
        case YYNTid(yyarg2) => yygoto = yystate16(yyarg2);
        case YYNTl_value(yyarg2) => yygoto = yystate17(yyarg2);
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate58(yyarg2: List[Dec], yyarg4: Exp) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case TigerTokens.DIST() => yynext; yygoto = yystate20(yyarg4);
      case TigerTokens.MAYIG() => yynext; yygoto = yystate28(yyarg4);
      case TigerTokens.PIPE() => yynext; yygoto = yystate33(yyarg4);
      case TigerTokens.DIV() => yynext; yygoto = yystate14(yyarg4);
      case TigerTokens.AMPER() => yynext; yygoto = yystate35(yyarg4);
      case TigerTokens.MAYOR() => yynext; yygoto = yystate37(yyarg4);
      case TigerTokens.END() => yynt = YYNTexp(yyrule30(yyarg2,yyarg4)); yygoto = 4
      case TigerTokens.PCOMA() => yynt = YYNTexp(yyrule31(yyarg2,yyarg4)); yygoto = 4
      case TigerTokens.MENOR() => yynext; yygoto = yystate39(yyarg4);
      case TigerTokens.POR() => yynext; yygoto = yystate22(yyarg4);
      case TigerTokens.IGUAL() => yynext; yygoto = yystate41(yyarg4);
      case TigerTokens.MENIG() => yynext; yygoto = yystate43(yyarg4);
      case TigerTokens.MAS() => yynext; yygoto = yystate24(yyarg4);
      case TigerTokens.MENOS() => yynext; yygoto = yystate26(yyarg4);
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate6(yyarg2: List[Dec]) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case TigerTokens.NIL() => yynt = YYNTexp(yyrule4()); yygoto = 0
      case TigerTokens.BREAK() => yynt = YYNTexp(yyrule6()); yygoto = 0
      case TigerTokens.WHILE() => yynext; yygoto = yystate3();
      case TigerTokens.LET() => yynext; yygoto = yystate4();
      case TigerTokens.ID(_) => yynt = YYNTid(yyrule47()); yygoto = 0
      case TigerTokens.END() => yynt = YYNTexp(yyrule29(yyarg2)); yygoto = 3
      case TigerTokens.IF() => yynext; yygoto = yystate7();
      case TigerTokens.PI() => yynext; yygoto = yystate8();
      case TigerTokens.LITERAL(_) => yynt = YYNTexp(yyrule5()); yygoto = 0
      case TigerTokens.NRO(_) => yynt = YYNTexp(yyrule2()); yygoto = 0
      case TigerTokens.FOR() => yynext; yygoto = yystate9();
      case TigerTokens.MENOS() => yynext; yygoto = yystate12();
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case YYNTexp(yyarg4) => yygoto = yystate58(yyarg2,yyarg4);
        case YYNTid(yyarg4) => yygoto = yystate16(yyarg4);
        case YYNTl_value(yyarg4) => yygoto = yystate17(yyarg4);
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate5(yyarg2: List[Dec]) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case TigerTokens.IN() => yynext; yygoto = yystate6(yyarg2);
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate4() : Int = {
    var yygoto : Int = 0;
    yycur match {
      case TigerTokens.FUNCTION() => yynt = YYNTdecs(yyrule39()); yygoto = 0
      case TigerTokens.TYPE() => yynt = YYNTdecs(yyrule39()); yygoto = 0
      case TigerTokens.VAR() => yynt = YYNTdecs(yyrule39()); yygoto = 0
      case _ => yynt = YYNTdecs(yyrule40()); yygoto = 0
    }
    while (yygoto == 0) {
      yynt match {
        case YYNTdecs(yyarg2) => yygoto = yystate5(yyarg2);
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate61(yyarg2: Exp, yyarg4: Exp) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case _ => yynt = YYNTexp(yyrule27(yyarg2,yyarg4)); yygoto = 4
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate60(yyarg2: Exp) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case TigerTokens.NIL() => yynt = YYNTexp(yyrule4()); yygoto = 0
      case TigerTokens.BREAK() => yynt = YYNTexp(yyrule6()); yygoto = 0
      case TigerTokens.WHILE() => yynext; yygoto = yystate3();
      case TigerTokens.LET() => yynext; yygoto = yystate4();
      case TigerTokens.ID(_) => yynt = YYNTid(yyrule47()); yygoto = 0
      case TigerTokens.IF() => yynext; yygoto = yystate7();
      case TigerTokens.PI() => yynext; yygoto = yystate8();
      case TigerTokens.LITERAL(_) => yynt = YYNTexp(yyrule5()); yygoto = 0
      case TigerTokens.NRO(_) => yynt = YYNTexp(yyrule2()); yygoto = 0
      case TigerTokens.FOR() => yynext; yygoto = yystate9();
      case TigerTokens.MENOS() => yynext; yygoto = yystate12();
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case YYNTexp(yyarg4) => yygoto = yystate61(yyarg2,yyarg4);
        case YYNTid(yyarg4) => yygoto = yystate16(yyarg4);
        case YYNTl_value(yyarg4) => yygoto = yystate17(yyarg4);
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate59(yyarg2: Exp) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case TigerTokens.DIST() => yynext; yygoto = yystate20(yyarg2);
      case TigerTokens.DO() => yynext; yygoto = yystate60(yyarg2);
      case TigerTokens.MAYIG() => yynext; yygoto = yystate28(yyarg2);
      case TigerTokens.PIPE() => yynext; yygoto = yystate33(yyarg2);
      case TigerTokens.DIV() => yynext; yygoto = yystate14(yyarg2);
      case TigerTokens.AMPER() => yynext; yygoto = yystate35(yyarg2);
      case TigerTokens.MAYOR() => yynext; yygoto = yystate37(yyarg2);
      case TigerTokens.MENOR() => yynext; yygoto = yystate39(yyarg2);
      case TigerTokens.POR() => yynext; yygoto = yystate22(yyarg2);
      case TigerTokens.IGUAL() => yynext; yygoto = yystate41(yyarg2);
      case TigerTokens.MENIG() => yynext; yygoto = yystate43(yyarg2);
      case TigerTokens.MAS() => yynext; yygoto = yystate24(yyarg2);
      case TigerTokens.MENOS() => yynext; yygoto = yystate26(yyarg2);
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate3() : Int = {
    var yygoto : Int = 0;
    yycur match {
      case TigerTokens.NIL() => yynt = YYNTexp(yyrule4()); yygoto = 0
      case TigerTokens.BREAK() => yynt = YYNTexp(yyrule6()); yygoto = 0
      case TigerTokens.WHILE() => yynext; yygoto = yystate3();
      case TigerTokens.LET() => yynext; yygoto = yystate4();
      case TigerTokens.ID(_) => yynt = YYNTid(yyrule47()); yygoto = 0
      case TigerTokens.IF() => yynext; yygoto = yystate7();
      case TigerTokens.PI() => yynext; yygoto = yystate8();
      case TigerTokens.LITERAL(_) => yynt = YYNTexp(yyrule5()); yygoto = 0
      case TigerTokens.NRO(_) => yynt = YYNTexp(yyrule2()); yygoto = 0
      case TigerTokens.FOR() => yynext; yygoto = yystate9();
      case TigerTokens.MENOS() => yynext; yygoto = yystate12();
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case YYNTexp(yyarg2) => yygoto = yystate59(yyarg2);
        case YYNTid(yyarg2) => yygoto = yystate16(yyarg2);
        case YYNTl_value(yyarg2) => yygoto = yystate17(yyarg2);
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate62(yyarg1: Exp) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case TigerTokens.DIST() => yynext; yygoto = yystate20(yyarg1);
      case TigerTokens.MAYIG() => yynext; yygoto = yystate28(yyarg1);
      case TigerTokens.PIPE() => yynext; yygoto = yystate33(yyarg1);
      case TigerTokens.DIV() => yynext; yygoto = yystate14(yyarg1);
      case TigerTokens.YYEOF() => yynt = YYNTexp(yyarg1); yygoto = 2;
      case TigerTokens.AMPER() => yynext; yygoto = yystate35(yyarg1);
      case TigerTokens.MAYOR() => yynext; yygoto = yystate37(yyarg1);
      case TigerTokens.MENOR() => yynext; yygoto = yystate39(yyarg1);
      case TigerTokens.POR() => yynext; yygoto = yystate22(yyarg1);
      case TigerTokens.IGUAL() => yynext; yygoto = yystate41(yyarg1);
      case TigerTokens.MENIG() => yynext; yygoto = yystate43(yyarg1);
      case TigerTokens.MAS() => yynext; yygoto = yystate24(yyarg1);
      case TigerTokens.MENOS() => yynext; yygoto = yystate26(yyarg1);
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTexp => return 0;
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate2() : Int = {
    var yygoto : Int = 0;
    yycur match {
      case TigerTokens.NIL() => yynt = YYNTexp(yyrule4()); yygoto = 0
      case TigerTokens.BREAK() => yynt = YYNTexp(yyrule6()); yygoto = 0
      case TigerTokens.WHILE() => yynext; yygoto = yystate3();
      case TigerTokens.LET() => yynext; yygoto = yystate4();
      case TigerTokens.ID(_) => yynt = YYNTid(yyrule47()); yygoto = 0
      case TigerTokens.IF() => yynext; yygoto = yystate7();
      case TigerTokens.PI() => yynext; yygoto = yystate8();
      case TigerTokens.LITERAL(_) => yynt = YYNTexp(yyrule5()); yygoto = 0
      case TigerTokens.NRO(_) => yynt = YYNTexp(yyrule2()); yygoto = 0
      case TigerTokens.FOR() => yynext; yygoto = yystate9();
      case TigerTokens.MENOS() => yynext; yygoto = yystate12();
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case YYNTexp(yyarg1) => yygoto = yystate62(yyarg1);
        case YYNTid(yyarg1) => yygoto = yystate16(yyarg1);
        case YYNTl_value(yyarg1) => yygoto = yystate17(yyarg1);
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate67(yyarg1: Exp) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case TigerTokens.DIST() => yynext; yygoto = yystate20(yyarg1);
      case TigerTokens.MAYIG() => yynext; yygoto = yystate28(yyarg1);
      case TigerTokens.PIPE() => yynext; yygoto = yystate33(yyarg1);
      case TigerTokens.DIV() => yynext; yygoto = yystate14(yyarg1);
      case TigerTokens.COMA() => yynt = YYNTargs(yyrule56(yyarg1)); yygoto = 1
      case TigerTokens.AMPER() => yynext; yygoto = yystate35(yyarg1);
      case TigerTokens.MAYOR() => yynext; yygoto = yystate37(yyarg1);
      case TigerTokens.MENOR() => yynext; yygoto = yystate39(yyarg1);
      case TigerTokens.POR() => yynext; yygoto = yystate22(yyarg1);
      case TigerTokens.IGUAL() => yynext; yygoto = yystate41(yyarg1);
      case TigerTokens.MENIG() => yynext; yygoto = yystate43(yyarg1);
      case TigerTokens.MAS() => yynext; yygoto = yystate24(yyarg1);
      case TigerTokens.MENOS() => yynext; yygoto = yystate26(yyarg1);
      case _ => yynt = YYNTargs(yyrule57(yyarg1)); yygoto = 1
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate68(yyarg1: List[Exp]) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case TigerTokens.PD() => yynt = YYNTargs(yyarg1); yygoto = 2;
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTargs => return 0;
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate66() : Int = {
    var yygoto : Int = 0;
    yycur match {
      case TigerTokens.NIL() => yynt = YYNTexp(yyrule4()); yygoto = 0
      case TigerTokens.BREAK() => yynt = YYNTexp(yyrule6()); yygoto = 0
      case TigerTokens.WHILE() => yynext; yygoto = yystate3();
      case TigerTokens.PD() => yynt = YYNTargs(yyrule58()); yygoto = 0
      case TigerTokens.LET() => yynext; yygoto = yystate4();
      case TigerTokens.ID(_) => yynt = YYNTid(yyrule47()); yygoto = 0
      case TigerTokens.IF() => yynext; yygoto = yystate7();
      case TigerTokens.PI() => yynext; yygoto = yystate8();
      case TigerTokens.LITERAL(_) => yynt = YYNTexp(yyrule5()); yygoto = 0
      case TigerTokens.NRO(_) => yynt = YYNTexp(yyrule2()); yygoto = 0
      case TigerTokens.FOR() => yynext; yygoto = yystate9();
      case TigerTokens.MENOS() => yynext; yygoto = yystate12();
      case _ => yynt = YYNTargs(yyrule58()); yygoto = 0
    }
    while (yygoto == 0) {
      yynt match {
        case YYNTexp(yyarg1) => yygoto = yystate67(yyarg1);
        case YYNTargs(yyarg1) => yygoto = yystate68(yyarg1);
        case YYNTid(yyarg1) => yygoto = yystate16(yyarg1);
        case YYNTl_value(yyarg1) => yygoto = yystate17(yyarg1);
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate70(yyarg1: List[(Symbol, Exp)]) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case TigerTokens.LD() => yynt = YYNTrec_fields(yyarg1); yygoto = 2;
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTrec_fields => return 0;
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate75(yyarg1: String, yyarg3: Exp, yyarg5: List[(Symbol, Exp)]) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case _ => yynt = YYNTrec_fields(yyrule36(yyarg1,yyarg3,yyarg5)); yygoto = 5
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate74(yyarg1: String, yyarg3: Exp) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case TigerTokens.ID(_) => yynt = YYNTid(yyrule47()); yygoto = 0
      case _ => yynt = YYNTrec_fields(yyrule38()); yygoto = 0
    }
    while (yygoto == 0) {
      yynt match {
        case YYNTrec_fields(yyarg5) => yygoto = yystate75(yyarg1,yyarg3,yyarg5);
        case YYNTid(yyarg5) => yygoto = yystate71(yyarg5);
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate73(yyarg1: String, yyarg3: Exp) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case TigerTokens.DIST() => yynext; yygoto = yystate20(yyarg3);
      case TigerTokens.MAYIG() => yynext; yygoto = yystate28(yyarg3);
      case TigerTokens.PIPE() => yynext; yygoto = yystate33(yyarg3);
      case TigerTokens.DIV() => yynext; yygoto = yystate14(yyarg3);
      case TigerTokens.COMA() => yynext; yygoto = yystate74(yyarg1,yyarg3);
      case TigerTokens.AMPER() => yynext; yygoto = yystate35(yyarg3);
      case TigerTokens.MAYOR() => yynext; yygoto = yystate37(yyarg3);
      case TigerTokens.MENOR() => yynext; yygoto = yystate39(yyarg3);
      case TigerTokens.POR() => yynext; yygoto = yystate22(yyarg3);
      case TigerTokens.IGUAL() => yynext; yygoto = yystate41(yyarg3);
      case TigerTokens.MENIG() => yynext; yygoto = yystate43(yyarg3);
      case TigerTokens.MAS() => yynext; yygoto = yystate24(yyarg3);
      case TigerTokens.MENOS() => yynext; yygoto = yystate26(yyarg3);
      case _ => yynt = YYNTrec_fields(yyrule37(yyarg1,yyarg3)); yygoto = 3
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate72(yyarg1: String) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case TigerTokens.NIL() => yynt = YYNTexp(yyrule4()); yygoto = 0
      case TigerTokens.BREAK() => yynt = YYNTexp(yyrule6()); yygoto = 0
      case TigerTokens.WHILE() => yynext; yygoto = yystate3();
      case TigerTokens.LET() => yynext; yygoto = yystate4();
      case TigerTokens.ID(_) => yynt = YYNTid(yyrule47()); yygoto = 0
      case TigerTokens.IF() => yynext; yygoto = yystate7();
      case TigerTokens.PI() => yynext; yygoto = yystate8();
      case TigerTokens.LITERAL(_) => yynt = YYNTexp(yyrule5()); yygoto = 0
      case TigerTokens.NRO(_) => yynt = YYNTexp(yyrule2()); yygoto = 0
      case TigerTokens.FOR() => yynext; yygoto = yystate9();
      case TigerTokens.MENOS() => yynext; yygoto = yystate12();
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case YYNTexp(yyarg3) => yygoto = yystate73(yyarg1,yyarg3);
        case YYNTid(yyarg3) => yygoto = yystate16(yyarg3);
        case YYNTl_value(yyarg3) => yygoto = yystate17(yyarg3);
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate71(yyarg1: String) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case TigerTokens.IGUAL() => yynext; yygoto = yystate72(yyarg1);
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate69() : Int = {
    var yygoto : Int = 0;
    yycur match {
      case TigerTokens.ID(_) => yynt = YYNTid(yyrule47()); yygoto = 0
      case TigerTokens.LD() => yynt = YYNTrec_fields(yyrule38()); yygoto = 0
      case _ => yynt = YYNTrec_fields(yyrule38()); yygoto = 0
    }
    while (yygoto == 0) {
      yynt match {
        case YYNTrec_fields(yyarg1) => yygoto = yystate70(yyarg1);
        case YYNTid(yyarg1) => yygoto = yystate71(yyarg1);
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate86(yyarg1: List[Dec]) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case TigerTokens.IN() => yynt = YYNTdecs(yyarg1); yygoto = 2;
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTdecs => return 0;
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate85() : Int = {
    var yygoto : Int = 0;
    yycur match {
      case TigerTokens.FUNCTION() => yynt = YYNTdecs(yyrule39()); yygoto = 0
      case TigerTokens.TYPE() => yynt = YYNTdecs(yyrule39()); yygoto = 0
      case TigerTokens.VAR() => yynt = YYNTdecs(yyrule39()); yygoto = 0
      case TigerTokens.IN() => yynt = YYNTdecs(yyrule40()); yygoto = 0
      case _ => yynt = YYNTdecs(yyrule40()); yygoto = 0
    }
    while (yygoto == 0) {
      yynt match {
        case YYNTdecs(yyarg1) => yygoto = yystate86(yyarg1);
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate91(yyarg2: String, yyarg4: Exp) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case TigerTokens.DIST() => yynext; yygoto = yystate20(yyarg4);
      case TigerTokens.MAYIG() => yynext; yygoto = yystate28(yyarg4);
      case TigerTokens.PIPE() => yynext; yygoto = yystate33(yyarg4);
      case TigerTokens.DIV() => yynext; yygoto = yystate14(yyarg4);
      case TigerTokens.AMPER() => yynext; yygoto = yystate35(yyarg4);
      case TigerTokens.MAYOR() => yynext; yygoto = yystate37(yyarg4);
      case TigerTokens.MENOR() => yynext; yygoto = yystate39(yyarg4);
      case TigerTokens.IGUAL() => yynext; yygoto = yystate41(yyarg4);
      case TigerTokens.POR() => yynext; yygoto = yystate22(yyarg4);
      case TigerTokens.MENIG() => yynext; yygoto = yystate43(yyarg4);
      case TigerTokens.MAS() => yynext; yygoto = yystate24(yyarg4);
      case TigerTokens.MENOS() => yynext; yygoto = yystate26(yyarg4);
      case _ => yynt = YYNTvardec(yyrule51(yyarg2,yyarg4)); yygoto = 4
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate90(yyarg2: String) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case TigerTokens.NIL() => yynt = YYNTexp(yyrule4()); yygoto = 0
      case TigerTokens.BREAK() => yynt = YYNTexp(yyrule6()); yygoto = 0
      case TigerTokens.WHILE() => yynext; yygoto = yystate3();
      case TigerTokens.LET() => yynext; yygoto = yystate4();
      case TigerTokens.ID(_) => yynt = YYNTid(yyrule47()); yygoto = 0
      case TigerTokens.IF() => yynext; yygoto = yystate7();
      case TigerTokens.PI() => yynext; yygoto = yystate8();
      case TigerTokens.LITERAL(_) => yynt = YYNTexp(yyrule5()); yygoto = 0
      case TigerTokens.NRO(_) => yynt = YYNTexp(yyrule2()); yygoto = 0
      case TigerTokens.FOR() => yynext; yygoto = yystate9();
      case TigerTokens.MENOS() => yynext; yygoto = yystate12();
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case YYNTexp(yyarg4) => yygoto = yystate91(yyarg2,yyarg4);
        case YYNTid(yyarg4) => yygoto = yystate16(yyarg4);
        case YYNTl_value(yyarg4) => yygoto = yystate17(yyarg4);
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate95(yyarg2: String, yyarg4: String, yyarg6: Exp) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case TigerTokens.DIST() => yynext; yygoto = yystate20(yyarg6);
      case TigerTokens.MAYIG() => yynext; yygoto = yystate28(yyarg6);
      case TigerTokens.PIPE() => yynext; yygoto = yystate33(yyarg6);
      case TigerTokens.DIV() => yynext; yygoto = yystate14(yyarg6);
      case TigerTokens.AMPER() => yynext; yygoto = yystate35(yyarg6);
      case TigerTokens.MAYOR() => yynext; yygoto = yystate37(yyarg6);
      case TigerTokens.MENOR() => yynext; yygoto = yystate39(yyarg6);
      case TigerTokens.IGUAL() => yynext; yygoto = yystate41(yyarg6);
      case TigerTokens.POR() => yynext; yygoto = yystate22(yyarg6);
      case TigerTokens.MENIG() => yynext; yygoto = yystate43(yyarg6);
      case TigerTokens.MAS() => yynext; yygoto = yystate24(yyarg6);
      case TigerTokens.MENOS() => yynext; yygoto = yystate26(yyarg6);
      case _ => yynt = YYNTvardec(yyrule52(yyarg2,yyarg4,yyarg6)); yygoto = 6
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate94(yyarg2: String, yyarg4: String) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case TigerTokens.NIL() => yynt = YYNTexp(yyrule4()); yygoto = 0
      case TigerTokens.BREAK() => yynt = YYNTexp(yyrule6()); yygoto = 0
      case TigerTokens.WHILE() => yynext; yygoto = yystate3();
      case TigerTokens.LET() => yynext; yygoto = yystate4();
      case TigerTokens.ID(_) => yynt = YYNTid(yyrule47()); yygoto = 0
      case TigerTokens.IF() => yynext; yygoto = yystate7();
      case TigerTokens.PI() => yynext; yygoto = yystate8();
      case TigerTokens.LITERAL(_) => yynt = YYNTexp(yyrule5()); yygoto = 0
      case TigerTokens.NRO(_) => yynt = YYNTexp(yyrule2()); yygoto = 0
      case TigerTokens.FOR() => yynext; yygoto = yystate9();
      case TigerTokens.MENOS() => yynext; yygoto = yystate12();
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case YYNTexp(yyarg6) => yygoto = yystate95(yyarg2,yyarg4,yyarg6);
        case YYNTid(yyarg6) => yygoto = yystate16(yyarg6);
        case YYNTl_value(yyarg6) => yygoto = yystate17(yyarg6);
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate93(yyarg2: String, yyarg4: String) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case TigerTokens.DOSPIG() => yynext; yygoto = yystate94(yyarg2,yyarg4);
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate92(yyarg2: String) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case TigerTokens.ID(_) => yynt = YYNTid(yyrule47()); yygoto = 0
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case YYNTid(yyarg4) => yygoto = yystate93(yyarg2,yyarg4);
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate89(yyarg2: String) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case TigerTokens.DOSPIG() => yynext; yygoto = yystate90(yyarg2);
      case TigerTokens.DOSP() => yynext; yygoto = yystate92(yyarg2);
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate88() : Int = {
    var yygoto : Int = 0;
    yycur match {
      case TigerTokens.ID(_) => yynt = YYNTid(yyrule47()); yygoto = 0
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case YYNTid(yyarg2) => yygoto = yystate89(yyarg2);
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate96(yyarg1: Dec) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case TigerTokens.FUNCTION() => yynt = YYNTvardec(yyarg1); yygoto = 2;
      case TigerTokens.TYPE() => yynt = YYNTvardec(yyarg1); yygoto = 2;
      case TigerTokens.VAR() => yynt = YYNTvardec(yyarg1); yygoto = 2;
      case TigerTokens.IN() => yynt = YYNTvardec(yyarg1); yygoto = 2;
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTvardec => return 0;
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate87() : Int = {
    var yygoto : Int = 0;
    yycur match {
      case TigerTokens.VAR() => yynext; yygoto = yystate88();
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case YYNTvardec(yyarg1) => yygoto = yystate96(yyarg1);
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate112(yyarg1: String) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case TigerTokens.PTO() => yynt = YYNTid(yyarg1); yygoto = 2;
      case TigerTokens.FUNCTION() => yynt = YYNTid(yyarg1); yygoto = 2;
      case TigerTokens.DIST() => yynt = YYNTid(yyarg1); yygoto = 2;
      case TigerTokens.DO() => yynt = YYNTid(yyarg1); yygoto = 2;
      case TigerTokens.CI() => yynt = YYNTid(yyarg1); yygoto = 2;
      case TigerTokens.MAYIG() => yynt = YYNTid(yyarg1); yygoto = 2;
      case TigerTokens.TYPE() => yynt = YYNTid(yyarg1); yygoto = 2;
      case TigerTokens.CD() => yynt = YYNTid(yyarg1); yygoto = 2;
      case TigerTokens.PD() => yynt = YYNTid(yyarg1); yygoto = 2;
      case TigerTokens.PIPE() => yynt = YYNTid(yyarg1); yygoto = 2;
      case TigerTokens.DIV() => yynt = YYNTid(yyarg1); yygoto = 2;
      case TigerTokens.ELSE() => yynt = YYNTid(yyarg1); yygoto = 2;
      case TigerTokens.DOSPIG() => yynt = YYNTid(yyarg1); yygoto = 2;
      case TigerTokens.YYEOF() => yynt = YYNTid(yyarg1); yygoto = 2;
      case TigerTokens.COMA() => yynt = YYNTid(yyarg1); yygoto = 2;
      case TigerTokens.THEN() => yynt = YYNTid(yyarg1); yygoto = 2;
      case TigerTokens.VAR() => yynt = YYNTid(yyarg1); yygoto = 2;
      case TigerTokens.LD() => yynt = YYNTid(yyarg1); yygoto = 2;
      case TigerTokens.MAYOR() => yynt = YYNTid(yyarg1); yygoto = 2;
      case TigerTokens.AMPER() => yynt = YYNTid(yyarg1); yygoto = 2;
      case TigerTokens.END() => yynt = YYNTid(yyarg1); yygoto = 2;
      case TigerTokens.PCOMA() => yynt = YYNTid(yyarg1); yygoto = 2;
      case TigerTokens.DOSP() => yynt = YYNTid(yyarg1); yygoto = 2;
      case TigerTokens.IN() => yynt = YYNTid(yyarg1); yygoto = 2;
      case TigerTokens.MENOR() => yynt = YYNTid(yyarg1); yygoto = 2;
      case TigerTokens.POR() => yynt = YYNTid(yyarg1); yygoto = 2;
      case TigerTokens.IGUAL() => yynt = YYNTid(yyarg1); yygoto = 2;
      case TigerTokens.MENIG() => yynt = YYNTid(yyarg1); yygoto = 2;
      case TigerTokens.MAS() => yynt = YYNTid(yyarg1); yygoto = 2;
      case TigerTokens.TO() => yynt = YYNTid(yyarg1); yygoto = 2;
      case TigerTokens.MENOS() => yynt = YYNTid(yyarg1); yygoto = 2;
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTid => return 0;
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate111() : Int = {
    var yygoto : Int = 0;
    yycur match {
      case TigerTokens.ID(_) => yynt = YYNTid(yyrule47()); yygoto = 0
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case YYNTid(yyarg1) => yygoto = yystate112(yyarg1);
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate106(yyarg2: String, yyarg4: List[Field], yyarg7: String, yyarg9: Exp) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case TigerTokens.DIST() => yynext; yygoto = yystate20(yyarg9);
      case TigerTokens.MAYIG() => yynext; yygoto = yystate28(yyarg9);
      case TigerTokens.PIPE() => yynext; yygoto = yystate33(yyarg9);
      case TigerTokens.DIV() => yynext; yygoto = yystate14(yyarg9);
      case TigerTokens.AMPER() => yynext; yygoto = yystate35(yyarg9);
      case TigerTokens.MAYOR() => yynext; yygoto = yystate37(yyarg9);
      case TigerTokens.MENOR() => yynext; yygoto = yystate39(yyarg9);
      case TigerTokens.IGUAL() => yynext; yygoto = yystate41(yyarg9);
      case TigerTokens.POR() => yynext; yygoto = yystate22(yyarg9);
      case TigerTokens.MENIG() => yynext; yygoto = yystate43(yyarg9);
      case TigerTokens.MAS() => yynext; yygoto = yystate24(yyarg9);
      case TigerTokens.MENOS() => yynext; yygoto = yystate26(yyarg9);
      case _ => yynt = YYNTfundec(yyrule54(yyarg2,yyarg4,yyarg7,yyarg9)); yygoto = 9
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate105(yyarg2: String, yyarg4: List[Field], yyarg7: String) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case TigerTokens.NIL() => yynt = YYNTexp(yyrule4()); yygoto = 0
      case TigerTokens.BREAK() => yynt = YYNTexp(yyrule6()); yygoto = 0
      case TigerTokens.WHILE() => yynext; yygoto = yystate3();
      case TigerTokens.LET() => yynext; yygoto = yystate4();
      case TigerTokens.ID(_) => yynt = YYNTid(yyrule47()); yygoto = 0
      case TigerTokens.IF() => yynext; yygoto = yystate7();
      case TigerTokens.PI() => yynext; yygoto = yystate8();
      case TigerTokens.LITERAL(_) => yynt = YYNTexp(yyrule5()); yygoto = 0
      case TigerTokens.NRO(_) => yynt = YYNTexp(yyrule2()); yygoto = 0
      case TigerTokens.FOR() => yynext; yygoto = yystate9();
      case TigerTokens.MENOS() => yynext; yygoto = yystate12();
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case YYNTexp(yyarg9) => yygoto = yystate106(yyarg2,yyarg4,yyarg7,yyarg9);
        case YYNTid(yyarg9) => yygoto = yystate16(yyarg9);
        case YYNTl_value(yyarg9) => yygoto = yystate17(yyarg9);
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate104(yyarg2: String, yyarg4: List[Field], yyarg7: String) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case TigerTokens.IGUAL() => yynext; yygoto = yystate105(yyarg2,yyarg4,yyarg7);
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate103(yyarg2: String, yyarg4: List[Field]) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case TigerTokens.ID(_) => yynt = YYNTid(yyrule47()); yygoto = 0
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case YYNTid(yyarg7) => yygoto = yystate104(yyarg2,yyarg4,yyarg7);
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate108(yyarg2: String, yyarg4: List[Field], yyarg7: Exp) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case TigerTokens.DIST() => yynext; yygoto = yystate20(yyarg7);
      case TigerTokens.MAYIG() => yynext; yygoto = yystate28(yyarg7);
      case TigerTokens.PIPE() => yynext; yygoto = yystate33(yyarg7);
      case TigerTokens.DIV() => yynext; yygoto = yystate14(yyarg7);
      case TigerTokens.AMPER() => yynext; yygoto = yystate35(yyarg7);
      case TigerTokens.MAYOR() => yynext; yygoto = yystate37(yyarg7);
      case TigerTokens.MENOR() => yynext; yygoto = yystate39(yyarg7);
      case TigerTokens.IGUAL() => yynext; yygoto = yystate41(yyarg7);
      case TigerTokens.POR() => yynext; yygoto = yystate22(yyarg7);
      case TigerTokens.MENIG() => yynext; yygoto = yystate43(yyarg7);
      case TigerTokens.MAS() => yynext; yygoto = yystate24(yyarg7);
      case TigerTokens.MENOS() => yynext; yygoto = yystate26(yyarg7);
      case _ => yynt = YYNTfundec(yyrule53(yyarg2,yyarg4,yyarg7)); yygoto = 7
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate107(yyarg2: String, yyarg4: List[Field]) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case TigerTokens.NIL() => yynt = YYNTexp(yyrule4()); yygoto = 0
      case TigerTokens.BREAK() => yynt = YYNTexp(yyrule6()); yygoto = 0
      case TigerTokens.WHILE() => yynext; yygoto = yystate3();
      case TigerTokens.LET() => yynext; yygoto = yystate4();
      case TigerTokens.ID(_) => yynt = YYNTid(yyrule47()); yygoto = 0
      case TigerTokens.IF() => yynext; yygoto = yystate7();
      case TigerTokens.PI() => yynext; yygoto = yystate8();
      case TigerTokens.LITERAL(_) => yynt = YYNTexp(yyrule5()); yygoto = 0
      case TigerTokens.NRO(_) => yynt = YYNTexp(yyrule2()); yygoto = 0
      case TigerTokens.FOR() => yynext; yygoto = yystate9();
      case TigerTokens.MENOS() => yynext; yygoto = yystate12();
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case YYNTexp(yyarg7) => yygoto = yystate108(yyarg2,yyarg4,yyarg7);
        case YYNTid(yyarg7) => yygoto = yystate16(yyarg7);
        case YYNTl_value(yyarg7) => yygoto = yystate17(yyarg7);
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate102(yyarg2: String, yyarg4: List[Field]) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case TigerTokens.DOSP() => yynext; yygoto = yystate103(yyarg2,yyarg4);
      case TigerTokens.IGUAL() => yynext; yygoto = yystate107(yyarg2,yyarg4);
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate101(yyarg2: String, yyarg4: List[Field]) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case TigerTokens.PD() => yynext; yygoto = yystate102(yyarg2,yyarg4);
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate100(yyarg2: String) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case TigerTokens.ID(_) => yynt = YYNTtyfield(yyrule55()); yygoto = 0
      case _ => yynt = YYNTtyflds(yyrule50()); yygoto = 0
    }
    while (yygoto == 0) {
      yynt match {
        case YYNTtyflds(yyarg4) => yygoto = yystate101(yyarg2,yyarg4);
        case YYNTtyfield(yyarg4) => yygoto = yystate109(yyarg4);
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate99(yyarg2: String) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case TigerTokens.PI() => yynext; yygoto = yystate100(yyarg2);
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate98() : Int = {
    var yygoto : Int = 0;
    yycur match {
      case TigerTokens.ID(_) => yynt = YYNTid(yyrule47()); yygoto = 0
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case YYNTid(yyarg2) => yygoto = yystate99(yyarg2);
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate110(yyarg1: Dec) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case TigerTokens.FUNCTION() => yynt = YYNTfundec(yyarg1); yygoto = 2;
      case TigerTokens.TYPE() => yynt = YYNTfundec(yyarg1); yygoto = 2;
      case TigerTokens.VAR() => yynt = YYNTfundec(yyarg1); yygoto = 2;
      case TigerTokens.IN() => yynt = YYNTfundec(yyarg1); yygoto = 2;
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTfundec => return 0;
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate97() : Int = {
    var yygoto : Int = 0;
    yycur match {
      case TigerTokens.FUNCTION() => yynext; yygoto = yystate98();
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case YYNTfundec(yyarg1) => yygoto = yystate110(yyarg1);
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate64(yyarg1: Exp) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case TigerTokens.DIST() => yynext; yygoto = yystate20(yyarg1);
      case TigerTokens.MAYIG() => yynext; yygoto = yystate28(yyarg1);
      case TigerTokens.PIPE() => yynext; yygoto = yystate33(yyarg1);
      case TigerTokens.DIV() => yynext; yygoto = yystate14(yyarg1);
      case TigerTokens.AMPER() => yynext; yygoto = yystate35(yyarg1);
      case TigerTokens.MAYOR() => yynext; yygoto = yystate37(yyarg1);
      case TigerTokens.PCOMA() => yynt = YYNTexplist(yyrule34(yyarg1)); yygoto = 1
      case TigerTokens.MENOR() => yynext; yygoto = yystate39(yyarg1);
      case TigerTokens.POR() => yynext; yygoto = yystate22(yyarg1);
      case TigerTokens.IGUAL() => yynext; yygoto = yystate41(yyarg1);
      case TigerTokens.MENIG() => yynext; yygoto = yystate43(yyarg1);
      case TigerTokens.MAS() => yynext; yygoto = yystate24(yyarg1);
      case TigerTokens.MENOS() => yynext; yygoto = yystate26(yyarg1);
      case _ => yynt = YYNTexplist(yyrule35(yyarg1)); yygoto = 1
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate65(yyarg1: List[Exp]) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case TigerTokens.PD() => yynt = YYNTexplist(yyarg1); yygoto = 2;
      case TigerTokens.END() => yynt = YYNTexplist(yyarg1); yygoto = 2;
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTexplist => return 0;
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate63() : Int = {
    var yygoto : Int = 0;
    yycur match {
      case TigerTokens.NIL() => yynt = YYNTexp(yyrule4()); yygoto = 0
      case TigerTokens.BREAK() => yynt = YYNTexp(yyrule6()); yygoto = 0
      case TigerTokens.WHILE() => yynext; yygoto = yystate3();
      case TigerTokens.LET() => yynext; yygoto = yystate4();
      case TigerTokens.ID(_) => yynt = YYNTid(yyrule47()); yygoto = 0
      case TigerTokens.IF() => yynext; yygoto = yystate7();
      case TigerTokens.PI() => yynext; yygoto = yystate8();
      case TigerTokens.LITERAL(_) => yynt = YYNTexp(yyrule5()); yygoto = 0
      case TigerTokens.NRO(_) => yynt = YYNTexp(yyrule2()); yygoto = 0
      case TigerTokens.FOR() => yynext; yygoto = yystate9();
      case TigerTokens.MENOS() => yynext; yygoto = yystate12();
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case YYNTexp(yyarg1) => yygoto = yystate64(yyarg1);
        case YYNTid(yyarg1) => yygoto = yystate16(yyarg1);
        case YYNTl_value(yyarg1) => yygoto = yystate17(yyarg1);
        case YYNTexplist(yyarg1) => yygoto = yystate65(yyarg1);
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate82(yyarg3: String) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case _ => yynt = YYNTty(yyrule46(yyarg3)); yygoto = 3
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate81() : Int = {
    var yygoto : Int = 0;
    yycur match {
      case TigerTokens.ID(_) => yynt = YYNTid(yyrule47()); yygoto = 0
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case YYNTid(yyarg3) => yygoto = yystate82(yyarg3);
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate80() : Int = {
    var yygoto : Int = 0;
    yycur match {
      case TigerTokens.OF() => yynext; yygoto = yystate81();
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate83(yyarg2: String, yyarg4: Ty) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case _ => yynt = YYNTdec(yyrule41(yyarg2,yyarg4)); yygoto = 4
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate79(yyarg2: String) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case TigerTokens.ARRAY() => yynext; yygoto = yystate80();
      case TigerTokens.LI() => yynt = YYNTty(yyrule45()); yygoto = 0
      case TigerTokens.ID(_) => yynt = YYNTty(yyrule44()); yygoto = 0
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case YYNTty(yyarg4) => yygoto = yystate83(yyarg2,yyarg4);
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate78(yyarg2: String) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case TigerTokens.IGUAL() => yynext; yygoto = yystate79(yyarg2);
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate77() : Int = {
    var yygoto : Int = 0;
    yycur match {
      case TigerTokens.ID(_) => yynt = YYNTid(yyrule47()); yygoto = 0
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case YYNTid(yyarg2) => yygoto = yystate78(yyarg2);
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate84(yyarg1: Dec) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case TigerTokens.FUNCTION() => yynt = YYNTdec(yyarg1); yygoto = 2;
      case TigerTokens.TYPE() => yynt = YYNTdec(yyarg1); yygoto = 2;
      case TigerTokens.VAR() => yynt = YYNTdec(yyarg1); yygoto = 2;
      case TigerTokens.IN() => yynt = YYNTdec(yyarg1); yygoto = 2;
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTdec => return 0;
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate76() : Int = {
    var yygoto : Int = 0;
    yycur match {
      case TigerTokens.FUNCTION() => yynt = YYNTdec(yyrule43()); yygoto = 0
      case TigerTokens.TYPE() => yynext; yygoto = yystate77();
      case TigerTokens.VAR() => yynt = YYNTdec(yyrule42()); yygoto = 0
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case YYNTdec(yyarg1) => yygoto = yystate84(yyarg1);
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }


  def fundeLFunTipos(d: Dec, p: List[Dec]) = (d, p) match {
  case (TypeDecs(List(dt)), TypeDecs(hdt)::t ) => TypeDecs(dt::hdt) :: t
  case (FunctionDecs(List(dt)), FunctionDecs(hdt)::t ) => FunctionDecs(dt :: hdt)::t
  case (d1, dl) => d1::dl 
  }
	

  def nombre(s:Var) = s match {
    case SimpleVar(x) => x
    case _ => throw new Error("Imposible que no sea SimpleVar!")
  }
   
  def yyerror(s:String) = println(s);
  
  def line(): Int = scanner.getLineNumber()

  var scanner : TigerScanner = null

  def createScanner(in: java.io.InputStream) = {
    scanner = new TigerScanner(in);
    yyreset(scanner);
  }


}
